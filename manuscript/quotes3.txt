# 2010
{pagebreak}






![](images-high-quality/2010-1.jpg)




{pagebreak}

  
* * *

| "The **software project management** body of knowledge is gradually being renewed across the entire lifecycle. In the **conception phase**, the focus is on **fostering innovation** through new approaches such as business analysis and crowdsourcing techniques. In the **construction phase**, the rise of **global software development** has shrunk the world and led to new approaches to risk management that take into account factors such as cultural diversity. In the **project conclusion** phase, new approaches to the evaluation of project success are being introduced, such as project **retrospectives** and **intellectual capital reporting**." |


* * *

|*John Favaro, **Guest Editor's Introduction: Renewing the Software Project Management Life Cycle**, IEEE Software, January 2010.[^foo1]*|

[^foo1]: [DOI: 10.1109/MS.2010.9 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.9)
 
 
{pagebreak}


  
* * *

| "Developing parallel applications is notoriously difficult, but it's even more complex for desktop applications. The added difficulties primarily come from their interactive nature, where users largely perceive their performance. Desktop applications are typically developed with **graphical toolkits** that in turn have **limitations** in regards to **multithreading**." |


* * *

|*Oliver Sinnen, Nasser Giacaman, **Object-Oriented Parallelisation of Java Desktop Programs**, IEEE Software, January 2010.[^foo2]*|

[^foo2]: [DOI: 10.1109/MS.2010.135 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.135)
 
 
{pagebreak}


  
* * *

| "If you're **successful**, stakeholders will **trust you**. However, **too much trust** can be **dangerous**. Stakeholders can become **overdependent** on your guidance, especially if they **lack the knowledge** to specify requirements for the new system. " |


* * *

|*Neil Maiden, **Trust Me, I'm an Analyst**, IEEE Software, January 2010.[^foo3]*|

[^foo3]: [DOI: 10.1109/MS.2010.22 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.22)
 
 
{pagebreak}


  
* * *

| "Desktop software developers' interest in **graphics hardware** is increasing as a result of modern graphics cards' capabilities to act as compute devices that augment the **main processor**. This capability means parallel computing is no longer a dedicated task for the CPU. A trend toward heterogeneous computing combines the **main processor** and **graphics processing unit** (GPU)." |


* * *

|*Frank Feinbube, Peter Troger, Andreas Polze, **Joint Forces: From Multithreaded Programming to GPU Computing**, IEEE Software, January 2010.[^foo4]*|

[^foo4]: [DOI: 10.1109/MS.2010.134 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.134)
 
 
{pagebreak}


  
* * *

| "The drive to rapidly develop layered, interconnected, and flexible systems has eclipsed consideration of resource costs. Consequently, **large Java applications** suffer from **runtime bloat**: a large and pervasive **infrastructure tax**, where simple transactions require a few hundred thousand method calls, and a server with 1 Gbyte of memory sometimes can only support a few hundred users." |


* * *

|*Edith Schonberg, Nick Mitchell, Gary Sevitsky, **Four Trends Leading to Java Runtime Bloat**, IEEE Software, January 2010.[^foo5]*|

[^foo5]: [DOI: 10.1109/MS.2010.7 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.7)
 
 
{pagebreak}


  
* * *

| "**Mobile devices** are increasingly accepted as suitable media for multimedia-rich applications. ... the most popular development platform options ... **Java ME**, **.NET Compact Framework**, **Flash Lite**, and **Android**." |


* * *

|*Damianos Gavalas, Daphne Economou, **Development Platforms for Mobile Applications: Status and Trends**, IEEE Software, January 2010.[^foo6]*|

[^foo6]: [DOI: 10.1109/MS.2010.155 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.155)
 
 
{pagebreak}


  
* * *

| "Modern distributed software systems involve **dynamic operating conditions** that pose engineering challenges to traditional offline design. **Multiagent systems** engineering can solve some of these problems by offering self-adaptive features such as **loose coupling**, **context sensitivity**, and **robustness to failure**." |


* * *

|*Michael Georgeff, Danny Weyns, **Self-Adaptation Using Multiagent Systems**, IEEE Software, January 2010.[^foo7]*|

[^foo7]: [DOI: 10.1109/MS.2010.18 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.18)
 
 
{pagebreak}


  
* * *

| "**Architecture** is just a collective hunch, **a shared hallucination**, an assertion by a set of stakeholders on the nature of their observable world, be it a world that is or a world as they wish it to be." |


* * *

|*Grady Booch, **Architecture as a Shared Hallucination**, IEEE Software, January 2010.[^foo8]*|

[^foo8]: [DOI: 10.1109/MS.2010.4 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.4)
 
 
{pagebreak}






![](images-high-quality/2010-2.jpg)




{pagebreak}

  
* * *

| "Railroad tracks offer guidance and support. There are various tools that can give our software the same handling. The main tool for guiding the code's direction is the **language's type system**. For values, the type system can help us by establishing a separate type for each distinct class; for code, interfaces and abstract classes ensure that we won't forget some crucial methods when we add functionality through a new class. With **domain-specific languages** or even suitably initialized data structures we can efficiently express exactly what the designer intended and nothing more. At a higher level, **architectures** that enforce a particular open-ended but well-defined interface will also guide a software's progress. Finally, the most flexible track-laying approach is a **tool-supported** software development process." |


* * *

|*Diomidis Spinellis, **Software Tracks**, IEEE Software, March 2010.[^foo9]*|

[^foo9]: [DOI: 10.1109/MS.2010.56 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.56)
 
 
{pagebreak}


  
* * *

| "In a typical **client-server scenario**, a server provides valuable services to client applications that run remotely on **untrusted client computers**. Typical examples are **video on demand**, online games, **voice-over-IP** communications, and many others. However, **client-side users** often hold **administrative privileges** on their machines and could tamper with the client application to fulfill the service in violation of the service usage conditions or service agreements. **Guaranteeing client-code security** is one of the most difficult security problem to address." |


* * *

|*Paolo Tonella, Mariano Ceccato, **CodeBender: Remote Software Protection Using Orthogonal Replacement**, IEEE Software, March 2010.[^foo10]*|

[^foo10]: [DOI: 10.1109/MS.2010.158 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.158)
 
 
{pagebreak}


  
* * *

| "**Providing architecture** as a **service to application developers**. The approach is an effective way to implement the architecture process especially, but not only, in the context of agile development. In their role as stakeholders of nonfunctional system qualities, architects prepare and support developers by **participating** in **coding activities** and play a key role in **communicating** the architecture throughout the project's lifetime." |


* * *

|*Roland Faber, **Architects as Service Providers**, IEEE Software, March 2010.[^foo11]*|

[^foo11]: [DOI: 10.1109/MS.2010.25 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.25)
 
 
{pagebreak}


  
* * *

| "**Agile development** delivers value quickly, using a series of short-term goals based on **immediate priorities**. **Architecture** grows value carefully, using a set of long-term objectives based on fundamental principles. The two seem at odds, but the architect can bring them together at four well-defined points in agile projects: during **project initiation** by setting architectural direction, through **storyboarding** by introducing specific architectural tasks, within sprints by close **collaboration on challenging issues**, and as working software gets delivered by performing **direct inspection**." |


* * *

|*James Madison, **Agile Architecture Interactions**, IEEE Software, March 2010.[^foo12]*|

[^foo12]: [DOI: 10.1109/MS.2010.27 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.27)
 
 
{pagebreak}


  
* * *

| "**Unintentionally** **violating** open source software **(OSS) licenses** by reusing OSS code is a serious problem for both software companies and OSS developers. The simplest intuitive way to identify such reuse is to **measure code clones** - duplicated code fragments - between a suspected program and an existing OSS program." |


* * *

|*Yuki Manabe, Satoshi Okahara, Kenichi Matsumoto, Akito Monden, **Guilty or Not Guilty: Using Clone Metrics to Determine Open Source Licensing Violations**, IEEE Software, March 2010.[^foo13]*|

[^foo13]: [DOI: 10.1109/MS.2010.159 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.159)
 
 
{pagebreak}


  
* * *

| "The evolution of **software into services** imposes certain concerns in the form of expressing and accessing services. The seamless proliferation of services demands a **new kind** of **software protection** with respect to **copyrights** and **moral rights** of service-based software to enable services' widespread use." |


* * *

|*G.R. Gangadharan, Vincenzo D'Andrea, **Managing Copyrights and Moral Rights of Service-Based Software**, IEEE Software, March 2010.[^foo14]*|

[^foo14]: [DOI: 10.1109/MS.2010.161 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.161)
 
 
{pagebreak}


  
* * *

| "**Design tactics** are a methodology architects can use to master this challenge: choosing design solutions that are **simple**, **economic**, and **appropriate** for resolving the problems at hand." |


* * *

|*Frank Buschmann, **Learning from Failure, Part III: On Hammers and Nails, and Falling in Love with Technology and Design**, IEEE Software, March 2010.[^foo15]*|

[^foo15]: [DOI: 10.1109/MS.2010.47 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.47)
 
 
{pagebreak}


  
* * *

| "How can an **organization transition** from several **functionally overlapping systems** to just one? This scenario is common after, for example, **company acquisitions** and mergers or as a result of different units in an organization growing to the point at which the two independent efforts must be synchronized to continue." |


* * *

|*Ivica Crnkovi&#263;, Rikard Land, **Oh Dear, We Bought Our Competitor: Integrating Similar Software Systems**, IEEE Software, March 2010.[^foo16]*|

[^foo16]: [DOI: 10.1109/MS.2010.86 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.86)
 
 
{pagebreak}


  
* * *

| "**Enterprise architecture** and **technical architecture** are related yet **different**: whereas EA focuses on the architecture of a **business** that uses **software-intensive systems**, TA focuses on the architecture of the **software-intensive systems** that are used by a business to makes its mission manifest." |


* * *

|*Grady Booch, **Enterprise Architecture and Technical Architecture**, IEEE Software, March 2010.[^foo17]*|

[^foo17]: [DOI: 10.1109/MS.2010.42 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.42)
 
 
{pagebreak}






![](images-high-quality/2010-3.jpg)




{pagebreak}

  
* * *

| "**Web 2.0** is less a **new technology** than a **new way of using technology**." |


* * *

|*Jos&#x00E9; Manuel Torres, Nicol&#x00E1;s Serrano, **Web 2.0 for Practitioners**, IEEE Software, May 2010.[^foo18]*|

[^foo18]: [DOI: 10.1109/MS.2010.84 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.84)
 
 
{pagebreak}


  
* * *

| "Using **software product lines** to create a shared set of features can increase productivity and reduce costs for organizations. Successful software product lines share certain **commonalities** but also differ in certain ways, depending on diverse aspects of the products and the product lines themselves." |


* * *

|*Kentaro Yoshimura, Paul Jensen, Dirk Muthig, John D. McGregor, **Guest Editors' Introduction: Successful Software Product Line Practices**, IEEE Software, May 2010.[^foo19]*|

[^foo19]: [DOI: 10.1109/MS.2010.74 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.74)
 
 
{pagebreak}


  
* * *

| "We characterize two **strategic pitfalls** that repeatedly occur: failure to recognize that a software product line approach is **a business and technical strategy**, and failure to **manage the unique aspects** of governance for a product line and roll it out appropriately." |


* * *

|*Linda M. Northrop, Lawrence G. Jones, **Clearing the Way for Software Product Line Success**, IEEE Software, May 2010.[^foo20]*|

[^foo20]: [DOI: 10.1109/MS.2010.71 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.71)
 
 
{pagebreak}


  
* * *

| "**Successful product lines** suffer over time from **increasing dependencies** between the software assets that make up the product line and, consequently, the teams associated with these assets. This results in high **coordination cost**, **slow release** cycles, and high system-level **error density**." |


* * *

|*Jan Bosch, **Toward Compositional Software Product Lines**, IEEE Software, May 2010.[^foo21]*|

[^foo21]: [DOI: 10.1109/MS.2010.32 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.32)
 
 
{pagebreak}


  
* * *

| "**Product line scoping** is the process of determining which of an organization's products, features, and domains would find **systematic reuse** economically useful." |


* * *

|*Isabel John, **Using Documentation for Product Line Scoping**, IEEE Software, May 2010.[^foo22]*|

[^foo22]: [DOI: 10.1109/MS.2010.34 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.34)
 
 
{pagebreak}


  
* * *

| "**Refactoring** was originally conceived as a technique for enhancing the design of an existing code base by applying small **behavior-preserving transformations** to the code. ... discuss how to **improve the usability** of a Web application by applying **refactoring** on its **design structure**. " |


* * *

|*Gustavo Rossi, Alejandra Garrido, Damiano Distante, **Refactoring for Usability in Web Applications**, IEEE Software, May 2010.[^foo23]*|

[^foo23]: [DOI: 10.1109/MS.2010.114 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.114)
 
 
{pagebreak}


  
* * *

| "**JavaScript** is often seen as a **toy language**. Yet, it offers a **powerful mix** of interesting **language features** based on **functional programming**, **prototyping**, and **mutable objects**. **Web 2.0** apps use JavaScript extensively to realize sophisticated client-side functionality. Taken this into account, it isn't surprising that JavaScript made it to the **top 10** in a survey on the most popular programming languages. " |


* * *

|*Holger M. Kienle, **It's About Time to Take JavaScript (More) Seriously**, IEEE Software, May 2010.[^foo24]*|

[^foo24]: [DOI: 10.1109/MS.2010.76 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.76)
 
 
{pagebreak}


  
* * *

| "What are the top five properties that make a **software design elegant**? ... we explore ... five properties leading architects have found useful: **economy**, **visibility**, **spacing**, **symmetry**, and **emergence**." |


* * *

|*Frank Buschmann, Kevlin Henney, **Five Considerations for Software Architecture, Part 1**, IEEE Software, May 2010.[^foo25]*|

[^foo25]: [DOI: 10.1109/MS.2010.72 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.72)
 
 
{pagebreak}


  
* * *

| "**Developing** **concurrent software** is hard. **Testing** concurrent software is **harder**. " |


* * *

|*Sebastian Burckhardt, Madan Musuvathi, Shaz Qadeer, Peli de Halleux, Thomas Ball, **Predictable and Progressive Testing of Multithreaded Code**, IEEE Software, May 2010.[^foo26]*|

[^foo26]: [DOI: 10.1109/MS.2010.64 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.64)
 
 
{pagebreak}


  
* * *

| "An **architectural review** serves several purposes: to gain confidence in the design, to reason about alternatives, to attend to architectural rot. The process of such a review involves the interplay of **design decisions**, **scenari**os, and **forces** on the system." |


* * *

|*Grady Booch, **Architecture Reviews**, IEEE Software, May 2010.[^foo27]*|

[^foo27]: [DOI: 10.1109/MS.2010.68 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.68)
 
 
{pagebreak}






![](images-high-quality/2010-4.jpg)




{pagebreak}

  
* * *

| "The **cloud-computing paradigm** is characterized by **transactional** resource **acquisition** ... **nonfederated** resource **provisioning** ... a **metered resource**." |


* * *

|*Panos Louridas, **Up in the Air: Moving Your Applications to the Cloud**, IEEE Software, July 2010.[^foo28]*|

[^foo28]: [DOI: 10.1109/MS.2010.109 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.109)
 
 
{pagebreak}


  
* * *

| "**Evolving** and **maintaining** software-intensive systems is critical, and, consequently, **most developers** are involved in maintaining, incrementally enhancing, and adapting existing systems." |


* * *

|*Yann-Ga&#x00EB;l Gueh&#x00E9;n&#x00E9;uc, Maja D'Hondt, Juan Fern&#x00E1;ndez-Ramil, Tom Mens, **Guest Editors' Introduction: Software Evolution**, IEEE Software, July 2010.[^foo29]*|

[^foo29]: [DOI: 10.1109/MS.2010.100 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.100)
 
 
{pagebreak}


  
* * *

| "Despite growth in the popularity of desktop systems, Web applications, and mobile computing, **mainframe systems** remain the **dominant force** in large-scale enterprise computing. Although they're sometimes referred to as '**the dinosaurs of computing**,' even mainframe systems must adapt to changing circumstances to survive." |


* * *

|*Serge Demeyer, Joris Van Geet, **Reverse Engineering on the Mainframe: Lessons Learned from 'In Vivo' Research**, IEEE Software, July 2010.[^foo30]*|

[^foo30]: [DOI: 10.1109/MS.2010.65 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.65)
 
 
{pagebreak}


  
* * *

| "**Architecture evaluations** offer many benefits, including the early detection of problems and a better understanding of a system's possibilities. ... the **lightweight sanity check** for implemented architectures (LiSCIA) evaluation method ... can be used out of the box to perform a first architectural evaluation of a system. ... By **periodically performing** this check, developers and project managers can **control** the implemented **architecture's erosion** as the system (and its requirements) evolves over time." |


* * *

|*Eric Bouwers, Arie van Deursen, **A Lightweight Sanity Check for Implemented Architectures**, IEEE Software, July 2010.[^foo31]*|

[^foo31]: [DOI: 10.1109/MS.2010.60 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.60)
 
 
{pagebreak}


  
* * *

| "**Software** is key to commercial **magnetic resonance imaging (MRI)** scanners, the medical devices that make images of the living human body for clinical purposes." |


* * *

|*Joop van der Linden, Lennart Hofland, **Software in MRI Scanners**, IEEE Software, July 2010.[^foo32]*|

[^foo32]: [DOI: 10.1109/MS.2010.106 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.106)
 
 
{pagebreak}


  
* * *

| "All complex **systems fail**, by some measure of the word 'fail,' with consequences ranging from **benign** to **catastrophic**." |


* * *

|*Grady Booch, **Systems Architecture**, IEEE Software, July 2010.[^foo33]*|

[^foo33]: [DOI: 10.1109/MS.2010.107 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.107)
 
 
{pagebreak}






![](images-high-quality/2010-5.jpg)




{pagebreak}

  
* * *

| "The top questions were Agile and **large projects**. What factors can **break self-organization**? Do teams really need to always be **collocated** to collaborate effectively? **Architecture and agile**—how much design is enough for different classes of problem? Hard facts on **costs of distribution** (in $, £, €, and so on). The correlation between **release length** and **success rate**. **What metrics** can we use with minimal **side-effects**? Distributed agile and **trust**—what happens around 8–12 weeks? Statistics and data about how much **money/time is saved** by agile. **Sociological studies**—what were the personalities in successful/failed agile teams?" |


* * *

|*Helen Sharp, Sallyann Freudenberg, **The Top 10 Burning Research Questions from Practitioners**, IEEE Software, September 2010.[^foo34]*|

[^foo34]: [DOI: 10.1109/MS.2010.129 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.129)
 
 
{pagebreak}


  
* * *

| "**Combining paradigms** offers important benefits—for example, OOP minimizes the conceptual gap between the problem domain and the implementation in software, and functional programming (FP) brings mathematical rigor and robustness to computing, especially for concurrent applications." |


* * *

|*Dean Wampler, Tony Clark, **Guest Editors' Introduction: Multiparadigm Programming**, IEEE Software, September 2010.[^foo35]*|

[^foo35]: [DOI: https://doi.ieeecomputersociety.org/10.1109/MS.2010.119 ](https://doi.ieeecomputersociety.org/10.1109/MS.2010.119)
 
 
{pagebreak}


  
* * *

| "A collection of **coherent**, often **ideologically** or **theoretically** based **abstractions** constitutes a **programming paradigm**. ... Well-known examples include **object-oriented**, **relational**, **functional**, **constraint-based**, **theorem-proving**, **concurrent**, **imperative**, and **declarative**. Less well-known (or perhaps less well-defined) examples include **graphical**, **reflective**, **context-aware**, **rule-based**, and **agent-oriented**. ... using just **one language** technology and paradigm is becoming much **less common**, replaced by **multiparadigm programming** in which the heterogeneous application consists of several subcomponents, each implemented with an appropriate paradigm and able to communicate with other subcomponents implemented with a different paradigm. " |


* * *

|*Dean Wampler, Tony Clark, **Guest Editors' Introduction: Multiparadigm Programming**, IEEE Software, September 2010.[^foo36]*|

[^foo36]: [DOI: 10.1109/MS.2010.119 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.119)
 
 
{pagebreak}


  
* * *

| "**Domain-specific languages** (DSLs) are becoming a mature application development tool that developers use to express concerns. **Multi-DSL** applications comprise DSLs and host language code. Exploiting the **Ruby** programming language's **built-in support** for the **imperative**, **functional**, and **object-oriented** paradigm, extended with **feature-oriented** programming ..." |


* * *

|*Sebastian G&#x00FC;nther, **Multi-DSL Applications with Ruby**, IEEE Software, September 2010.[^foo37]*|

[^foo37]: [DOI: 10.1109/MS.2010.91 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.91)
 
 
{pagebreak}


  
* * *

| "**Constraint programming** (CP) is a young but rapidly developing technology that supports the modeling and solution of a wide range of **planning**, **scheduling**, **search**, and **optimization** problems. The integration of CP concepts into languages from other paradigms yields constraint-based multiparadigm programming." |


* * *

|*Petra Hofstedt, **Constraint-Based Object-Oriented Programming**, IEEE Software, September 2010.[^foo38]*|

[^foo38]: [DOI: 10.1109/MS.2010.89 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.89)
 
 
{pagebreak}


  
* * *

| "**Storing data** the same **way it's used** in the application would simplify the programming model, making it easier to decentralize data processing and, in turn, enable horizontal scaling. Emerging **NoSQL** data-storage engines support this strategy. Just like the application layer, the data-storage layer can use multiple paradigms and store data in a way that's **semantically closer** to the corresponding domain models." |


* * *

|*Debasish Ghosh, **Multiparadigm Data Storage for Enterprise Applications**, IEEE Software, September 2010.[^foo39]*|

[^foo39]: [DOI: 10.1109/MS.2010.87 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.87)
 
 
{pagebreak}


  
* * *

| "To some, the phrase '**agile architecture**' is an **oxymoron**. " |


* * *

|*Grady Booch, **An Architectural Oxymoron**, IEEE Software, September 2010.[^foo40]*|

[^foo40]: [DOI: 10.1109/MS.2010.117 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.117)
 
 
{pagebreak}






![](images-high-quality/2010-6.jpg)




{pagebreak}

  
* * *

| "Techniques for **requirements acquisition** must find new ways to gather information about **brands** and **emotional responses** to them. Consumers will also likely have new types of service requirements that must be captured, documented, and easily traceable via new multidisciplinary techniques. ... use **storyboards** to capture the interplay between **human interaction** and **service design** and so improve the quality of **service design** delivery." |


* * *

|*Malcolm Sutherland, Neil Maiden, **Storyboarding Requirements**, IEEE Software, November 2010.[^foo41]*|

[^foo41]: [DOI: 10.1109/MS.2010.147 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.147)
 
 
{pagebreak}


  
* * *

| "It has long been recognized that one of the key **benefits of architecting** our systems is **managing their complexity**. This complexity arises from **many factors**: the needs and constraints of the multitude of **system stakeholders** ... the **political**, **social**, and other factors from the **environment** in which the system is embedded; the realities and constraints of the system's **development**, **implementation**, **maintenance**, and **operation** in relation to available resources; and, of course, the intended properties of the system itself. Taken together, these diverse interests are a system's **stakeholder concerns**. " |


* * *

|*Rich Hilliard, Paris Avgeriou, Patricia Lago, **Guest Editors' Introduction: Software Architecture: Framing Stakeholders' Concerns**, IEEE Software, November 2010.[^foo42]*|

[^foo42]: [DOI: 10.1109/MS.2010.142 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.142)
 
 
{pagebreak}


  
* * *

| "Architectures come about through forces and needs other than those captured in traditional requirements documents. **A business goal** expresses **why** a system is being developed and what stakeholders in the developing organization, the customer organization, and beyond aspire to achieve through its production and use." |


* * *

|*Len Bass, Paul Clements, **The Business Goals Viewpoint**, IEEE Software, November 2010.[^foo43]*|

[^foo43]: [DOI: 10.1109/MS.2010.116 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.116)
 
 
{pagebreak}


  
* * *

| "The **initial presentation** of **new open source software projects** plays a potentially critical role in **attracting developers**." |


* * *

|*Namjoo Choi, Indushobha Chengalur-Smith, Andrew Whitmore, **Managing First Impressions of New Open Source Software Projects**, IEEE Software, November 2010.[^foo44]*|

[^foo44]: [DOI: 10.1109/MS.2010.26 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.26)
 
 
{pagebreak}


  
* * *

| "The **architecture** of a software-intensive system is best **reasoned** about through multiple, nearly **independent views.**" |


* * *

|*Grady Booch, **The Elephant and the Blind Programmers**, IEEE Software, November 2010.[^foo45]*|

[^foo45]: [DOI: 10.1109/MS.2010.149 ](http://doi.ieeecomputersociety.org/10.1109/MS.2010.149)
 
 
{pagebreak}


# 2011
{pagebreak}






![](images-high-quality/2011-1.jpg)




{pagebreak}

  
* * *

| "**Watts Humphrey** had a truly remarkable career, during which he developed or contributed to the **Personal Software Process**, **Team Software Process**, and **Capability Maturity Model Integration** (CMMI) framework, among many other contributions." |


* * *

|*Forrest Shull, **Watts Humphrey: 4 July 1927 - 28 October 2010**, IEEE Software, January 2011.[^foo46]*|

[^foo46]: [DOI: 10.1109/MS.2011.21 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.21)
 
 
{pagebreak}


  
* * *

| "**Developers**, for the most part, **don't draw diagrams** because diagrams all too often don't offer any fundamental value that advances essential work. Yet, the problem remains that **we must visualize** ultra-large complex systems that have no directly observable physical manifestation." |


* * *

|*Grady Booch, **Draw Me a Picture**, IEEE Software, January 2011.[^foo47]*|

[^foo47]: [DOI: 10.1109/MS.2011.4 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.4)
 
 
{pagebreak}


  
* * *

| "The computer industry is experiencing a major shift: **improved single processor performance** via **higher clock rates** has reached its technical limits due to overheating. ... exploiting the **full potential** of these processors requires **parallel programming**." |


* * *

|*Kurt Keutzer, Wolfram Schulte, Victor Pankratius, **Guest Editors' Introduction: Parallelism on the Desktop**, IEEE Software, January 2011.[^foo48]*|

[^foo48]: [DOI: 10.1109/MS.2011.8 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.8)
 
 
{pagebreak}


  
* * *

| "Writing a correct parallel program is difficult; writing a **highly modular parallel program** that performs well in a multiprogrammed environment is even more so. **Intel Threading Building Blocks** (Intel TBB), a key component of Intel Parallel Building Blocks , is a widely used C++ template library that helps developers achieve this goal." |


* * *

|*Michael Voss, Wooyoung Kim, **Multicore Desktop Programming with Intel Threading Building Blocks**, IEEE Software, January 2011.[^foo49]*|

[^foo49]: [DOI: 10.1109/MS.2011.12 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.12)
 
 
{pagebreak}


  
* * *

| "Looking at **software** from a **design perspective**, understanding software as a designed artifact, and considering how design reaches into the whole software life cycle can bring significant benefits both to our understanding of what works in software design and to our approach to tools and practices." |


* * *

|*Andre van der Hoek, Alex Baker, Harold Ossher, Marian Petre, **Guest Editors' Introduction: Studying Professional Software Design**, IEEE Software, January 2011.[^foo50]*|

[^foo50]: [DOI: 10.1109/MS.2011.155 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.155)
 
 
{pagebreak}


  
* * *

| "**Software designers** make decisions covering a wide variety of aspects of the software to be designed through nested, intertwined processes. Some of these dependencies among design decisions might not be obvious, especially for people who didn't start with the project at the beginning of the design process. Extending or **altering an existing design decision** without fully understanding its dependencies might result in a deterioration of the quality of the software design. " |


* * *

|*Nobuto Matsubara, Kumiyo Nakakoji, Yoshinari Shirai, Yasuhiro Yamamoto, **Toward Unweaving Streams of Thought for Reflection in Professional Software Design**, IEEE Software, January 2011.[^foo51]*|

[^foo51]: [DOI: 10.1109/MS.2011.125 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.125)
 
 
{pagebreak}


  
* * *

| "**Collaboration** can enhance the output of **early-stage design**. When software designers or architects work together to define a problem and explore potential solutions, they find and address design problems earlier and arrive at more innovative and effective solutions than when they work alone. Nonetheless, collaboration can fail without **proper planning**." |


* * *

|*Ania Dilmaghani, Jim Dibble, **Strategies for Early-Stage Collaborative Design**, IEEE Software, January 2011.[^foo52]*|

[^foo52]: [DOI: 10.1109/MS.2011.124 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.124)
 
 
{pagebreak}


  
* * *

| "A central task in design is deciding what artifact will best satisfy the client's needs, whether that requires creating an artifact or choosing from existing alternatives. **A design space** identifies and **organizes the decisions** that must be made, together with the alternatives for those decisions, thereby **providing guidance** for creating artifacts or a framework for comparing them." |


* * *

|*Mary Shaw, **The Role of Design Spaces**, IEEE Software, January 2011.[^foo53]*|

[^foo53]: [DOI: 10.1109/MS.2011.121 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.121)
 
 
{pagebreak}


  
* * *

| "**Software design** is about **a sequence of steps** taken to achieve a goal. Designers must plan their approach to carrying out these steps. In studying designers at work, the authors observed **breadth- versus** **depth-first** approaches to design-space exploration and problem- versus solution-driven approaches during the actual design." |


* * *

|*Hans van Vliet, Antony Tang, **Design Strategy and Software Design Effectiveness**, IEEE Software, January 2011.[^foo54]*|

[^foo54]: [DOI: 10.1109/MS.2011.130 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.130)
 
 
{pagebreak}


  
* * *

| "**Architectural decisions** are design decisions that are **hard to make** or **costly to change**." |


* * *

|*Olaf Zimmermann, **Architectural Decisions as Reusable Design Assets**, IEEE Software, January 2011.[^foo55]*|

[^foo55]: [DOI: 10.1109/MS.2011.3 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.3)
 
 
{pagebreak}


  
* * *

| "**Usability** has a significant impact on the success of software-centric systems and products. It relates to the actual usage of a system, but also to its effective design and development. Ultimately, failing to **build usable software** may degrade a project's ability to deliver in time, budget, functionality, and quality." |


* * *

|*Frank Buschmann, **Unusable Software Is Useless, Part 1**, IEEE Software, January 2011.[^foo56]*|

[^foo56]: [DOI: 10.1109/MS.2011.19 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.19)
 
 
{pagebreak}






![](images-high-quality/2011-2.jpg)




{pagebreak}

  
* * *

| "The metaphor of '**technical debt**' is useful for reasoning about trading off software development activities: An exclusive focus on implementing functionality can lead to **code decay**. Since this deterioration of the system usually reflects a **lack of** activity spent on **refactoring**, **documentation**, and other aspects of the **project infrastructure**, it can be viewed as a kind of debt that the developers owe the system." |


* * *

|*Forrest Shull, **Perfectionists in a World of Finite Resources**, IEEE Software, March 2011.[^foo57]*|

[^foo57]: [DOI: 10.1109/MS.2011.38 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.38)
 
 
{pagebreak}


  
* * *

| "**Software protection** is increasingly becoming an important requirement for industrial software development, especially when building systems for **military defense**, **national infrastructure**, and **medical informatics**. Every software vendor should be **aware** of the **potential for attacks** against its products and the techniques available to mitigate these attacks. Employing **software protection techniques** can mean the difference between business survival and failure. " |


* * *

|*Christian Collberg, Mikhail Atallah, Mariusz Jakubowski, Paolo Falcarin, **Guest Editors' Introduction: Software Protection**, IEEE Software, March 2011.[^foo58]*|

[^foo58]: [DOI: 10.1109/MS.2011.34 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.34)
 
 
{pagebreak}


  
* * *

| "Platforms such as **Windows Azure** let applications conduct data-intensive cloud computing. **Unit testing** can help ensure high-quality development of such applications, but the results **depend on** test inputs and the cloud **environment's state**. Manually providing various test inputs and **cloud states** is laborious and time-consuming. However, automated test generation must **simulate** various **cloud states** to achieve effective testing." |


* * *

|*Jian Lu, Linghao Zhang, Tao Xie, Nikolai Tillmann, Xiaoxing Ma, Peli de Halleux, **Environmental Modeling for Automated Cloud Application Testing**, IEEE Software, March 2011.[^foo59]*|

[^foo59]: [DOI: 10.1109/MS.2011.158 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.158)
 
 
{pagebreak}


  
* * *

| "The large-scale, dynamic, and heterogeneous nature of cloud computing poses numerous security challenges. But the **cloud's** main challenge is to provide a **robust authorization mechanism** that incorporates **multitenancy** and **virtualization** aspects of resources." |


* * *

|*Walid G. Aref, Arif Ghafoor, Saleh Basalamah, Abdulrahman A. Almutairi, Muhammad I. Sarfraz, **A Distributed Access Control Architecture for Cloud Computing**, IEEE Software, March 2011.[^foo60]*|

[^foo60]: [DOI: 10.1109/MS.2011.153 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.153)
 
 
{pagebreak}


  
* * *

| "As applications and services migrate to the cloud, testing will follow the same trend. Therefore, organizations must understand the **dynamics of cloud-based testing**. ... cloud computing can make testing faster and enhance the delivery of testing services. Cloud computing also highlights important aspects of testing that require attention, such as **integration and interoperability**." |


* * *

|*Ossi Taipale, Kari Smolander, Leah Riungu-Kalliosaari, **Testing in the Cloud: Exploring the Practice**, IEEE Software, March 2011.[^foo61]*|

[^foo61]: [DOI: 10.1109/MS.2011.132 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.132)
 
 
{pagebreak}


  
* * *

| "An experimental approach employs the **Google App Engine** (GAE) for high-performance parallel computing. A generic **master-slave framework** enables fast prototyping and integration of parallel algorithms that are transparently scheduled and executed on the Google cloud infrastructure. Compared to **Amazon Elastic Compute Cloud** (EC2), GAE offers lower resource-provisioning overhead and is cheaper for jobs shorter than one hour." |


* * *

|*Radu Prodan, Simon Ostermann, Michael Sperk, **Evaluating High-Performance Computing on Google App Engine**, IEEE Software, March 2011.[^foo62]*|

[^foo62]: [DOI: 10.1109/MS.2011.131 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.131)
 
 
{pagebreak}






![](images-high-quality/2011-3.jpg)




{pagebreak}

  
* * *

| "**Keeping up to date** with new software engineering methods, practices, and tools is challenging in the best of times, and made even more urgent by today's tough economic climate. ... One way to save time is to take a look at **only the best content**. Because we don't always know ahead of time which that will be, people find these shortcuts useful: finding content from the **established thought leaders** in the field, rather than from unknown voices with unknown quality; and reading content where someone has already spent time **aggregating or summarizing** the best stuff from other raw materials." |


* * *

|*Forrest Shull, **How Do You Keep Up to Date?**, IEEE Software, May 2011.[^foo63]*|

[^foo63]: [DOI: 10.1109/MS.2011.57 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.57)
 
 
{pagebreak}


  
* * *

| "**Architecting** a software-intensive system encompasses **technical elements**, **social considerations**, and a **technical core**. Most interesting systems start small and focus on technical concerns, but once they grow to the point of **economic significance**, **social issues** begin to loom large." |


* * *

|*Grady Booch, **The Architect's Journey**, IEEE Software, May 2011.[^foo64]*|

[^foo64]: [DOI: 10.1109/MS.2011.66 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.66)
 
 
{pagebreak}


  
* * *

| "In the last decade, **software components** have been of an increased interest in software engineering community. The appealing concepts of **building systems from existing components** and reusing components, as well as the appearance of new technologies that enabled the separation of component development from system development, attracted researchers and industry to develop and apply principles of component-based software engineering." |


* * *

|*Ivica Crnkovic, Clemens Szyperski, Judith Stafford, **Software Components beyond Programming: From Routines to Services**, IEEE Software, May 2011.[^foo65]*|

[^foo65]: [DOI: 10.1109/MS.2011.62 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.62)
 
 
{pagebreak}


  
* * *

| "Scientists commonly describe their data-processing systems metaphorically as **software pipelines**. These pipelines input one or more data sources and apply steps to transform the data and create useful results. Although **conceptually simple**, pipelines often adopt **complex topologies** and must meet stringent **quality-of-service** requirements that stress the software infrastructure used to construct the pipeline." |


* * *

|*Yan Liu, Adam Wynne, Jian Yin, Ian Gorton, **Components in the Pipeline**, IEEE Software, May 2011.[^foo66]*|

[^foo66]: [DOI: 10.1109/MS.2011.23 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.23)
 
 
{pagebreak}






![](images-high-quality/2011-4.jpg)




{pagebreak}

  
* * *

| "**Software** plays an increasingly important role in **most aspects of business**. Many **new business models** for software-intensive enterprises have arisen in the last decade, ranging from selling software as a service to offshoring and crowdsourcing. Governments and **standards bodies** have also intervened to influence business models for stimulating growth in the industry. The software business has also had ancillary effects including the creation of new sectors such as **innovation management**. The management of **intellectual property rights** has become a more critical issue as software is embedded in more and more products." |


* * *

|*Shari Lawrence Pfleeger, John Favaro, **Guest Editors' Introduction: Software as a Business**, IEEE Software, July 2011.[^foo67]*|

[^foo67]: [DOI: 10.1109/MS.2011.77 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.77)
 
 
{pagebreak}


  
* * *

| "**Open innovation** and the recent emphasis on **client involvement** imply the emergence of **hybrid software licensing models** combining the limited openness of source code with traditional value appropriation logic. ... The central idea is that the vendor of commoditized products also **licenses source code to select clients**, who become participants in and subscribers to an ongoing closed development community." |


* * *

|*Mikko Riepula, **Sharing Source Code with Clients: A Hybrid Business and Development Model**, IEEE Software, July 2011.[^foo68]*|

[^foo68]: [DOI: 10.1109/MS.2011.53 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.53)
 
 
{pagebreak}


  
* * *

| "**Cloud computing** offers new ways for firms to operate in the **global market** so that even **small firms can compete** in markets traditionally dominated by multinational corporations. " |


* * *

|*Arto Ojala, Pasi Tyrväinen, **Developing Cloud Business Models: A Case Study on Cloud Gaming**, IEEE Software, July 2011.[^foo69]*|

[^foo69]: [DOI: 10.1109/MS.2011.51 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.51)
 
 
{pagebreak}


  
* * *

| "**Refactoring** is limited in what qualities it can help improve. It can also do **more harm than good** when practiced **informally** or ad hoc or when it's used as a **synonym** for **any form of change** in a system." |


* * *

|*Frank Buschmann, **Gardening Your Architecture, Part 1: Refactoring**, IEEE Software, July 2011.[^foo70]*|

[^foo70]: [DOI: 10.1109/MS.2011.76 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.76)
 
 
{pagebreak}






![](images-high-quality/2011-5.jpg)




{pagebreak}

  
* * *

| "**Security and privacy** are **interdependent** concepts. Each impacts the other, but to say that they are alternatives is a false dichotomy. Both are issues of **human concern**; their policies and their risks may be made manifest in software-intensive systems. Architecting a system that attends to the needs of security and privacy is possible and desirable, yet there are often unintended and **unexpected consequences** in so doing." |


* * *

|*Grady Booch, **Unintentional and Unbalanced Transparency**, IEEE Software, September 2011.[^foo71]*|

[^foo71]: [DOI: 10.1109/MS.2011.112 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.112)
 
 
{pagebreak}


  
* * *

| "Successful development of **video games** hinges on understanding the difficulties of ensuring the resulting product is **fun**. Addressing this **soft requirement**, incorporating nontrivial multimedia, and other domain-specific concerns bring novel challenges to software development. " |


* * *

|*Paul Kruszewski, Clark Verbrugge, **Guest Editors' Introduction: Engineering Fun**, IEEE Software, September 2011.[^foo72]*|

[^foo72]: [DOI: 10.1109/MS.2011.98 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.98)
 
 
{pagebreak}


  
* * *

| "Introducing reuse and **software product line** (SPL) concepts into digital **game-development processes** isn't a straightforward task. This work presents a systematic process for bridging SPLs to game development, culminating with **domain-specific languages** and generators streamlined for game subdomains." |


* * *

|*Geber L. Ramalho, Andre W.B. Furtado, Eduardo Santana de Almeida, Andre L.M. Santos, **Improving Digital Game Development with Software Product Lines**, IEEE Software, September 2011.[^foo73]*|

[^foo73]: [DOI: 10.1109/MS.2011.101 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.101)
 
 
{pagebreak}


  
* * *

| "The design of **massively multiplayer online games** (MMOGs) is challenging because scalability, consistency, reliability, and fairness must be achieved while providing good performance and enjoyable gameplay." |


* * *

|*J&#x00F6;rg Kienzle, Alexandre Denault, **Journey: A Massively Multiplayer Online Game Middleware**, IEEE Software, September 2011.[^foo74]*|

[^foo74]: [DOI: 10.1109/MS.2011.88 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.88)
 
 
{pagebreak}


  
* * *

| "**Games** must be **emergent**, constantly surprising players by the possibilities they offer. However, emergence **creates unpredictability**, preventing developers from verifying that their games won't lead to undesirable states. Worse still, even when **a bug** is found, finding out how it occurred can be a significant challenge." |


* * *

|*Chris Lewis, Jim Whitehead, **Repairing Games at Runtime or, How We Learned to Stop Worrying and Love Emergence**, IEEE Software, September 2011.[^foo75]*|

[^foo75]: [DOI: 10.1109/MS.2011.87 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.87)
 
 
{pagebreak}






![](images-high-quality/2011-6.jpg)




{pagebreak}

  
* * *

| "If you give a **hurricane meteorologist** a giant pile of data about a storm spinning in the middle of the Atlantic Ocean and ask her to **determine exactly** where it will come ashore, she can analyze the data, construct a detailed and accurate model of the atmospheric conditions and weather patterns, run some simulations, and come up with a forecast—**two months after** the storm hits. It'll probably be wrong, but not by much, a moot point for the people in the storm's path. The **problem isn't** with the **forecast's accuracy** but with **the time** needed to prepare it. On the other extreme, if given a satellite image and a few points of other data—and a few minutes—a hurricane meteorologist can prepare a forecast so uncertain it might as well not even exist. There is a point where forecast **accuracy and timeliness overlap**. The model favored by hurricane meteorologists is to **do just enough** data acquisition and analysis to **be reasonably certain** what the storm will do and then **start telling people** to get ready." |


* * *

|*Eric Richardson, **What an Agile Architect Can Learn from a Hurricane Meteorologist**, IEEE Software, November 2011.[^foo76]*|

[^foo76]: [DOI: 10.1109/MS.2011.152 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.152)
 
 
{pagebreak}


  
* * *

| "Software systems must **continually evolve** to meet ever changing needs. However, such systems often become **legacy systems** as a consequence of **uncontrolled maintenance** combined with **obsolete technology**. To control maintenance costs and preserve complex embedded business rules, companies must **evolve their legacy systems**." |


* * *

|*Mario Piattini, Ignacio Garc&#x00ED;a-Rodriguez de Guzm&#x00E1;n, Christof Ebert, Ricardo P&#x00E9;rez-Castillo, **Reengineering Technologies**, IEEE Software, November 2011.[^foo77]*|

[^foo77]: [DOI: 10.1109/MS.2011.145 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.145)
 
 
{pagebreak}


  
* * *

| "There is complexity, and then there is organized complexity. **Pure complexity** is **chaotic**; **organized complexity** is full of **patterns**. Naming these **patterns** and respecting their intention is the essence of architecture." |


* * *

|*Grady Booch, **The Architecture of Small Things**, IEEE Software, November 2011.[^foo78]*|

[^foo78]: [DOI: 10.1109/MS.2011.148 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.148)
 
 
{pagebreak}


  
* * *

| "**Climate change** is likely to be one of the defining global issues of the 21st century. The past decade - the hottest in recorded history - has witnessed countries around the world struggling to deal with drought, heat waves, and extreme weather. The sheer **scale of the problem** also makes it hard to understand, predict, and solve. **Climate science** journals regularly publish special issues on specific climate models, typically timed to present results from a major new release of a given model. However, these tend to focus on the **new science** that the model enables, rather than to describe the **software** and its development." |


* * *

|*Steve M. Easterbrook, Venkatramani Balaji, Reinhard Budich, Paul N. Edwards, **Guest Editors' Introduction: Climate Change - Science and Software**, IEEE Software, November 2011.[^foo79]*|

[^foo79]: [DOI: 10.1109/MS.2011.141 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.141)
 
 
{pagebreak}


  
* * *

| "The **Clear Climate Code** project rewrote GISTEMP, a legacy software system used to produce an important global surface temperature dataset. The **focus** of the project is **on clarity**: making the source code as clear as possible to interested people, to **improve public understanding**." |


* * *

|*David Jones, Nicholas Barnes, **Clear Climate Code: Rewriting Legacy Science Software for Clarity**, IEEE Software, November 2011.[^foo80]*|

[^foo80]: [DOI: 10.1109/MS.2011.113 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.113)
 
 
{pagebreak}


  
* * *

| "**Coupled climate models** exhibit scientific, numerical, and architectural **variability.** This variability introduces requirements that give rise to **complexity**." |


* * *

|*Spencer Rugaber, Sameer Ansari, Leo Mark, Rocky Dunlap, **Managing Software Complexity and Variability in Coupled Climate Models**, IEEE Software, November 2011.[^foo81]*|

[^foo81]: [DOI: 10.1109/MS.2011.114 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.114)
 
 
{pagebreak}


  
* * *

| "**Models** play a central role for **climate change policy-makers**, but they're often so **complex and computationally demanding** that experts must run them and interpret their results. This reduces stakeholders' ability to **explore alternative scenarios**, increases perceptions of model complexity and opacity, and can ultimately reduce public confidence ." |


* * *

|*Joshua Introne, Robert Laubacher, Thomas Malone, **Enabling Open Development Methodologies in Climate Change Assessment Modeling**, IEEE Software, November 2011.[^foo82]*|

[^foo82]: [DOI: 10.1109/MS.2011.115 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.115)
 
 
{pagebreak}


  
* * *

| "**Lateness** is the **most common** form of software project **failure**." |


* * *

|*Tom DeMarco, **All Late Projects Are the Same**, IEEE Software, November 2011.[^foo83]*|

[^foo83]: [DOI: 10.1109/MS.2011.134 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.134)
 
 
{pagebreak}


# 2012
{pagebreak}






![](images-high-quality/2012-1.jpg)




{pagebreak}

  
* * *

| "In **model-based testing** (MBT), manually selected algorithms automatically and systematically **generate test cases** from a set of models of the system under test or its environment. Whereas test automation replaces manual test execution with automated test scripts, MBT replaces manual test designs with automated test designs and test generation. " |


* * *

|*Ina Schieferdecker, **Model-Based Testing**, IEEE Software, January 2012.[^foo84]*|

[^foo84]: [DOI: 10.1109/MS.2012.13 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.13)
 
 
{pagebreak}


  
* * *

| "**Architecture mastery** is more than professional expertise in modern software engineering methods and techniques. It is mainly in how architects approach design. Particularly, the '**things between things**' require the architect's full attention: domain concepts hidden between the lines of code; interactions and interfaces residing between components; and even choices between design options. This is the **architect's territory**, and successful architecture **uncovers the things 'in-between'** as early as possible, make them explicit, and decide about them!" |


* * *

|*Frank Buschmann, **To Boldly Go Where No One Has Gone Before**, IEEE Software, January 2012.[^foo85]*|

[^foo85]: [DOI: 10.1109/MS.2012.18 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.18)
 
 
{pagebreak}


  
* * *

| "Enormous advances in computing power and programming environments have obscured the **importance of algorithms**, one of the **foundational pillars** of software engineering. Today, even university curricula too often pay only lip service to the teaching of algorithmic fundamentals, reinforcing the popular belief that their place at the core of a software engineer's **education is past**. Yet even today, the importance of algorithms in software engineering has not diminished, and the effects of neglect are evident everywhere in needlessly **inefficient industrial applications**." |


* * *

|*Giuseppe Prencipe, John Favaro, Cesare Zavattari, Alessandro Tommasi, **Guest Editors' Introduction: Algorithms and Today's Practitioner**, IEEE Software, January 2012.[^foo86]*|

[^foo86]: [DOI: 10.1109/MS.2012.9 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.9)
 
 
{pagebreak}


  
* * *

| "Formally speaking, **mastering complexity** requires a proof of the asymptotic computation, storage, and communication needs of a system. While we don't always do formal specifications and proofs of the properties of our algorithms, the underlying **behavior of the algorithms** factors into our **capacity modeling**—and therefore our capital and operational expense planning—in a fundamental way." |


* * *

|*John Favaro, **Excellence in Search: An Interview with David Chaiken**, IEEE Software, January 2012.[^foo87]*|

[^foo87]: [DOI: 10.1109/MS.2012.7 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.7)
 
 
{pagebreak}


  
* * *

| "**Conway's law**, also called the **mirroring hypothesis**, predicts that a development **organization** will inevitably design **systems** that **mirror** its **organizational communication** structure." |


* * *

|*Marcelo Cataldo, Irwin Kwan, Daniela Damian, **Conway's Law Revisited: The Evidence for a Task-Based Perspective**, IEEE Software, January 2012.[^foo88]*|

[^foo88]: [DOI: 10.1109/MS.2012.3 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.3)
 
 
{pagebreak}






![](images-high-quality/2012-2.jpg)




{pagebreak}

  
* * *

| "The increasing pervasiveness of **cloud computing** is changing the state of the practice in software testing. ... interview with **James Whittaker** ... covers key technology changes, such as more pervasive access to **monitoring frameworks**, the ability to **aggregate and act on feedback** directly from massive user communities (the '**crowdsourcing**' of quality assurance), and the ability to know the **exact machine configuration** when **bugs** are discovered." |


* * *

|*Forrest Shull, **A Brave New World of Testing? An Interview with Google's James Whittaker**, IEEE Software, March 2012.[^foo89]*|

[^foo89]: [DOI: 10.1109/MS.2012.23 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.23)
 
 
{pagebreak}


  
* * *

| "There comes **a point of no return** in the life of every successful software-intensive system, a point where you can no longer place a pile of your best developers at one end of a lever and expect them to move the world. Rather, you must come to realize that **putting piles of developers** at the end of even the longest lever is no longer the right tool to use. Crossing that point while still preserving the values and the **tribal memory** of your organization's development culture requires some serious adult supervision." |


* * *

|*Grady Booch, **Facing Future**, IEEE Software, March 2012.[^foo90]*|

[^foo90]: [DOI: 10.1109/MS.2012.29 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.29)
 
 
{pagebreak}


  
* * *

| "**Cloud computing** is a new paradigm for software systems where applications are divided into sets of **composite services** hosted on leased, **highly distributed platforms**. There are many new software engineering challenges in building effective cloud-based software applications." |


* * *

|*Jacky Keung, Gerald Kaefer, Anna Liu, John Grundy, **Guest Editors' Introduction: Software Engineering for the Cloud**, IEEE Software, March 2012.[^foo91]*|

[^foo91]: [DOI: 10.1109/MS.2012.31 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.31)
 
 
{pagebreak}


  
* * *

| "There is broad consensus that **architects should code**. Yet the challenging question is: how can architects program without being lost in myriads of local code details? ... **Agile practices** help architects to balance their coding activities with other duties, allowing them to be in control of the amount of time they spend on programming and the concerns and system parts on which they program." |


* * *

|*Frank Buschmann, J&#x00F6;rg Bartholdt, **Code Matters!**, IEEE Software, March 2012.[^foo92]*|

[^foo92]: [DOI: 10.1109/MS.2012.27 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.27)
 
 
{pagebreak}


  
* * *

| "A **package management system** organizes and simplifies the installation and maintenance of software by standardizing and organizing the production and consumption of software collections. As a software developer, you can benefit from package managers in two ways: through a rich and stable development environment and through **friction-free reuse**. Promisingly, the structure that package managers bring both to the tools we use in our development process and the libraries we reuse in our products ties nicely with the recent move emphasizing **DevOps** (development operations) as an integration between software development and IT operations." |


* * *

|*Diomidis Spinellis, **Package Management Systems**, IEEE Software, March 2012.[^foo93]*|

[^foo93]: [DOI: 10.1109/MS.2012.38 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.38)
 
 
{pagebreak}


  
* * *

| "Almost everyone agrees that there is **a gender gap** in computer science, where there are far too few females participating in the field. But does that gap occur in the whole of the field of computing? This sounding board explores the notion that the gap is **unique to CS**, and that any solution to the problem must occur within that field and not the broader field of computing." |


* * *

|*Robert L. Glass, **The Gender Gap: Is It a Computing Problem or Simply a Computer Science Problem?**, IEEE Software, March 2012.[^foo94]*|

[^foo94]: [DOI: 10.1109/MS.2012.44 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.44)
 
 
{pagebreak}






![](images-high-quality/2012-3.jpg)




{pagebreak}

  
* * *

| "Even the fanciest videoconferencing or 3G holography can't overcome **the fundamental time-zone problem** — that it's sleep time on the other side of the world. Consequently, no miracle technology will overcome time-zone differences." |


* * *

|*Christof Ebert, Rafael Prikladnicki, Sabrina Marczak, Erran Carmel, **Technologies to Support Collaboration across Time Zones**, IEEE Software, May 2012.[^foo95]*|

[^foo95]: [DOI: 10.1109/MS.2012.68 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.68)
 
 
{pagebreak}


  
* * *

| "Typically, organizations face conflicting objectives, with **compliance policies** possibly **hindering innovation**, slowing down the product development process, or making the whole process **most costly**. The goal of software engineering for compliance is to bridge **the gap** between the **software engineering community** and the **compliance community**." |


* * *

|*Ayse Bener, Uwe Zdun, Erlinda L. Olalia-Carin, **Guest Editors' Introduction: Software Engineering for Compliance**, IEEE Software, May 2012.[^foo96]*|

[^foo96]: [DOI: 10.1109/MS.2012.63 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.63)
 
 
{pagebreak}


  
* * *

| "**Ensuring compliance** to laws, regulations, and standards in a **constantly changing** business environment is a major challenge for companies. So, organizations have an increasing need for **systematic approaches** to manage compliance throughout the business process (BP) life cycle." |


* * *

|*Michael P. Papazoglou, Amal Elgammal, Willem-Jan van den Heuvel, Oktay Turetken, **Capturing Compliance Requirements: A Pattern-Based Approach**, IEEE Software, May 2012.[^foo97]*|

[^foo97]: [DOI: 10.1109/MS.2012.45 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.45)
 
 
{pagebreak}


  
* * *

| "The changing **global business environment** and continued introduction of new technologies are significantly affecting organizations' privacy practices. In this environment, **privacy-enhancing technology (PET)** often becomes a key to protecting personal information." |


* * *

|*David Pelkola, **A Framework for Managing Privacy-Enhancing Technology**, IEEE Software, May 2012.[^foo98]*|

[^foo98]: [DOI: 10.1109/MS.2012.47 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.47)
 
 
{pagebreak}


  
* * *

| "**Leadership** is the key for architects to balance all their activities and duties with the interests of different **stakeholders** without losing control of the architecture under development. They must have a **clear vision** and strict focus on key aspects of success. All their activities should be **goal-driven** and in direct cooperation and interaction with the relevant stakeholder groups." |


* * *

|*Frank Buschmann, **A Week in the Life of an Architect**, IEEE Software, May 2012.[^foo99]*|

[^foo99]: [DOI: 10.1109/MS.2012.55 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.55)
 
 
{pagebreak}


  
* * *

| "**Git** is a distributed revision control system available on all mainstream development platforms through a free software license. An important difference of git over its older ancestors is that it elevates the **software's revisions** to **first-class citizens**. " |


* * *

|*Diomidis Spinellis, **Git**, IEEE Software, May 2012.[^foo100]*|

[^foo100]: [DOI: 10.1109/MS.2012.61 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.61)
 
 
{pagebreak}






![](images-high-quality/2012-4.jpg)




{pagebreak}

  
* * *

| "**Smart mobile devices** have had a **huge impact** on the world today with new apps being produced at a prodigious rate. How we got to this point has a lot to do with the **ease of use** that manufacturers and app developers have achieved, which includes aspects such as **quick response time**, **intuitive interfaces**, and well-designed functionality." |


* * *

|*Forrest Shull, **Designing a World at Your Fingertips: A Look at Mobile User Interfaces**, IEEE Software, July 2012.[^foo101]*|

[^foo101]: [DOI: 10.1109/MS.2012.81 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.81)
 
 
{pagebreak}


  
* * *

| "**Computing has transformed humanity** in ways that we have only begun to metabolize. Computing amplifies what we celebrate most about being human, but it also has the capacity to magnify that which we mourn. **Exploring the story of computing** has value, for an **educated populace** is far more able to reconcile its past, reason about its present, and be intentional about its future." |


* * *

|*Grady Booch, **The Human Experience**, IEEE Software, July 2012.[^foo102]*|

[^foo102]: [DOI: 10.1109/MS.2012.103 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.103)
 
 
{pagebreak}


  
* * *

| "**Smartphones** aren't very 'smart' without the **software apps** that give them their usability and versatility. Apps, like all software, need some degree of guidance, regulation, and measurement to ensure a user is receiving proper functionality and quality of service." |


* * *

|*Jeffrey Voas, J. Bret Michael, Michiel van Genuchten, **The Mobile Software App Takeover**, IEEE Software, July 2012.[^foo103]*|

[^foo103]: [DOI: 10.1109/MS.2012.104 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.104)
 
 
{pagebreak}


  
* * *

| "**Mobile devices** have become a commodity: we use several devices for various purposes. Although we carry only some of our devices with us, we still want to access content originating from any device. To overcome this issue, device users often upload content into a hosting service available in the cloud. However, **cloud-based** hosting can **alienate the control** and ownership of the content." |


* * *

|*Niko M&amp;#x00E4;kitalo, Varvara Myll&amp;#x00E4;rniemi, Tommi Mikkonen, Mikko Raatikainen, Tomi M&amp;#x00E4;nnist&amp;#x00F6;, Juha Savolainen, **Mobile Content as a Service A Blueprint for a Vendor-Neutral Cloud of Mobile Devices**, IEEE Software, July 2012.[^foo104]*|

[^foo104]: [DOI: 10.1109/MS.2012.54 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.54)
 
 
{pagebreak}


  
* * *

| "**Service-oriented architecture (SOA)** has gained significant attention as a means of developing flexible and modular systems. .. not all stated benefits are realised due to, among other things, a failure of service-oriented **thinking at an organisational level**, problems allocating **financial responsibility** for services within and between organisations, and a lack of **mature tool chains**." |


* * *

|*Fethi A. Rabhi, Haresh Luthria, **Service-Oriented Architectures: Myth or Reality?**, IEEE Software, July 2012.[^foo105]*|

[^foo105]: [DOI: 10.1109/MS.2011.156 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.156)
 
 
{pagebreak}


  
* * *

| "**Codification** and **testing of business rules** in application programs has historically been a challenge in software engineering. Many organizations have adopted the business rules approach to formalize and compartmentalize business rules as a separate component from application code." |


* * *

|*Euntae T. Lee, Chen Zhang, Thomas O. Meservy, Jasbir Dhaliwal, **The Business Rules Approach and Its Effect on Software Testing**, IEEE Software, July 2012.[^foo106]*|

[^foo106]: [DOI: 10.1109/MS.2011.120 ](http://doi.ieeecomputersociety.org/10.1109/MS.2011.120)
 
 
{pagebreak}






![](images-high-quality/2012-5.jpg)




{pagebreak}

  
* * *

| "A close look at the **evidence** underpinning the original concept of **lean production** and its popular interpretation reveals the inherent challenges of measuring and interpreting evidence for performance differences." |


* * *

|*Helen Sharp, Tore Dyb&amp;#x00E5;, **What's the Evidence for Lean?**, IEEE Software, September 2012.[^foo107]*|

[^foo107]: [DOI: 10.1109/MS.2012.126 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.126)
 
 
{pagebreak}


  
* * *

| "Although some claim that **principles from other fields** can't apply to a creative and design-oriented discipline such as software development, many studies have proven **the simple wisdom** that we all benefit from **empowered and motivated teams**, we build our products faster and with better quality if **market strategy is understood** and **requirements changes managed**, we **learn from previous defects**, we can emphasize **repeatable processes**, and we should build from high-quality components. The software industry is now poised to transform to **customer-centric development**, which translates into both reducing the total life-cycle cost and increasing efficiency and effectiveness by **eliminating waste** and **adding value**." |


* * *

|*Pekka Abrahamsson, Christof Ebert, Nilay Oza, **Lean Software Development**, IEEE Software, September 2012.[^foo108]*|

[^foo108]: [DOI: 10.1109/MS.2012.116 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.116)
 
 
{pagebreak}


  
* * *

| "The term '**lean**' ... describes any efficient management practice that **minimized waste**, including in product development ... In lean terms, '**waste**' is anything that doesn't either **add customer value directly** or **add knowledge** about how to deliver that value more effectively." |


* * *

|*Mary Poppendieck, Michael A. Cusumano, **Lean Software Development: A Tutorial**, IEEE Software, September 2012.[^foo109]*|

[^foo109]: [DOI: 10.1109/MS.2012.107 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.107)
 
 
{pagebreak}


  
* * *

| "**Lean practices** use the principle of **Little's law** to improve the flow of value to the end user by eliminating sources of waste from a software development process. **Little's law** defines throughput as a ratio of **work in process** and **cycle time**. Increasing throughput (or productivity) requires continuously improving (that is, decreasing) cycle time while ensuring that the work-in-process limit doesn't exceed the capacity available to process the work." |


* * *

|*Robert L. Nord, Ipek Ozkaya, Raghvinder S. Sangwan, **Making Architecture Visible to Improve Flow Management in Lean Software Development**, IEEE Software, September 2012.[^foo110]*|

[^foo110]: [DOI: 10.1109/MS.2012.109 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.109)
 
 
{pagebreak}


  
* * *

| "Modern **virtualization technology** allows us to run operating systems in a virtual machine that can be hosted on facilities ranging from our laptop to a datacenter in the cloud. It's thus possible to create **a virtualized development environment** that contains all the tools, applications, and libraries that a programmer requires. This speeds up developer setup time, brings economies of scale, introduces parity between development and production environments, allows the use of platform-specific tools, and simplifies embedded-system development. Using VMs, testers can ensure a **pristine environment** and access to diverse (virtual) platforms. Deployment is also simplified by packaging all the system's components and setup into a **VM appliance**. Finally, on the operations side, VMs make it easier for a system to support application **provisioning**, **maintenance windows**, **high availability**, and **disaster recovery**." |


* * *

|*Diomidis Spinellis, **Virtualize Me**, IEEE Software, September 2012.[^foo111]*|

[^foo111]: [DOI: 10.1109/MS.2012.125 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.125)
 
 
{pagebreak}






![](images-high-quality/2012-6.jpg)




{pagebreak}

  
* * *

| "**Computing** was once a companion to conflict; computing is now an instrument of war; computing is becoming a **theater of war**. Along the way, conflict has shaped computing, and computing has changed the nature of warfare." |


* * *

|*Grady Booch, **Woven on the Loom of Sorrow**, IEEE Software, November 2012.[^foo112]*|

[^foo112]: [DOI: 10.1109/MS.2012.168 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.168)
 
 
{pagebreak}


  
* * *

| "The metaphor of **technical debt** in software development was introduced two decades ago to explain to **nontechnical stakeholders** the need for what we call now '**refactoring**.'" |


* * *

|*Ipek Ozkaya, Robert L. Nord, Philippe Kruchten, **Technical Debt: From Metaphor to Theory and Practice**, IEEE Software, November 2012.[^foo113]*|

[^foo113]: [DOI: 10.1109/MS.2012.167 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.167)
 
 
{pagebreak}


  
* * *

| "**Agile teams** create **business value** by responding to changing business environments and delivering working software at regular intervals. While doing so, they make **design tradeoffs** to satisfy business needs such as meeting a release schedule. **Technical debt** is the result of such decisions or tradeoffs. When this happens, agile teams must pay off the **accumulated debt** by improving designs during subsequent iterations in order to improve maintainability." |


* * *

|*Raja Bavani, **Distributed Agile, Agile Testing, and Technical Debt**, IEEE Software, November 2012.[^foo114]*|

[^foo114]: [DOI: 10.1109/MS.2012.155 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.155)
 
 
{pagebreak}


  
* * *

| "**Technical debt** is more than a metaphor: applying **finance and accounting practices** typical of other business obligations to technical debt can, in addition to meeting ethical and legal governance requirements, generate real, sustained financial benefits." |


* * *

|*Patrick Conroy, **Technical Debt: Where Are the Shareholders' Interests?**, IEEE Software, November 2012.[^foo115]*|

[^foo115]: [DOI: 10.1109/MS.2012.166 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.166)
 
 
{pagebreak}


# 2013
{pagebreak}






![](images-high-quality/2013-1.jpg)




{pagebreak}

  
* * *

| "Computing is transforming every aspect of the human experience. As creators of this technology, what obligations do we have to the **general public**, for whom we make the **complex machinery** of computing increasingly invisible? ... it's important for the general public to know something about the **technology behind the curtain** of computing." |


* * *

|*Grady Booch, **The Great and Terrible Oz**, IEEE Software, January 2013.[^foo116]*|

[^foo116]: [DOI: 10.1109/MS.2013.16 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.16)
 
 
{pagebreak}


  
* * *

| "Most people think of **requirements** as things to manipulate at the **start of a project**. Others, more enlightened, recognize that requirements also have a role toward the end of projects to **test compliance**. But few people have recognized an active role for requirements during their **system's use** - to **monitor** whether the system continues to **comply with its requirements** during its lifetime." |


* * *

|*Neil Maiden, **Monitoring Our Requirements**, IEEE Software, January 2013.[^foo117]*|

[^foo117]: [DOI: 10.1109/MS.2013.10 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.10)
 
 
{pagebreak}


  
* * *

| "'**Innovation**' and '**innovative architecture**' are topics of broad popularity in software engineering. Yet, the two terms appear to mean different things to different people - with interpretations of both driven more by **personal interests** than by their **true meanings**. It's therefore essential for architects to have a clear understanding of what 'innovation' means in the context of their projects if they are to make the **right design decisions** and communicate the **intended messages** to project stakeholders." |


* * *

|*Frank Buschmann, **Innovation Reconsidered**, IEEE Software, January 2013.[^foo118]*|

[^foo118]: [DOI: 10.1109/MS.2013.9 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.9)
 
 
{pagebreak}


  
* * *

| "Over the past decade, the advent of **social networking** has fundamentally altered the landscape of how software is used, designed, and developed. It has expanded how **communities of software stakeholders** communicate, **collaborate**, **learn** from, and **coordinate** with one another." |


* * *

|*Andrew Begel, Jan Bosch, Margaret-Anne Storey, **Bridging Software Communities through Social Networking**, IEEE Software, January 2013.[^foo119]*|

[^foo119]: [DOI: 10.1109/MS.2013.3 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.3)
 
 
{pagebreak}


  
* * *

| "**Software development** is increasingly carried out by **developer communities** in a **global setting**. One way to prepare for development success is to uncover and **harmonize** these **communities** to exploit their collective, collaborative potential." |


* * *

|*Hans van Vliet, Patricia Lago, Damian A. Tamburri, **Uncovering Latent Social Communities in Software Development**, IEEE Software, January 2013.[^foo120]*|

[^foo120]: [DOI: 10.1109/MS.2012.170 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.170)
 
 
{pagebreak}


  
* * *

| "A new generation of **development environments** takes a radical approach to communication and coordination by **fusing social networking** functionality with flexible, **distributed version control**. Through these transparent work environments, people, repositories, development activities, and their histories are immediately and easily visible to all users .... **transparency** helps developers on **GitHub** manage their projects, handle dependencies more effectively, reduce communication needs, and figure out what requires their attention." |


* * *

|*James Herbsleb, Jason Tsay, Colleen Stuart, Laura Dabbish, **Leveraging Transparency**, IEEE Software, January 2013.[^foo121]*|

[^foo121]: [DOI: 10.1109/MS.2012.172 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.172)
 
 
{pagebreak}


  
* * *

| "The **Social Web** provides comprehensive and publicly available **information about software developers**, identifying them as **contributors** to open source projects, **experts** at maintaining ties on social network sites, or **active participants** on knowledge-sharing sites. These **signals**, when aggregated and summarized, could be used to define potential **candidates' individual profiles**: potential employers could qualitatively evaluate job seekers, even those lacking a formal degree or changing their career path, by assessing candidates' online contributions." |


* * *

|*Andrea Capiluppi, Alexander Serebrenik, Leif Singer, **Assessing Technical Candidates on the Social Web**, IEEE Software, January 2013.[^foo122]*|

[^foo122]: [DOI: 10.1109/MS.2012.169 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.169)
 
 
{pagebreak}


  
* * *

| "Many successful software companies use **social networking** as a way to **improve the services** or products they provide. ... semistructured interviews with leaders from four successful companies: **Brian Doll**, an engineer who manages GitHub's marketing; **Doug Laundry**, a principal group program manager at Microsoft; **David Fullerton**, vice president of engineering at Stack Exchange; and **Robert Hughes**, the president and chief operating officer of TopCoder." |


* * *

|*Andrew Begel, Jan Bosch, Margaret-Anne Storey, **Social Networking Meets Software Development: Perspectives from GitHub, MSDN, Stack Exchange, and TopCoder**, IEEE Software, January 2013.[^foo123]*|

[^foo123]: [DOI: 10.1109/MS.2013.13 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.13)
 
 
{pagebreak}


  
* * *

| "**Mutation testing** improves a system's bug-detection capability. It also helps improve coverage by exposing software or code areas that other types of testing might not expose." |


* * *

|*Izzat Mahmoud Alsmadi, **Using Mutation to Enhance GUI Testing Coverage**, IEEE Software, January 2013.[^foo124]*|

[^foo124]: [DOI: 10.1109/MS.2012.22 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.22)
 
 
{pagebreak}


  
* * *

| "**What works** for **whom**, **where**, **when**, and **why** is the ultimate question of **evidence-based software engineering**. Still, the empirical research seems mostly concerned with identifying **universal relationships** that are independent of how work settings and other contexts interact with the processes important to software practice. Questions of '**What is best?**' seem to prevail. For example, 'Which is better: pair or solo programming? test-first or test-last?' However, just as the question of **whether a helicopter is better than a bicycle** is meaningless, so are these questions because the answers depend on the settings and goals of the projects studied." |


* * *

|*Tore Dyba, **Contextualizing empirical evidence**, IEEE Software, January 2013.[^foo125]*|

[^foo125]: [DOI: 10.1109/MS.2013.4 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.4)
 
 
{pagebreak}


  
* * *

| "**Testing** is a **destructive task** in which the goal is to find relevant defects as early as possible. It **requires automation** to reduce cost and ensure high regression, thus delivering determined quality. ... In practice, **XUnit** frameworks are the most used technology to automate tests. In such frameworks, test cases are written in an **executable language** and can be executed automatically. They also provide specific operations to implement the **test case oracles**." |


* * *

|*Macario Polo, Pedro Reales, Mario Piattini, Christof Ebert, **Test Automation**, IEEE Software, January 2013.[^foo126]*|

[^foo126]: [DOI: 10.1109/MS.2013.15 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.15)
 
 
{pagebreak}






![](images-high-quality/2013-2.jpg)




{pagebreak}

  
* * *

| "The subject of the **computability of the mind** introduces complex philosophical, ethical, and technical issues. That aside, this topic draws us in to the **nature of algorithms**. We are **surrounded by algorithms**; much of the history of computing is also the history of the advance of algorithms. For the public, algorithms are part of **computing's self-made mystery**, but to understand their nature is an important part of computational thinking." |


* * *

|*Grady Booch, **From Minecraft to Minds**, IEEE Software, March 2013.[^foo127]*|

[^foo127]: [DOI: 10.1109/MS.2013.28 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.28)
 
 
{pagebreak}


  
* * *

| "**Requirements work** is really about **problem solving**. Its primary function is to locate and scope problems, then create and describe solutions for them." |


* * *

|*Neil Maiden, **So, What Is Requirements Work?**, IEEE Software, March 2013.[^foo128]*|

[^foo128]: [DOI: 10.1109/MS.2013.35 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.35)
 
 
{pagebreak}


  
* * *

| "**Quality concerns**, often referred to as **nonfunctional requirements**, **service-level agreements**, **quality attributes**, **performance constraints**, or **architecturally significant requirements**, describe system-level attributes such as **security**, **performance**, **reliability**, and **maintainability**. In conjunction with functional requirements, these quality concerns drive and constrain a **system's architectural design** and often introduce significant **trade-offs** that must be carefully considered and balanced. The dependencies that exist between requirements and architecture have been referred to as the **twin peaks** of requirements and architecture." |


* * *

|*Jane Cleland-Huang, Robert S. Hanmer, Sam Supakkul, Mehdi Mirakhorli, **The Twin Peaks of Requirements and Architecture**, IEEE Software, March 2013.[^foo129]*|

[^foo129]: [DOI: 10.1109/MS.2013.39 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.39)
 
 
{pagebreak}


  
* * *

| "The most useful forms of **documentation** are **views of the software** that can be **automatically generated**." |


* * *

|*Mehdi Mirakhorli, Jane Cleland-Huang, **Traversing the Twin Peaks**, IEEE Software, March 2013.[^foo130]*|

[^foo130]: [DOI: 10.1109/MS.2013.40 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.40)
 
 
{pagebreak}


  
* * *

| "In the past decade, researchers have devised many methods to support and **codify architecture design**. However, what hampers such methods' adoption is that these methods employ abstract concepts such as **views**, **tactics**, and **patterns**, whereas practicing software architects choose technical design primitives from the services offered in **commercial frameworks**. ... systematically links both **top-down concepts**, such as **patterns** and **tactics**, and **implementation artifacts**, such as frameworks, which are bottom-up concepts." |


* * *

|*Rick Kazman, Perla Velasco-Elizondo, Humberto Cervantes, **A Principled Way to Use Frameworks in Architecture Design**, IEEE Software, March 2013.[^foo131]*|

[^foo131]: [DOI: 10.1109/MS.2012.175 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.175)
 
 
{pagebreak}


  
* * *

| "Systems are naturally constructed in **hierarchies**, in which **design choices** made at higher levels of abstraction levy requirements on system components at the lower levels. Thus, whether an aspect of a system is a **design choice** or **a requirement** largely depends on your **vantage poin**t within the system components' hierarchy. " |


* * *

|*Sanjai Rayadurgam, Mats P.E. Heimdahl, Anitha Murugesan, Darren Cofer, Andrew Gacek, Michael W. Whalen, **Your &#x0022;What&#x0022; Is My &#x0022;How&#x0022;: Iteration and Hierarchy in System Design**, IEEE Software, March 2013.[^foo132]*|

[^foo132]: [DOI: 10.1109/MS.2012.173 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.173)
 
 
{pagebreak}


  
* * *

| "Software architects often must work with **incomplete or ill-specified** **non-functional requirements** (NFRs) and use them to make decisions. Through this process, existing NFRs are **refined or modified** and new ones emerge. ... The survey revealed that architects usually elicit NFRs themselves in an iterative process; they usually **don't document** the NFRs and only **partially validate** them." |


* * *

|*Claudia Ayala, David Ameller, Jordi Cabot, Xavier Franch, **Non-functional Requirements in Architectural Decision Making**, IEEE Software, March 2013.[^foo133]*|

[^foo133]: [DOI: 10.1109/MS.2012.176 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.176)
 
 
{pagebreak}


  
* * *

| "There's clearly **no single magic tool** or technique that can be used to secure the reliability of any large and complex software application; rather, it takes good tools, workmanship, and a carefully managed process. The three main control points in this process are **prevention**, **detection**, and **containment**." |


* * *

|*Gerard J. Holzmann, **Landing a Spacecraft on Mars**, IEEE Software, March 2013.[^foo134]*|

[^foo134]: [DOI: 10.1109/MS.2013.32 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.32)
 
 
{pagebreak}


  
* * *

| "Software development teams no longer live - or want to live - in a world of **command and control**. They want to be **self-organizing** and have adaptive, supportive, and **collaborative leadership** guiding them. This new age of management requires managers to build a **culture of trust**, encourage **participation** of their teams in decision making, and **sponsor innovation**. Simply put, managers need to do away with the traditional (micro) management and **share power** with self-organizing teams." |


* * *

|*Rashina Hoda, **Power to the People**, IEEE Software, March 2013.[^foo135]*|

[^foo135]: [DOI: 10.1109/MS.2013.34 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.34)
 
 
{pagebreak}






![](images-high-quality/2013-3.jpg)




{pagebreak}

  
* * *

| "On the one hand, we seek to build software-intensive systems that are **innovative**, **elegant**, and **supremely useful**. On the other hand, computing technology as a thing unto itself is not the place of enduring value, and therefore, as computing fills the spaces of our world, it becomes **boring**. And that's a very good and desirable thing." |


* * *

|*Grady Booch, **In Defense of Boring**, IEEE Software, May 2013.[^foo136]*|

[^foo136]: [DOI: 10.1109/MS.2013.54 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.54)
 
 
{pagebreak}


  
* * *

| "**Agent orientation** is moving from its origins in computer science into applied **automation systems engineering**. The main benefit of using software agents in industrial automation is the combined application of agent-oriented software engineering with growing fields such as **semantic technologies**. Software agents also provide **flexibility**, which is often the key requirement for creating software system architectures that can **evolve at runtime**." |


* * *

|*Stephan Pech, **Software Agents in Industrial Automation Systems**, IEEE Software, May 2013.[^foo137]*|

[^foo137]: [DOI: 10.1109/MS.2013.57 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.57)
 
 
{pagebreak}


  
* * *

| "We live in a world in which our **safety depends** on **software-intensive systems**. This is the case for the **aeronautic**, **automotive**, **medical**, **nuclear**, and **railway** sectors as well as many more. Organizations everywhere are struggling to find **cost-effective methods** to deal with the enormous increase in size and complexity of these systems, while simultaneously respecting the need to ensure their safety. Consequently, we're witnessing the ad hoc emergence of a **renewed discipline** of **safety-critical software systems** development as a broad range of software engineering methods, tools, and frameworks are revisited from a safety-related perspective." |


* * *

|*Annie Combelles, Xabier Larrucea, John Favaro, **Safety-Critical Software [Guest editors' introduction]**, IEEE Software, May 2013.[^foo138]*|

[^foo138]: [DOI: 10.1109/MS.2013.55 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.55)
 
 
{pagebreak}


  
* * *

| "The transition from a **code-based process** to a **model-based process** isn't easy. This is particularly true for a company that operates in a **safety-critical sector**, where the products must be developed according to **international standards**, with certified tools and controlled processes." |


* * *

|*Stefania Gnesi, Gianluca Magnani, Alessandro Fantechi, Alessio Ferrari, **Model-Based Development and Formal Methods in the Railway Industry**, IEEE Software, May 2013.[^foo139]*|

[^foo139]: [DOI: 10.1109/MS.2013.44 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.44)
 
 
{pagebreak}


  
* * *

| "Conventional software reliability assessment validates a system's reliability only at the end of development, resulting in costly **defect correction**. A ... **statistical model checking** (SMC) ... validate reliability at an **early stage**. SMC computes the **probability** that a target system will satisfy **functional-safety** requirements." |


* * *

|*Tai-Hyo Kim, Jongmoon Baik, Moonzoo Kim, Okjoo Choi, Youngjoo Kim, **Validating Software Reliability Early through Statistical Model Checking**, IEEE Software, May 2013.[^foo140]*|

[^foo140]: [DOI: 10.1109/MS.2013.24 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.24)
 
 
{pagebreak}


  
* * *

| "Testing software in **air traffic control systems** costs much more than building them. This is basically true in every domain producing software-intensive critical systems. Software engineers strive to find methodological and process-level solutions to **balance these costs** and to better distribute verification efforts among all development phases." |


* * *

|*Stefano Russo, Francesco Fucci, Roberto Pietrantuono, Mauro Faella, Gabriella Carrozza, **Engineering Air Traffic Control Systems with a Model-Driven Approach**, IEEE Software, May 2013.[^foo141]*|

[^foo141]: [DOI: 10.1109/MS.2013.20 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.20)
 
 
{pagebreak}


  
* * *

| "Software for **commercial aircraft** is subject to the stringent **certification processes** described in the **DO-178B standard**, 'Software Considerations in Airborne Systems and Equipment Certification.' Issued in 1992, this document focuses strongly on the verification process, with a major emphasis on testing. In 2005, the avionics industry initiated an effort to update DO-178B, in large part to accommodate development practices (including formal verification techniques) that had matured since its publication. A revised standard, DO-178C, was issued in late 2011, incorporating new guidance that allows **formal verification** to **replace** certain forms of **testing**." |


* * *

|*Benjamin Monate, Emmanuel Ledinot, Herve Delseny, Virginie Wiels, Yannick Moy, **Testing or Formal Verification: DO-178C Alternatives and Industrial Experience**, IEEE Software, May 2013.[^foo142]*|

[^foo142]: [DOI: 10.1109/MS.2013.43 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.43)
 
 
{pagebreak}


  
* * *

| "To **support any claim** that a **product is safe** for its intended use, manufacturers must **establish traceability** within that product's development life cycle. " |


* * *

|*Jane Cleland-Huang, Yi Zhang, Paul L. Jones, Patrick Mader, **Strategic Traceability for Safety-Critical Projects**, IEEE Software, May 2013.[^foo143]*|

[^foo143]: [DOI: 10.1109/MS.2013.60 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.60)
 
 
{pagebreak}


  
* * *

| "Aerospace or **flight control systems** software development follows a rigorous process according to the **RTCA DO-178B standard**, yet **software errors** still occur." |


* * *

|*Yogananda Jeppu, **Flight Control Software: Mistakes Made and Lessons Learned**, IEEE Software, May 2013.[^foo144]*|

[^foo144]: [DOI: 10.1109/MS.2013.42 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.42)
 
 
{pagebreak}


  
* * *

| "Inspired by general ideas about how the **automotive industry** brings **innovation** into lean manufacturing, the author proposes introducing an activity called **software sketchifying** into software product development. Sketchifying aims to stimulate software stakeholders to spend more time generating and considering **alternative ideas** before making a decision to proceed with engineering." |


* * *

|*Zeljko Obrenovi&amp;#x0107;, **Software Sketchifying: Bringing Innovation into Software Development**, IEEE Software, May 2013.[^foo145]*|

[^foo145]: [DOI: 10.1109/MS.2012.71 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.71)
 
 
{pagebreak}






![](images-high-quality/2013-4.jpg)




{pagebreak}

  
* * *

| "**The fast-changing nature** of our field is one of the things that make working in software so much **fun** — and so **challenging**." |


* * *

|*Forrest Shull, **The Only Constant Is Change**, IEEE Software, July 2013.[^foo146]*|

[^foo146]: [DOI: https://doi.ieeecomputersociety.org/10.1109/MS.2013.115 ](https://doi.ieeecomputersociety.org/10.1109/MS.2013.115)
 
 
{pagebreak}


  
* * *

| "For those on the outside of the **curtain of computing**, there is **much mystery** behind the matter of software-intensive systems. To some, it looks like magic; to most, its inner workings are irrelevant insofar that it simply works. To those of us behind the curtain, however, we know that such systems are filled with **chaos, regularity, and beauty**." |


* * *

|*Grady Booch, **The Wonder Years**, IEEE Software, July 2013.[^foo147]*|

[^foo147]: [DOI: 10.1109/MS.2013.89 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.89)
 
 
{pagebreak}


  
* * *

| "Deciding whether to **write portable code** or not should be the outcome of a **cost-benefit analysis**. The key reason to favor portable code is that it opens up the **selection of resources** available to our project. Diverse technology choices free us from vendor lock-in, allowing us to select the best technology in each area based on quality and price, and minimize technology risks. However, portable code can **degrade functionality**, expressiveness, and efficiency." |


* * *

|*Diomidis Spinellis, **Portability: Goodies vs. the Hair Shirt**, IEEE Software, July 2013.[^foo148]*|

[^foo148]: [DOI: 10.1109/MS.2013.82 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.82)
 
 
{pagebreak}


  
* * *

| "Many practitioners and researchers have turned to **analytics**—that is, the use of analysis, data, and systematic reasoning for making decisions. We can define software analytics as follows: '**Software analytics** is **analytics on software data** for managers and software engineers with the aim of empowering software development individuals and teams to **gain and share insight** from their data to make better decisions.'" |


* * *

|*Tim Menzies, Thomas Zimmermann, **Software Analytics: So What?**, IEEE Software, July 2013.[^foo149]*|

[^foo149]: [DOI: 10.1109/MS.2013.86 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.86)
 
 
{pagebreak}


  
* * *

| "**Performance** is a critical component of **customer satisfaction** with network-based applications. Unfortunately, accurately evaluating the **performance of collaborative software** that operates in extremely heterogeneous environments is difficult with traditional techniques such as modeling workloads or testing in controlled environments." |


* * *

|*Sandipan Ganguly, Brian Bussone, Christian Bird, Danyel Fisher, Jacqueline Richards, Robert Musson, **Leveraging the Crowd: How 48,000 Users Helped Improve Lync Performance**, IEEE Software, July 2013.[^foo150]*|

[^foo150]: [DOI: 10.1109/MS.2013.67 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.67)
 
 
{pagebreak}


  
* * *

| "Prominent technology companies including IBM, Microsoft, and Google have embraced an **analytics-driven culture** to help improve their **decision making**. Analytics aim to help practitioners answer questions critical to their projects, such as 'Are we on track to deliver the next release on schedule?' and 'Of the recent features added, which are the most prone to defects?' by providing **fact-based views** about projects. Analytic results are often quantitative in nature, presenting data as **graphical dashboards** with reports and charts." |


* * *

|*Olga Baysal, Michael W. Godfrey, Reid Holmes, **Developer Dashboards: The Need for Qualitative Analytics**, IEEE Software, July 2013.[^foo151]*|

[^foo151]: [DOI: 10.1109/MS.2013.66 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.66)
 
 
{pagebreak}


  
* * *

| "**Defect density** is the ratio between the **number of defects** and **software size**. Properly assessing defect density in evolutionary product development requires a strong tool and rigid process support that enables defects to be traced to the offending source code. In addition, it requires waiting for **field defects** after the product is deployed." |


* * *

|*David Faller, Yang-Ming Zhu, **Defect-Density Assessment in Evolutionary Product Development: A Case Study in Medical Imaging**, IEEE Software, July 2013.[^foo152]*|

[^foo152]: [DOI: 10.1109/MS.2012.111 ](http://doi.ieeecomputersociety.org/10.1109/MS.2012.111)
 
 
{pagebreak}


  
* * *

| "Today's software development challenges require **learning teams** that can continuously apply new engineering and management practices, new and complex **technical skills**, **cross-functional skills**, and **experiential lessons** learned. The pressure of delivering working software often forces software teams to **sacrifice learning**-focused practices. Effective **learning under pressure** involves conscious efforts to implement original agile practices such as retrospectives and adapted strategies such as learning spikes. Teams, their management, and customers must all recognize the importance of creating **learning teams** as the key to braving the erratic climates and uncharted territories of future software development." |


* * *

|*Jeffry Babb, Rashina Hoda, Jacob Norbjerg, **Toward Learning Teams**, IEEE Software, July 2013.[^foo153]*|

[^foo153]: [DOI: 10.1109/MS.2013.90 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.90)
 
 
{pagebreak}






![](images-high-quality/2013-5.jpg)




{pagebreak}

  
* * *

| "If estimating the time needed for implementing some software is difficult, coming up with a figure for **the time required to debug** it is nigh on impossible." |


* * *

|*Diomidis Spinellis, **Differential Debugging**, IEEE Software, September 2013.[^foo154]*|

[^foo154]: [DOI: https://doi.ieeecomputersociety.org/10.1109/MS.2013.103 ](https://doi.ieeecomputersociety.org/10.1109/MS.2013.103)
 
 
{pagebreak}


  
* * *

| "With **smartphones** being the primary handheld device for more than **a billion people**, mobile Web apps are a necessity in both technical and commercial fields. There are several approaches to developing mobile Web apps, but given the **fast speed** of mobile software evolution, in which the leading companies become marginal in months and new gadgets continually appear, it's crucial to **understand the basic technologies**. " |


* * *

|*Nicolás Serrano, Josune Hernantes, Gorka Gallardo, **Mobile Web Apps**, IEEE Software, September 2013.[^foo155]*|

[^foo155]: [DOI: 10.1109/MS.2013.111 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.111)
 
 
{pagebreak}


  
* * *

| "With **software analytics**, software practitioners explore and analyze data to obtain insightful, actionable information for tasks regarding software development, systems, and users. The **StackMine** project produced a software analytics system for **Microsoft product teams**." |


* * *

|*Dongmei Zhang, Shi Han, Yingnong Dang, Jian-Guang Lou, Haidong Zhang, Tao Xie, **Software Analytics in Practice**, IEEE Software, September 2013.[^foo156]*|

[^foo156]: [DOI: 10.1109/MS.2013.94 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.94)
 
 
{pagebreak}


  
* * *

| "When free, open source software development communities work with companies that use their output, it's especially important for both parties to understand how this collaboration is performing. The use of data analytics techniques on software development repositories can improve **factual knowledge** about **performance metrics**." |


* * *

|*Jesus M. Gonzalez-Barahona, Daniel Izquierdo-Cortazar, Stefano Maffulli, Gregorio Robles, **Understanding How Companies Interact with Free Software Communities**, IEEE Software, September 2013.[^foo157]*|

[^foo157]: [DOI: 10.1109/MS.2013.95 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.95)
 
 
{pagebreak}


  
* * *

| "Amisoft, a **Chilean software company** with **43 employees**, successfully uses **software analytics** in its projects. These support a variety of **strategic and tactical decisions**, resulting in **less overwork** of employees. However, the analytics done at Amisoft are **very different** from the ones used in larger companies." |


* * *

|*Romain Robbes, René Vidal, María Cecilia Bastarrica, **Are Software Analytics Efforts Worthwhile for Small Companies? The Case of Amisoft**, IEEE Software, September 2013.[^foo158]*|

[^foo158]: [DOI: 10.1109/MS.2013.92 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.92)
 
 
{pagebreak}


  
* * *

| "**Software analytics** guide practitioners in **decision making** throughout the software development process. In this context, **prediction models** help managers efficiently organize their resources and identify problems by **analyzing patterns** on existing project data in an intelligent and meaningful manner." |


* * *

|*Ayse Tosun Misirli, Ayse Tosun Misirli, Ayse Bener, Burak Turhan, **A Retrospective Study of Software Analytics Projects: In-Depth Interviews with Practitioners**, IEEE Software, September 2013.[^foo159]*|

[^foo159]: [DOI: 10.1109/MS.2013.93 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.93)
 
 
{pagebreak}


  
* * *

| "As the last standardization effort was done in 2004, the software engineering curriculum is currently being revised. Haven't we reached the point where **agile development** should be **part of all software engineering curricula**? And if so, shouldn't new curriculum standards ensure that it is?" |


* * *

|*Armando Fox, David Patterson, **Is the New Software Engineering Curriculum Agile?**, IEEE Software, September 2013.[^foo160]*|

[^foo160]: [DOI: 10.1109/MS.2013.109 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.109)
 
 
{pagebreak}






![](images-high-quality/2013-6.jpg)




{pagebreak}

  
* * *

| "No matter your individual position on the matter, **faith is a powerful element** of the human experience. Therefore, it comes as no surprise that **computing intersects** with the **story of belief** in many ways ... computing as a **medium for faith**, as a **ritual space**, and as a technology that itself raises certain **metaphysical issues**." |


* * *

|*Grady Booch, **Deus ex Machina**, IEEE Software, November 2013.[^foo161]*|

[^foo161]: [DOI: 10.1109/MS.2013.122 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.122)
 
 
{pagebreak}


  
* * *

| "**Embedded analytics** and statistics for **big data** have emerged as an important topic across industries. As the volumes of data have increased, software engineers are called to support data analysis and applying some kind of statistics to them." |


* * *

|*Panos Louridas, Christof Ebert, **Embedded Analytics and Statistics for Big Data**, IEEE Software, November 2013.[^foo162]*|

[^foo162]: [DOI: 10.1109/MS.2013.125 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.125)
 
 
{pagebreak}


  
* * *

| "**Software architecture** is the foundation of software system development, encompassing a system's architects' and stakeholders' **strategic decisions**." |


* * *

|*Paris Avgeriou, Michael Stal, Rich Hilliard, **Architecture Sustainability [Guest editors' introduction]**, IEEE Software, November 2013.[^foo163]*|

[^foo163]: [DOI: 10.1109/MS.2013.120 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.120)
 
 
{pagebreak}


  
* * *

| "Software architects must **sustain design decisions** to endure throughout software evolution. Several criteria can help them assess decisions' sustainability ... **Strategic** ... **Measurable and Manageable** ... **Achievable and Realistic** ... **Rooted in Requirements** ... **Timeless** ... " |


* * *

|*Uwe Zdun, Rafael Capilla, Huy Tran, Olaf Zimmermann, **Sustainable Architectural Design Decisions**, IEEE Software, November 2013.[^foo164]*|

[^foo164]: [DOI: 10.1109/MS.2013.97 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.97)
 
 
{pagebreak}


  
* * *

| "It's difficult to express a **software architecture's sustainability** in a single metric: relevant information is spread across requirements, architecture design documents, **technology choices**, source code, system context, and software architects' implicit knowledge. Many aspects influence economic sustainability, including design decisions facilitating **evolutionary changes**, adherence to good **modularization practices**, and **technology choices**." |


* * *

|*Heiko Koziolek, Dominik Domis, Thomas Goldschmidt, Philipp Vorst, **Measuring Architecture Sustainability**, IEEE Software, November 2013.[^foo165]*|

[^foo165]: [DOI: 10.1109/MS.2013.101 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.101)
 
 
{pagebreak}


  
* * *

| "**Software product lines (SPLs)** are **long-living systems** that enable **systematic reuse** in application engineering. Product-specific changes over time can result in **architecture drift**, which requires updating assumptions made in the SPL's reuse infrastructure." |


* * *

|*Juha Savolainen, Nan Niu, Tommi Mikkonen, Thomas Fogdal, **Long-Term Product Line Sustainability with Planned Staged Investments**, IEEE Software, November 2013.[^foo166]*|

[^foo166]: [DOI: 10.1109/MS.2013.96 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.96)
 
 
{pagebreak}


  
* * *

| "One of the most notable categories of successful UI development is **form-oriented frameworks** tightly coupled with **relational database** management systems. Essentially, this approach builds a UI for relational database applications by organizing that **interface into forms**, which present values of database fields in the corresponding form controls, such as text boxes, list boxes, check boxes, grids, and so on. Tools and runtime engines support generic navigation through these forms and direct coupling of controls with the back-end data. The developer doesn't need to take care of data locking, transfer, transformation, and updates: when the user switches to another record in the master part of a master-details form, for example, the mechanism incorporated in the generic form **automatically refreshes** the values in the details part." |


* * *

|*Zarko Mijailovic, Dragan Milicev, **A Retrospective on User Interface Development Technology**, IEEE Software, November 2013.[^foo167]*|

[^foo167]: [DOI: 10.1109/MS.2013.45 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.45)
 
 
{pagebreak}


  
* * *

| "A **conservative estimate** puts today’s number of **published patterns** at more than **7,500**, and growing. " |


* * *

|*Gregor Hohpe, Rebecca Wirfs-Brock, Joseph W. Yoder, Olaf Zimmermann K1 architectural knowledge, **Twenty Years of Patterns' Impact**, IEEE Software, November 2013.[^foo168]*|

[^foo168]: [DOI: 10.1109/MS.2013.135 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.135)
 
 
{pagebreak}


# 2014
{pagebreak}






![](images-high-quality/2014-1.jpg)




{pagebreak}

  
* * *

| "**Every line of code** represents a **moral decision**; every bit of data collected, analyzed, and visualized has moral implications." |


* * *

|*Grady Booch, **The Human and Ethical Aspects of Big Data**, IEEE Software, January 2014.[^foo169]*|

[^foo169]: [DOI: 10.1109/MS.2014.16 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.16)
 
 
{pagebreak}


  
* * *

| "In practice, it's neither **possible nor meaningful** to characterize software products or projects by a **single quality metric**. " |


* * *

|*Ruth Breu, Annie Kuntzmann-Combelles, Michael Felderer, **New Perspectives on Software Quality [Guest editors' introduction]**, IEEE Software, January 2014.[^foo170]*|

[^foo170]: [DOI: 10.1109/MS.2014.9 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.9)
 
 
{pagebreak}


  
* * *

| "**Automated GUIs** test application user interfaces and verify their functionalities. However, due to the uncertainty of runtime execution environments, the **device under test (DUT)** might not reproduce GUI operations on time, resulting in test failures." |


* * *

|*Ying-Dar Lin, Edward T.-H. Chu, Shang-Che Yu, Yuan-Cheng Lai, **Improving the Accuracy of Automated GUI Testing for Embedded Systems**, IEEE Software, January 2014.[^foo171]*|

[^foo171]: [DOI: 10.1109/MS.2013.100 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.100)
 
 
{pagebreak}


  
* * *

| "**Healthcare social networking sites** (HSNSs) provide users with tools and services to easily establish contact with each other around **shared problems** and utilize the **wisdom of crowds** to **attack disease**. The increasing popularity of HSNSs has led to concern over the **privacy of health-related data** published through these websites. The open philosophy of contemporary HSNSs can result in **unauthorized use** and disclosure of sensitive personal health data." |


* * *

|*Jingquan Li, **Data Protection in Healthcare Social Networks**, IEEE Software, January 2014.[^foo172]*|

[^foo172]: [DOI: 10.1109/MS.2013.99 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.99)
 
 
{pagebreak}


  
* * *

| "**Agility** without **objective governance** cannot scale, and governance without agility cannot compete. **Agile methods** are **mainstream**, and software enterprises are adopting these practices in diverse delivery contexts and at enterprise scale. IBM's broad industry experience with agile transformations and deep internal know-how point to **two key principles** to deliver sustained improvements in software business outcomes with higher confidence: **measure and streamline** change **costs**, and **steer with economic governance** and **Bayesian analytics**." |


* * *

|*Murray Cantor, Walker Royce, **Economic Governance of Software Delivery**, IEEE Software, January 2014.[^foo173]*|

[^foo173]: [DOI: 10.1109/MS.2013.102 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.102)
 
 
{pagebreak}


  
* * *

| "**ISO 26262**, a functional-safety standard, uses **Automotive Safety Integrity Levels (ASILs)** to assign safety requirements to automotive-system elements. System designers initially assign ASILs to **system-level hazards** and then allocate them to elements of the refined system architecture. Through ASIL decomposition, designers can divide a function's safety requirements among **multiple components**. However, in practice, manual ASIL decomposition is difficult and produces varying results." |


* * *

|*Luis da Silva Azevedo, David Parker, Martin Walker, Yiannis Papadopoulos, Rui Esteves Araujo, **Assisted Assignment of Automotive Safety Requirements**, IEEE Software, January 2014.[^foo174]*|

[^foo174]: [DOI: 10.1109/MS.2013.118 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.118)
 
 
{pagebreak}


  
* * *

| "The rhetorical question '**do we practice what we preach?**' still seems to be relevant, even a decade after it appeared on the requirements engineering research landscape." |


* * *

|*Smita Ghaisas, **Practicing What We Preach**, IEEE Software, January 2014.[^foo175]*|

[^foo175]: [DOI: 10.1109/MS.2014.10 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.10)
 
 
{pagebreak}






![](images-high-quality/2014-2.jpg)




{pagebreak}

  
* * *

| "The **Healthcare.gov debacle** of 2013 leads many to wonder if a better understanding of the project's requirements could have lessened the impact of the failed launch." |


* * *

|*Jane Cleland-Huang, **Don't Fire the Architect! Where Were the Requirements?**, IEEE Software, March 2014.[^foo176]*|

[^foo176]: [DOI: 10.1109/MS.2014.34 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.34)
 
 
{pagebreak}


  
* * *

| "Many affordable **cloud-based offerings** that cover software development needs, like **version control**, **issue tracking**, **remote application monitoring**, **localization**, **deployment**, **payment processing**, and **continuous integration**, do away with the setup, maintenance, and user support costs and complexity associated with running such systems in-house. The most **important risks** of cloud-based tools concern **control of the data** stored and the services an organization uses." |


* * *

|*Diomidis Spinellis, **Developing in the Cloud**, IEEE Software, March 2014.[^foo177]*|

[^foo177]: [DOI: 10.1109/MS.2014.33 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.33)
 
 
{pagebreak}


  
* * *

| "Within the **last decade**, **laptop sales** have surpassed those of **desktop computers** in many world markets, and the worldwide popularity of **smartphones** has surpassed them both ... But smartphones are not the likely end of the mobile computing innovation vector. We believe **mobile computing is in its infancy**, and the next generations of mobile technology are going to be even more pervasive, smaller, and maybe even a bit weirder and more integral to our lives, jobs, and future." |


* * *

|*James Edmondson, William Anderson, Jeff Gray, Joseph P. Loyall, Klaus Schmid, Jules White, **Next-Generation Mobile Computing**, IEEE Software, March 2014.[^foo178]*|

[^foo178]: [DOI: 10.1109/MS.2014.39 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.39)
 
 
{pagebreak}


  
* * *

| "Researchers from **sociological disciplines** could greatly benefit from **collective information** from the many people who use **mobile devices** to communicate via various social apps and services. However, processing that information is difficult because it's **scattered** among numerous social platforms. Furthermore, **users** are becoming **increasingly concerned** about how and by whom their information is being accessed." |


* * *

|*Joaquin Guillen, Javier Miranda, Javier Berrocal, Jose Garcia-Alonso, Juan Manuel Murillo, Carlos Canal, **People as a Service: A Mobile-centric Model for Providing Collective Sociological Profiles**, IEEE Software, March 2014.[^foo179]*|

[^foo179]: [DOI: 10.1109/MS.2013.140 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.140)
 
 
{pagebreak}


  
* * *

| "Mobile cloud computing infrastructures supporting the vision of the **Internet of Things** (IoT) provide services **beneficial to our society**. For example, a **cloud of smartphones** can run software that shares the sensing and computing resources of nearby devices, providing increased **situational awareness** in a **disaster zone**. " |


* * *

|*Tihamer Levendovszky, Abhishek Dubey, William R. Otte, Daniel Balasubramanian, Alessandro Coglio, Sandor Nyako, William Emfinger, Pranav Kumar, Aniruddha Gokhale, Gabor Karsai, **Distributed Real-Time Managed Systems: A Model-Driven Distributed Secure Information Architecture Platform for Managed Embedded Systems**, IEEE Software, March 2014.[^foo180]*|

[^foo180]: [DOI: 10.1109/MS.2013.143 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.143)
 
 
{pagebreak}


  
* * *

| "Newer models for interacting with wireless sensors such as **Internet of Things** and **Sensor Cloud** aim to overcome restricted resources and efficiency. The Missouri S&T (science and technology) sensor cloud enables different networks, spread in a huge geographical area, to connect together and be employed simultaneously by multiple users on demand. **Virtual sensors**, which are at the core of this sensor cloud architecture, assist in creating a multiuser environment on top of resource-constrained physical wireless sensors and can help in supporting multiple applications." |


* * *

|*Sanjay Madria, Vimal Kumar, Rashmi Dalvi, **Sensor Cloud: A Cloud of Virtual Sensors**, IEEE Software, March 2014.[^foo181]*|

[^foo181]: [DOI: 10.1109/MS.2013.141 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.141)
 
 
{pagebreak}


  
* * *

| "Developers of **embedded systems** are driven to constantly improve product quality, reduce cost, and rapidly deliver reliable working code. The embedded software domain applies constraints which can **hinder agile methodologies** commonly used to achieve such benefits. **Simulation-based software development** is one proven method that addresses these constraints." |


* * *

|*Jason Ard, Kristine Davidsen, Terril Hurst, **Simulation-Based Embedded Agile Development**, IEEE Software, March 2014.[^foo182]*|

[^foo182]: [DOI: 10.1109/MS.2014.42 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.42)
 
 
{pagebreak}






![](images-high-quality/2014-3.jpg)




{pagebreak}

  
* * *

| "Many **types of architects** work in the software industry, but when we consider the breadth of their work and their primary expertise, we find that they can be organized into three major groups: **enterprise architects**, **application architects**, and **infrastructure architects**. Knowing which group an architect falls into helps in understanding their expertise and what to expect of them." |


* * *

|*Eoin Woods, **Return of the Pragmatic ArchitectK1 infrastructure**, IEEE Software, May 2014.[^foo183]*|

[^foo183]: [DOI: 10.1109/MS.2014.69 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.69)
 
 
{pagebreak}


  
* * *

| "**Continuous integration** has been around for a while now, but the habits it suggests are **far from common practice**. **Automated builds**, a **thorough test suite**, and committing to **the mainline branch** every day sound simple at first, but they require a **responsible team** to implement and constant care. What starts with improved tooling can be **a catalyst** for long-lasting change in your company's shipping culture. Continuous integration is more than a set of practices, it's a mindset that has one thing in mind: **increasing customer value**." |


* * *

|*Mathias Meyer, **Continuous Integration and Its ToolsK1 testing**, IEEE Software, May 2014.[^foo184]*|

[^foo184]: [DOI: 10.1109/MS.2014.58 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.58)
 
 
{pagebreak}


  
* * *

| "**Quality goals** for security, business agility, maintainability and other such attributes are often achieved through implementing best practices. To know which **stakeholder goals** are attainable and how they can best be achieved, we must **empirically evaluate** software development beliefs and practices." |


* * *

|*Mamoun Hirzalla, Peter Bahrs, Jane Cleland-Huang K1 quality goals, **Beyond Anecdotal Thinking: Deepening Our Understanding for Achieving Quality Goals**, IEEE Software, May 2014.[^foo185]*|

[^foo185]: [DOI: 10.1109/MS.2014.57 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.57)
 
 
{pagebreak}


  
* * *

| "Most studies and regulatory controls focus on **hardware-related measurement**, analysis, and control for **energy consumption**. However, all forms of hardware include **significant software components**. Although software systems don't consume energy directly, they affect **hardware utilization**, leading to **indirect energy consumption**. Therefore, it's important to engineer software to optimize its energy consumption. " |


* * *

|*Ayse Basar Bener, Maurizio Morisio, Andriy Miranskyy K1 cloud, **Green Software**, IEEE Software, May 2014.[^foo186]*|

[^foo186]: [DOI: 10.1109/MS.2014.62 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.62)
 
 
{pagebreak}


  
* * *

| "Many software systems today control **large-scale sociotechnical systems**. These systems aren't just entangled with the environment but also with our dwindling resources and mostly unsustainable way of living, while the planet's population continues to grow. Dealing with **sustainability requirements** and systematically supporting their elicitation, analysis, and realization is a problem that has yet to be solved." |


* * *

|*Birgit Penzenstadler, Ankita Raturi, Debra Richardson, Bill Tomlinson, **Safety, Security, Now Sustainability: The Nonfunctional Requirement for the 21st Century**, IEEE Software, May 2014.[^foo187]*|

[^foo187]: [DOI: 10.1109/MS.2014.22 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.22)
 
 
{pagebreak}


  
* * *

| "**Energy efficiency** and other **sustainability issues** are common concerns in the material production industries but rarely addressed in software development efforts. Instead, traditional software development life cycles and methodologies place an emphasis on maintainability and other intrinsic software quality features. One standard practice is to **improve maintainability** by detecting **bad smells** in a system's architecture and then applying **refactoring transformations** to deal with those smells. The refactoring research area is sufficiently mature for most techniques to achieve more maintainable system architectures, but ... they can also lead to both **decreased sustainability** and **increased power consumption**." |


* * *

|*Ricardo Perez-Castillo, Mario Piattini, **Analyzing the Harmful Effect of God Class Refactoring on Power Consumption**, IEEE Software, May 2014.[^foo188]*|

[^foo188]: [DOI: 10.1109/MS.2014.23 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.23)
 
 
{pagebreak}


  
* * *

| "To develop more powerful, service-specific strategies for **reducing IT's carbon footprint**, we need more complete and widely **understandable specifications** that describe exactly a service's functionality, the level of quality it achieves, and its **environmental consequences**. Such green specifications will allow more stakeholders involved in the delivery and consumption of IT services to understand their detailed functionality and the **tradeoffs** between **quality of service** and **environmental impact** entailed in their use." |


* * *

|*Colin Atkinson, Thomas Schulze, Sonja Klingert, **Facilitating Greener IT through Green Specifications**, IEEE Software, May 2014.[^foo189]*|

[^foo189]: [DOI: 10.1109/MS.2014.19 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.19)
 
 
{pagebreak}


  
* * *

| "In applications in which **embedded devices** cooperate with **ICT (information and communication technology)** systems to make industrial processes more efficient, reduce waste or raw materials, and save the environment, the concept of **green software** becomes increasingly complex. To deal with this issue, the green-software community has introduced the concepts of **greening ICT** or **greening through ICT**." |


* * *

|*Krzysztof Sierszecki, Tommi Mikkonen, Michaela Steffens, Thomas Fogdal, Juha Savolainen K1 software engineering, **Green Software: Greening What and How Much?**, IEEE Software, May 2014.[^foo190]*|

[^foo190]: [DOI: 10.1109/MS.2014.63 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.63)
 
 
{pagebreak}


  
* * *

| "Hardware and software engineers are instrumental in developing **energy-efficient mobile systems**. Unfortunately, the **last mile of energy** efficiency relies on end users' choices and requirements. Imagine a user who has no power outlet access and must remain productive on the laptop's battery. How does this person maximize battery life, yet remain productive? What does the user have to give up to keep working?" |


* * *

|*Chenlei Zhang, Abram Hindle, Daniel M. German, **The Impact of User Choice on Energy Consumption**, IEEE Software, May 2014.[^foo191]*|

[^foo191]: [DOI: 10.1109/MS.2014.27 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.27)
 
 
{pagebreak}






![](images-high-quality/2014-4.jpg)




{pagebreak}

  
* * *

| "Studies show that software **developers' happiness** pays off when it comes to **productivity**." |


* * *

|*Daniel Graziotin, Xiaofeng Wang, Pekka Abrahamsson, **Software Developers, Moods, Emotions, and Performance**, IEEE Software, July 2014.[^foo192]*|

[^foo192]: [DOI: 10.1109/MS.2014.94 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.94)
 
 
{pagebreak}


  
* * *

| "The capacity to **reflect on past practice** is important for continuous learning in software development. Reflection often takes place in cycles of experience followed by conscious application of learning from that experience, during which a software developer might explore comparisons, ponder alternatives, take diverse perspectives, and draw inferences, especially in new and/or complex situations." |


* * *

|*Tore Dyba, Neil Maiden, Robert Glass, **The Reflective Software Engineer: Reflective Practice**, IEEE Software, July 2014.[^foo193]*|

[^foo193]: [DOI: https://doi.ieeecomputersociety.org/10.1109/MS.2014.97 ](https://doi.ieeecomputersociety.org/10.1109/MS.2014.97)
 
 
{pagebreak}


  
* * *

| "The **capacity to reflect** on past practice is important for **continuous learning** in software development. Reflection often takes place **in cycles** of **experience** followed by **conscious application** of learning from that experience, during which a software developer might explore comparisons, ponder alternatives, take diverse perspectives, and draw inferences, especially in new and/or complex situations. Such reflective practice has been shown in different disciplines to be an **effective developmental practice** for **organizations**, for **teams**, and for **individuals**." |


* * *

|*Tore Dyba, Neil Maiden, Robert Glass K1 practitioners, **The Reflective Software Engineer: Reflective Practice**, IEEE Software, July 2014.[^foo194]*|

[^foo194]: [DOI: 10.1109/MS.2014.97 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.97)
 
 
{pagebreak}


  
* * *

| "**Project retrospectives** can be powerful tools for project teams to collectively identify communication gaps and practices to improve for future projects. However, even if project members take the time for a retrospective, it can be hard to **correctly remember** and **jointly discuss** past events in a constructive way. **Fact-based timelines** that visualize a project's events offer a possible solution." |


* * *

|*Elizabeth Bjarnason, Anne Hess, Richard Berntsson Svensson, Bjorn Regnell, Joerg Doerr, **Reflecting on Evidence-Based Timelines**, IEEE Software, July 2014.[^foo195]*|

[^foo195]: [DOI: 10.1109/MS.2014.26 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.26)
 
 
{pagebreak}


  
* * *

| "**Learning** is a **lifelong process**, especially in the fast-paced software industry. In addition to **formal training** courses, good software developers continually **learn by reflecting** on what they've done in the past. However, reflective practice is **rarely taught** explicitly in university software engineering education. One way to teach reflective techniques from the start is through **studio-based learning**." |


* * *

|*Christopher N. Bull, Jon Whittle, **Supporting Reflective Practice in Software Engineering Education through a Studio-Based Approach**, IEEE Software, July 2014.[^foo196]*|

[^foo196]: [DOI: 10.1109/MS.2014.52 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.52)
 
 
{pagebreak}


  
* * *

| "The theoretical underpinnings of **agile principles** emphasize **regular reflection** as a means to attain a **sustainable development pace** and continuous learning. In practice, high **iteration pressure** can diminish opportunities for ongoing learning and reflection threatening to deprive software teams of learning and reflection and possibly stagnating process evolution." |


* * *

|*Jeffry Babb, Rashina Hoda, Jacob Norbjerg, **Embedding Reflection and Learning into Agile Software Development**, IEEE Software, July 2014.[^foo197]*|

[^foo197]: [DOI: 10.1109/MS.2014.54 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.54)
 
 
{pagebreak}


  
* * *

| "A **coderetreat** is an event where software developers gather to **spend a day exploring** their craft in an informal yet intellectually challenging environment. It encourages **reflective practice** by addressing **a single programming problem** from different perspectives, with multiple coding partners, freed from the daily pressures of deadlines and the need to deliver completed artifacts." |


* * *

|*David Parsons, Anuradha Mathrani, Teo Susnjak, Arno Leist, **Coderetreats: Reflective Practice and the Game of Life**, IEEE Software, July 2014.[^foo198]*|

[^foo198]: [DOI: 10.1109/MS.2014.25 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.25)
 
 
{pagebreak}


  
* * *

| "**Microblogging** is a popular form of **social media** that has quickly permeated both enterprise and open source communities. However, exactly how open source communities can leverage microblogging isn't yet well understood. ... how **Drupal's** open source community uses **Twitter** ... community members often express **positive emotions** when tweeting about work, which reinforces a sense of community." |


* * *

|*Xiaofeng Wang, Ilona Kuzmickaja, Klaas-Jan Stol, Pekka Abrahamsson, Brian Fitzgerald, **Microblogging in Open Source Software Development: The Case of Drupal and Twitter**, IEEE Software, July 2014.[^foo199]*|

[^foo199]: [DOI: 10.1109/MS.2013.98 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.98)
 
 
{pagebreak}






![](images-high-quality/2014-5.jpg)




{pagebreak}

  
* * *

| "**Privacy** is a **critical design principle** that must be balanced with how we **utilize personal data** in software. ... the increasing importance of privacy in emerging **software ecosystems**, legal and standards **compliance**, and software design practice." |


* * *

|*Travis Breaux, **Privacy Requirements in an Age of Increased Sharing**, IEEE Software, September 2014.[^foo200]*|

[^foo200]: [DOI: 10.1109/MS.2014.118 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.118)
 
 
{pagebreak}


  
* * *

| "An impressive number of **new startups** are launched every day as a result of growing new markets, accessible technologies, and venture capital. New ventures such as **Facebook**, **Supercell**, **Linkedin**, **Spotify**, **WhatsApp**, and **Dropbox**, to name a few, are good examples of startups that evolved into successful businesses. However, despite many successful stories, the **great majority** of them **fail** prematurely. Operating in a **chaotic** and **rapidly evolving domain** conveys new uncharted challenges for startuppers." |


* * *

|*Carmine Giardino, Michael Unterkalmsteiner, Nicolo Paternoster, Tony Gorschek, Pekka Abrahamsson, **What Do We Know about Software Development in Startups?**, IEEE Software, September 2014.[^foo201]*|

[^foo201]: [DOI: 10.1109/MS.2014.129 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.129)
 
 
{pagebreak}


  
* * *

| "One thing we know for certain is that the **dominant programming language** of today is the **legacy language** of tomorrow. Sometimes languages are sidelined due to **fashion**, but changes are generally due to **new languages** being applicable to a wider or different class of problems than their predecessors. Maybe one day this process will stop, but it seems unlikely that you’d lose money betting on it to continue for a while yet." |


* * *

|*Laurence Tratt, Adam Welc K1 software engineering, **Programming Languages**, IEEE Software, September 2014.[^foo202]*|

[^foo202]: [DOI: 10.1109/MS.2014.119 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.119)
 
 
{pagebreak}


  
* * *

| "**IDEs** are essential for programming language developers, and state-of-the-art IDE support is mandatory for programming languages to be successful. Although IDE features for mainstream programming languages are typically implemented manually, this often isn't feasible for programming languages that must be developed with significantly fewer resources. The **Spoofax language workbench** is a platform for developing textual programming languages with state-of-the-art IDE support." |


* * *

|*Guido H. Wachsmuth, Gabriël D.P. Konat, Eelco Visser, **Language Design with the Spoofax Language Workbench**, IEEE Software, September 2014.[^foo203]*|

[^foo203]: [DOI: 10.1109/MS.2014.100 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.100)
 
 
{pagebreak}


  
* * *

| "**Scripting languages** are very popular and are being used to implement a wide range of applications. Meanwhile, multi-core processors are everywhere, from dektop computers to mobile devices, and concurrency has become the only means to improve performance. However, **concurrent programming** remains difficult and despite some interest in researching new concurrency models for compiled languages, the conventional concurrency support in scripting languages is still lacking." |


* * *

|*Alexandre Skyrme, Noemi Rodriguez, Roberto Ierusalimschy, **Scripting Multiple CPUs with Safe Data Sharing**, IEEE Software, September 2014.[^foo204]*|

[^foo204]: [DOI: 10.1109/MS.2014.102 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.102)
 
 
{pagebreak}


  
* * *

| "**Modern software** differs significantly from **traditional** computer applications that mostly process reasonably small amounts of **static input data**-sets in batch mode. Modern software increasingly processes **massive amounts of data**, whereby it is also often the case that new input data is produced and/or existing data is **modified on the fly**. Consequently, **programming models** that facilitate the development of such software are emerging. What characterizes them is that **data**, respectively changes thereof, **implicitly flow** through computation modules." |


* * *

|*Guido Salvaneschi, Patrick Eugster, Mira Mezini, **Programming with Implicit Flows**, IEEE Software, September 2014.[^foo205]*|

[^foo205]: [DOI: 10.1109/MS.2014.101 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.101)
 
 
{pagebreak}


  
* * *

| "In large-scale software development, there is typically **a conflict** between being responsive to **individual customers**, while at the same time achieving scale in terms of delivering a high number of features to a **large customer base**. Most often, organizations **focus on scale** and individual customer requests are viewed as problematic since they **add complexity** to product variation and version control." |


* * *

|*Helena Olsson, Anna Sandberg, Jan Bosch, Hiva Alahyari, **Scale and Responsiveness in Large-Scale Software Development**, IEEE Software, September 2014.[^foo206]*|

[^foo206]: [DOI: 10.1109/MS.2013.139 ](http://doi.ieeecomputersociety.org/10.1109/MS.2013.139)
 
 
{pagebreak}


  
* * *

| "There’s a joke that **Go** was conceived while **waiting for** a **C++** program **to compile**, which is kind of half true. " |


* * *

|*Jeff Meyerson, **The Go Programming LanguageK1 syntax**, IEEE Software, September 2014.[^foo207]*|

[^foo207]: [DOI: 10.1109/MS.2014.127 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.127)
 
 
{pagebreak}






![](images-high-quality/2014-6.jpg)




{pagebreak}

  
* * *

| "Over the past decades, today, and in the future, business contexts in software organizations and the common ways of developing software are changing dramatically. Formation of **teams in distributed environments**, virtual or not, calls for new ways of working across **geographic**, **temporal**, and **cultural boundaries**. This, however, also requires **effective leadership** approaches enabled through systems, processes, technology, and people." |


* * *

|*Darja Smite, Marco Kuhrmann, Patrick Keil, **Virtual Teams [Guest editors' introduction]**, IEEE Software, November 2014.[^foo208]*|

[^foo208]: [DOI: 10.1109/MS.2014.149 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.149)
 
 
{pagebreak}


  
* * *

| "Software engineering is a field in which distributed development through **virtual teams** is a **fact of life**. ... a set of eight **core requirements** for support environments for virtual software teams ... (1) Enable **Unobtrusive Awareness** Information Exchange ... (2) Make Basic Work-Related **Data Available** ... (3) Provide **Multisource Data** Combinations ... (4) **Filter** Irrelevant Information ... (5) Represent and Recognize **Current Contexts** of Team Members ... (6) Support the **Overhearing** of Conversations ... (7) Support **Mood Sharing** ... (8) ... " |


* * *

|*Kevin Dullemond, Ben van Gameren, Rini van Solingen, **Collaboration Spaces for Virtual Software Teams**, IEEE Software, November 2014.[^foo209]*|

[^foo209]: [DOI: 10.1109/MS.2014.105 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.105)
 
 
{pagebreak}


  
* * *

| "In today's world, many companies turn to open source projects as a method to increase productivity and innovation. A major challenge with managing this kind of development is the **onboarding of new developers** into the virtual teams that drive such projects. There's little guidance on how to initiate new members into such teams and how to overcome the learning curve. This case study on open source software projects shows that **mentoring** can have a significant impact on onboarding new members into virtual software development teams." |


* * *

|*Fabian Fagerholm, Alejandro Sanchez Guinea, Jay Borenstein, Jurgen Munch, **Onboarding in Open Source Projects**, IEEE Software, November 2014.[^foo210]*|

[^foo210]: [DOI: 10.1109/MS.2014.107 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.107)
 
 
{pagebreak}


  
* * *

| "Do I think that there are some universals? Absolutely I do. And looking for **a team or cultural fit**, looking for people who are **motivated** and have good **communication** and good **collaboration**, my suspicion is that those are universal qualities that make people successful." |


* * *

|*Tobias Kaatz, **Hiring in the Software Industry**, IEEE Software, November 2014.[^foo211]*|

[^foo211]: [DOI: https://doi.ieeecomputersociety.org/10.1109/MS.2014.140 ](https://doi.ieeecomputersociety.org/10.1109/MS.2014.140)
 
 
{pagebreak}


# 2015
{pagebreak}






![](images-high-quality/2015-1.jpg)




{pagebreak}

  
* * *

| "Parallels exist between the **Industrial Revolution** and our current computing revolution regarding **risk**, **transparency**, and **responsibility**." |


* * *

|*Grady Booch, **Of Boilers, Bit, and Bots**, IEEE Software, January 2015.[^foo212]*|

[^foo212]: [DOI: 10.1109/MS.2015.13 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.13)
 
 
{pagebreak}


  
* * *

| "**Software-driven industries** are advancing in five dimensions: **collaboration**, **comprehension**, **connectivity**, **cloud**, and **convergence**. However, companies often can get stuck in an overly narrow technology focus. To avoid this, they should **connect architecture and functionality**, master the entire software development life cycle, strengthen globally distributed teams, and streamline development." |


* * *

|*Christof Ebert, Gerd Hoefner, Mani V.S., **What Next? Advances in Software-Driven Industries**, IEEE Software, January 2015.[^foo213]*|

[^foo213]: [DOI: 10.1109/MS.2015.21 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.21)
 
 
{pagebreak}


  
* * *

| "**Software engineering** for **Internet computing** involves the architecting, development, deployment, management, and quality assurance of software supporting Internet-based systems. It also addresses **global-development issues** such as **communication complexity**, **distributed control**, **governance policies**, and **cultural differences**." |


* * *

|*Antonia Bertolino, M. Brian Blake, Pankaj Mehra, Hong Mei, Tao Xie, **Software Engineering for Internet Computing: Internetware and Beyond [Guest editors' introduction]**, IEEE Software, January 2015.[^foo214]*|

[^foo214]: [DOI: 10.1109/MS.2015.16 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.16)
 
 
{pagebreak}


  
* * *

| "The **Internet of Things (IoT)** has the strong potential to support a human society interacting more symbiotically with its **physical environment**. Indeed, the emergence of tiny devices that sense environmental cues and trigger actuators after consulting logic and human preferences promises a **more environmentally** aware and less wasteful society." |


* * *

|*Patrick Eugster, Vinaitheerthan Sundaram, Xiangyu Zhang, **Debugging the Internet of Things: The Case of Wireless Sensor Networks**, IEEE Software, January 2015.[^foo215]*|

[^foo215]: [DOI: 10.1109/MS.2014.132 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.132)
 
 
{pagebreak}


  
* * *

| "**System operations** (such as deployment, upgrade, and reconfiguration) **for cloud** applications are **failure prone**. These failures occur because these operations are performed through **cloud APIs** provided by cloud providers and because cloud APIs, in turn, are **failure prone**." |


* * *

|*Qinghua Lu, Xiwei Xu, Len Bass, Liming Zhu, Weishan Zhang, **A Tail-Tolerant Cloud API Wrapper**, IEEE Software, January 2015.[^foo216]*|

[^foo216]: [DOI: 10.1109/MS.2015.2 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.2)
 
 
{pagebreak}


  
* * *

| "**Microservices** is the coming together of a bunch of better practices from a number of different communities. It is a combination of great stuff from the **domain-driven-design** community around **strategic design**, **bounded context**, subdomains, how to separate out your domains, and how to partition a very big problem domain into smaller domains so that you can manage them. " |


* * *

|*Johannes Thones, **Microservices**, IEEE Software, January 2015.[^foo217]*|

[^foo217]: [DOI: 10.1109/MS.2015.11 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.11)
 
 
{pagebreak}






![](images-high-quality/2015-2.jpg)




{pagebreak}

  
* * *

| "**Technical debt** refers to maintenance obligations that software teams accumulate as a result of their actions. Empirical research has led researchers to suggest **three dimensions** along which software development teams should map their technical-debt metrics: **customer satisfaction** needs, **reliability** needs, and the **probability of technology disruption**." |


* * *

|*Narayan Ramasubbu, Chris F. Kemerer, C. Jason Woodard, **Managing Technical Debt: Insights from Recent Empirical Evidence**, IEEE Software, March 2015.[^foo218]*|

[^foo218]: [DOI: 10.1109/MS.2015.45 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.45)
 
 
{pagebreak}


  
* * *

| "A **refactoring** aims to **improve a certain quality** while **preserving others**. For example, **code refactoring** restructures code to make it more maintainable without changing its observable behavior." |


* * *

|*Olaf Zimmermann, **Architectural Refactoring: A Task-Centric View on Software Evolution**, IEEE Software, March 2015.[^foo219]*|

[^foo219]: [DOI: 10.1109/MS.2015.37 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.37)
 
 
{pagebreak}


  
* * *

| "The concept of **cloud computing** has existed for **50 years**, since the beginning of the Internet. **John McCarthy** devised the idea of **time-sharing** in computers as a utility in 1957. Since then, the concept’s name has undergone several changes: from **service bureau**, to application **service provider**, to the **Internet as a service**, to **cloud computing**, and to **software-defined datacenters**, with each name having different nuances. " |


* * *

|*Nicolas Serrano, Gorka Gallardo, Josune Hernantes, **Infrastructure as a Service and Cloud Technologies**, IEEE Software, March 2015.[^foo220]*|

[^foo220]: [DOI: 10.1109/MS.2015.43 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.43)
 
 
{pagebreak}


  
* * *

| "**Mobile deployments** are **more challenging** than Web deployments because we **don’t own the ecosystem**, so we can’t do all the things that we would normally do. And the canaries are huge. We watch **cold start**, **warm start**, the **app size**, and the numbers of photos uploaded, comments, and ads being displayed or clicked. Growth and **engagement numbers** and the **crash rate** are important to the company. If the crash rate fluctuates, we immediately take action to understand why." |


* * *

|*Bram Adams, Stephany Bellomo, Christian Bird, Tamara Marshall-Keim, Foutse Khomh, Kim Moir, **The Practice and Future of Release Engineering: A Roundtable with Three Release Engineers**, IEEE Software, March 2015.[^foo221]*|

[^foo221]: [DOI: 10.1109/MS.2015.52 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.52)
 
 
{pagebreak}


  
* * *

| "**Continuous delivery** (CD) has emerged as an auspicious **alternative** to **traditional release engineering**, promising to provide the capability to release valuable software continuously to customers." |


* * *

|*Lianping Chen, **Continuous Delivery: Huge Benefits, but Challenges Too**, IEEE Software, March 2015.[^foo222]*|

[^foo222]: [DOI: 10.1109/MS.2015.27 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.27)
 
 
{pagebreak}


  
* * *

| "**Continuous delivery** and deployment are dramatically shortening release cycles from months to hours. Cloud applications with **high-frequency releases** often rely heavily on automated tools and **cloud infrastructure APIs** to deploy new software versions." |


* * *

|*Liming Zhu, Donna Xu, An Binh Tran, Xiwei Xu, Len Bass, Ingo Weber, Srini Dwarakanathan, **Achieving Reliable High-Frequency Releases in Cloud Environments**, IEEE Software, March 2015.[^foo223]*|

[^foo223]: [DOI: 10.1109/MS.2015.23 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.23)
 
 
{pagebreak}






![](images-high-quality/2015-3.jpg)




{pagebreak}

  
* * *

| "Recently proposed **model repositories** aim to support specific needs--for example, **collaborative modeling**, the ability to use different modeling tools in software life-cycle management, tool interoperability, increased model reuse, and the integration of heterogeneous models." |


* * *

|*Juri Di Rocco, Davide Di Ruscio, Ludovico Iovino, Alfonso Pierantonio, **Collaborative Repositories in Model-Driven Engineering [Software Technology]**, IEEE Software, May 2015.[^foo224]*|

[^foo224]: [DOI: 10.1109/MS.2015.61 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.61)
 
 
{pagebreak}


  
* * *

| "An **architecture haiku** aims to capture software system architecture's most important details on **a single piece of pape**r. An architecture haiku helps development teams focus on the most essential information relevant to the architecture, provides clear guidance for construction, and encourages collaboration." |


* * *

|*Michael Keeling, **Architecture Haiku: A Case Study in Lean Documentation [The Pragmatic Architect]**, IEEE Software, May 2015.[^foo225]*|

[^foo225]: [DOI: 10.1109/MS.2015.59 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.59)
 
 
{pagebreak}


  
* * *

| "In **variant-rich** **workflow-based systems**, a major concern for process variability is the context-aware configuration of the variants. This means that context information, not users, drives process configuration. " |


* * *

|*Aitor Murguzur, Salvador Trujillo, Hong-Linh Truong, Schahram Dustdar, Oscar Ortiz, Goiuria Sagardui, **Run-Time Variability for Context-Aware Smart Workflows**, IEEE Software, May 2015.[^foo226]*|

[^foo226]: [DOI: 10.1109/MS.2015.70 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.70)
 
 
{pagebreak}


  
* * *

| "**Smart manufacturing** networks describe a production chain as a marketplace that delivers **products on demand**. In this chain, partners collaborate in product work routings that connect dispersed service-enabled systems with **resources**, **materials**, **human expertise**, and operation-equipment **combinations**." |


* * *

|*Michael P. Papazoglou, Willem-Jan van den Heuvel, Julien Etienne Mascolo, **A Reference Architecture and Knowledge-Based Structures for Smart Manufacturing Networks**, IEEE Software, May 2015.[^foo227]*|

[^foo227]: [DOI: 10.1109/MS.2015.57 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.57)
 
 
{pagebreak}


  
* * *

| "**Defect taxonomies** collect and organize experts' domain knowledge and project experience and are valuable for requirements-based testing. They provide **systematic backup** for the test design, support decisions for allocating testing resources, improve the review of requirements, and are suitable for measuring product quality." |


* * *

|*Michael Felderer, Armin Beer, **Using Defect Taxonomies for Testing Requirements**, IEEE Software, May 2015.[^foo228]*|

[^foo228]: [DOI: 10.1109/MS.2014.56 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.56)
 
 
{pagebreak}


  
* * *

| "**Docker** is a container virtualization technology. So, it’s like a very **lightweight virtual machine** VM. In addition to building containers, we provide what we call **a developer workflow**, which is really about helping people build containers and applications inside containers and then share those among their teammates." |


* * *

|*Charles Anderson, **Docker [Software engineering]**, IEEE Software, May 2015.[^foo229]*|

[^foo229]: [DOI: 10.1109/MS.2015.62 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.62)
 
 
{pagebreak}






![](images-high-quality/2015-4.jpg)




{pagebreak}

  
* * *

| "The SPOT (**Single Point of Truth**) principle says that developers should specify **key pieces of information** in one and **only one place** in their code. Unfortunately, they frequently violate this principle." |


* * *

|*Gerard J. Holzmann, **Points of Truth**, IEEE Software, July 2015.[^foo230]*|

[^foo230]: [DOI: 10.1109/MS.2015.103 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.103)
 
 
{pagebreak}


  
* * *

| "Software enables every aspect of the Web. Everything from device communication to online social networks is achievable only because of multiple lines of code. For various reasons, designing and building **security and privacy** into Web software is often **an afterthought** for most developers. This results in easily **compromised systems** that pose significant privacy and security risks to users." |


* * *

|*Tyrone Grandison, Larry Koved, **Security and Privacy on the Web [Guest editors' introduction]**, IEEE Software, July 2015.[^foo231]*|

[^foo231]: [DOI: 10.1109/MS.2015.86 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.86)
 
 
{pagebreak}


  
* * *

| "Large organizations often face difficult tradeoffs in **balancing** the need to **share information** with the need to **safeguard sensitive data**. A prominent way to deal with this tradeoff is **on-the-fly screen** masking of sensitive data in applications." |


* * *

|*Abigail Goldsteen, Ksenya Kveler, Tamar Domany, Igor Gokhman, Boris Rozenberg, Ariel Farkash, **Application-Screen Masking: A Hybrid Approach**, IEEE Software, July 2015.[^foo232]*|

[^foo232]: [DOI: 10.1109/MS.2015.75 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.75)
 
 
{pagebreak}


  
* * *

| "**Adversaries** employ sophisticated **fingerprinting** techniques to **identify Web users** and record their browsing history and Web interactions. Fingerprinting leaves no footprint on the browser and is invisible to general Web users, who often lack basic knowledge of it." |


* * *

|*Amin Faiz Khademi, Mohammad Zulkernine, Komminist Weldemariam, **An Empirical Evaluation of Web-Based Fingerprinting**, IEEE Software, July 2015.[^foo233]*|

[^foo233]: [DOI: 10.1109/MS.2015.77 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.77)
 
 
{pagebreak}


  
* * *

| "**Inner source**, the adoption and tailoring of open source development practices in organizations, is receiving increased interest." |


* * *

|*Klaas-Jan Stol, Brian Fitzgerald, **Inner Source--Adopting Open Source Development Practices in Organizations: A Tutorial**, IEEE Software, July 2015.[^foo234]*|

[^foo234]: [DOI: 10.1109/MS.2014.77 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.77)
 
 
{pagebreak}


  
* * *

| "Formal documentation can be a crucial resource for learning to how to use an **API**. However, producing **high-quality documentation** can be nontrivial. ... The three severest problems were **ambiguity**, **incompleteness**, and **incorrectness** of content." |


* * *

|*Gias Uddin, Martin P. Robillard, **How API Documentation Fails**, IEEE Software, July 2015.[^foo235]*|

[^foo235]: [DOI: 10.1109/MS.2014.80 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.80)
 
 
{pagebreak}


  
* * *

| "**Software engineers** today must be **lifelong learners** or risk finding themselves **out of a job**, with totally obsolete skills to sell." |


* * *

|*Philippe Kruchten, **Lifelong Learning for Lifelong Employment**, IEEE Software, July 2015.[^foo236]*|

[^foo236]: [DOI: 10.1109/MS.2015.97 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.97)
 
 
{pagebreak}


  
* * *

| "**Monitoring** is critical to IT system health and thus to businesses' bottom line." |


* * *

|*Josune Hernantes, Gorka Gallardo, Nicolas Serrano, **IT Infrastructure-Monitoring Tools**, IEEE Software, July 2015.[^foo237]*|

[^foo237]: [DOI: 10.1109/MS.2015.96 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.96)
 
 
{pagebreak}






![](images-high-quality/2015-5.jpg)




{pagebreak}

  
* * *

| "**Agile teams** strive to balance **short-term feature** development with **longer-term quality** concerns. These evolutionary approaches often hit a '**complexity wall**'' from the **cumulative effects** of **unplanned changes**, resulting in unreliable, poorly performing software." |


* * *

|*Stephany Bellomo, Ian Gorton, Rick Kazman, **Toward Agile Architecture: Insights from 15 Years of ATAM Data**, IEEE Software, September 2015.[^foo238]*|

[^foo238]: [DOI: 10.1109/MS.2015.35 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.35)
 
 
{pagebreak}


  
* * *

| "Two innovations are enhancing programming languages' capabilities. First, **modularity** lets you combine independently developed languages without changing their respective definitions. A language is no longer a fixed quantity; you can extend it with **domain-specific constructs** as needed. Second, projectional editing lets you **build editors and IDEs** that don't require parsers. Such editors and IDEs support a range of tightly integrated notations, including textual, symbolic, tabular, and graphical notations." |


* * *

|*Markus Voelter, Jos Warmer, Bernd Kolb, **Projecting a Modular Future**, IEEE Software, September 2015.[^foo239]*|

[^foo239]: [DOI: 10.1109/MS.2014.103 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.103)
 
 
{pagebreak}


  
* * *

| "A swift execution from idea to market has become a key competitive advantage for software companies to enable them to survive and grow in turbulent business environments. To combat this challenge, companies are using **hackathons**. A hackathon is a **highly engaging**, **continuous event** in which people in small groups produce working software **prototypes** in a limited amount of time. ... However, hackathons pose the challenge of how to transform those promising **prototypes** into **finalized products** that create revenue and real business value." |


* * *

|*Marko Komssi, Danielle Pichlis, Mikko Raatikainen, Klas Kindstrom, Janne Jarvinen, **What are Hackathons for?**, IEEE Software, September 2015.[^foo240]*|

[^foo240]: [DOI: 10.1109/MS.2014.78 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.78)
 
 
{pagebreak}


  
* * *

| "**Software adaptation** has become prominent owing to the proliferation of software in **everyday devices**. In particular, computing with the **Internet of Things** requires adaptability. Traditional software maintenance, which involves long, energy-consuming cycles, is no longer satisfactory. Adaptation is a lightweight software evolution that provides more transparent maintenance for users." |


* * *

|*Franck Barbier, Eric Cariou, Olivier Le Goaer, Samson Pierre, **Software Adaptation: Classification and a Case Study with State Chart XML**, IEEE Software, September 2015.[^foo241]*|

[^foo241]: [DOI: 10.1109/MS.2014.130 ](http://doi.ieeecomputersociety.org/10.1109/MS.2014.130)
 
 
{pagebreak}






![](images-high-quality/2015-6.jpg)




{pagebreak}

  
* * *

| "**Refactoring** changes a program's source code **without changing** its **external behavior**, typically to improve the software's design." |


* * *

|*Emerson Murphy-Hill, Don Roberts, Peter Sommerlad, William F. Opdyke, **Refactoring [Guest editors' introduction]**, IEEE Software, November 2015.[^foo242]*|

[^foo242]: [DOI: 10.1109/MS.2015.136 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.136)
 
 
{pagebreak}


  
* * *

| "**The safety issue**—that a **refactoring** shouldn’t **break working code**—was recognized as critical to industrial adoption. It also raised other interesting research issues." |


* * *

|*William G. Griswold, William F. Opdyke, **The Birth of Refactoring: A Retrospective on the Nature of High-Impact Software Engineering Research**, IEEE Software, November 2015.[^foo243]*|

[^foo243]: [DOI: 10.1109/MS.2015.107 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.107)
 
 
{pagebreak}


  
* * *

| "Developers won’t use tools that seem **unreliable**. So, the widespread use of **refactoring tools** speaks to their apparent reliability. However, they **aren’t error-free**. They work just well enough to be useful, and they break in relatively **unimportant ways**." |


* * *

|*Munawar Hafiz, Jeffrey Overbey, **Refactoring Myths**, IEEE Software, November 2015.[^foo244]*|

[^foo244]: [DOI: 10.1109/MS.2015.130 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.130)
 
 
{pagebreak}


  
* * *

| "**Refactoring** is a key approach for managing **technical debt**. In the past few years, refactoring techniques and tools have received considerable attention from researchers and tool vendors." |


* * *

|*Tushar Sharma, Girish Suryanarayana, Ganesh Samarthyam, **Challenges to and Solutions for Refactoring Adoption: An Industrial Perspective**, IEEE Software, November 2015.[^foo245]*|

[^foo245]: [DOI: 10.1109/MS.2015.105 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.105)
 
 
{pagebreak}


  
* * *

| "To **improve responsiveness**, developers often use **asynchronous programming**. In the post-PC era, **asynchronous programming** is even more in demand because mobile and wearable devices have limited resources and access the network excessively. One current development task is refactoring long-running, **blocking synchronous code** (for example, accessing the Web, a cloud, a database, or a file system) into nonblocking asynchronous code." |


* * *

|*Danny Dig, **Refactoring for Asynchronous Execution on Mobile Devices**, IEEE Software, November 2015.[^foo246]*|

[^foo246]: [DOI: 10.1109/MS.2015.133 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.133)
 
 
{pagebreak}


  
* * *

| "Although **database refactoring** has been advocated as an important area of database development, little research has studied its implications. ... The experience led to five key lessons learned: refactoring should be **automated** whenever possible, the database **catalog** is crucial, refactoring is easier when it's done **progressively**, refactoring can help **optimize** an application and streamline its code base, and refactoring related to application development requires a **complex skill set** and must be applied sensibly." |


* * *

|*Gregory Vial, **Database Refactoring: Lessons from the Trenches**, IEEE Software, November 2015.[^foo247]*|

[^foo247]: [DOI: 10.1109/MS.2015.131 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.131)
 
 
{pagebreak}


# 2016
{pagebreak}






![](images-high-quality/2016-1.jpg)




{pagebreak}

  
* * *

| "We live in a world of **unprecedented complexity** and **astonishing possibility**. We should **never forget our past**, for those who came before us in computing enabled those possibilities." |


* * *

|*Grady Booch, **Remembrance of Things Past**, IEEE Software, January 2016.[^foo248]*|

[^foo248]: [DOI: 10.1109/MS.2016.10 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.10)
 
 
{pagebreak}


  
* * *

| "The debacle with the **VW 'defeat device'** raises some unsettling questions. Are any other companies doing this, or-if we take a more cynical standpoint-how many are doing this? If they aren't, are they still using software practices almost as dubious? How do we decide **what's reasonable**, given software's extraordinary ability to give hardware its character?" |


* * *

|*Les Hatton, Michiel van Genuchten, **When Software Crosses a Line**, IEEE Software, January 2016.[^foo249]*|

[^foo249]: [DOI: 10.1109/MS.2016.6 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.6)
 
 
{pagebreak}


  
* * *

| "This year marks the 50th anniversary of the Turing Award, which was first given to **Alan Perlis**, an oft-quoted mathematician who described **the relationship** between **humans and computers** as having 'a vitality like a **gangly youth** growing out of his clothes within an **endless puberty**.' Now that our dependence on software permeates nearly every aspect of our lives, it’s time to ask ourselves where this relationship is headed and, even though software engineering is still a relatively new discipline, **how much we’ve matured**." |


* * *

|*Forrest Shull, Anita Carleton, Jeromy Carriere, Rafael Prikladnicki, Dongmei Zhang, **The Future of Software Engineering**, IEEE Software, January 2016.[^foo250]*|

[^foo250]: [DOI: 10.1109/MS.2016.8 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.8)
 
 
{pagebreak}


  
* * *

| "Tim O'Reilly: Code for America is **changing government** and changing how we think about our role as software professionals. Its work is deeply rooted in the notion that you can **no longer govern without** using **digital technology**. Technology is central to how we deliver services today and how people access them. " |


* * *

|*Andrew Moore, Tim O'Reilly, Paul D. Nielsen, Kevin Fall, **Four Thought Leaders on Where the Industry Is Headed**, IEEE Software, January 2016.[^foo251]*|

[^foo251]: [DOI: 10.1109/MS.2016.1 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.1)
 
 
{pagebreak}


  
* * *

| "To most people, “**massive systems**” probably means those systems run by NASA, airline companies, or large banks, or operating systems such as Microsoft Windows. What’s in common? They all have **complex components or subsystems**, deal with massive data, support millions of customers, require **real-time response**, and more. If they malfunction, catastrophe might ensue.  By those standards, many systems run by **today’s Internet companies** also **qualify as massive**. As the Internet grows so quickly, many Internet companies are suffering the same problems that **massive systems** have suffered. " |


* * *

|*Zhengrong Tang, Melissa Yang, Joshua Xiang, John Liu, **The Future of Chinese Software Development**, IEEE Software, January 2016.[^foo252]*|

[^foo252]: [DOI: 10.1109/MS.2016.19 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.19)
 
 
{pagebreak}


  
* * *

| "**Practitioners** must become **mediators** of the process of **creating a humane experience** and expand their practice to draw from disciplines such as **experience design**, systems thinking, **economics**, and digital strategy. They must do what they can to mitigate the **negative consequences** of technology while continuing to exploit and amplify its positive impacts." |


* * *

|*Claudia de O. Melo, Ronaldo Ferraz, Rebecca J. Parsons, **Brazil and the Emerging Future of Software Engineering**, IEEE Software, January 2016.[^foo253]*|

[^foo253]: [DOI: 10.1109/MS.2016.28 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.28)
 
 
{pagebreak}


  
* * *

| "Software is being produced so fast that its growth hinders its sustainability. **Technical debt**, which encompasses **internal software quality**, evolution and maintenance, reengineering, and economics, is growing such that its management is becoming the dominant driver of software engineering progress. It spans the **software engineering life cycle**, and its management capitalizes on recent advances in fields such as source code analysis, quality measurement, and project management. **Managing technical debt** will become an investment activity applying **economic theories**." |


* * *

|*Paris Avgeriou, Philippe Kruchten, Robert L. Nord, Ipek Ozkaya, Carolyn Seaman, **Reducing Friction in Software Development**, IEEE Software, January 2016.[^foo254]*|

[^foo254]: [DOI: 10.1109/MS.2016.13 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.13)
 
 
{pagebreak}


  
* * *

| "Almost surreptitiously, **crowdsourcing** has entered software engineering practice. **In-house development**, contracting, and outsourcing still dominate, but many development projects use crowdsourcing-for example, to squash bugs, test software, or gather alternative UI designs. Although the overall impact has been mundane so far, crowdsourcing could lead to **fundamental, disruptive changes** in how software is developed." |


* * *

|*Thomas D. LaToza, Andre van der Hoek, **Crowdsourcing in Software Engineering: Models, Motivations, and Challenges**, IEEE Software, January 2016.[^foo255]*|

[^foo255]: [DOI: 10.1109/MS.2016.12 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.12)
 
 
{pagebreak}


  
* * *

| "An evaluation of recent industrial and societal trends revealed three key factors driving **software engineering's future**: **speed**, **data**, and **ecosystems**." |


* * *

|*Jan Bosch, **Speed, Data, and Ecosystems: The Future of Software Engineering**, IEEE Software, January 2016.[^foo256]*|

[^foo256]: [DOI: 10.1109/MS.2016.14 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.14)
 
 
{pagebreak}


  
* * *

| "Today's **social-coding tools** foreshadow a transformation of the software industry, as it relies increasingly on **open libraries**, frameworks, and **code fragments**. Our vision calls for new **intelligently transparent services** that support **rapid development** of innovative products while helping developers manage risk and issuing them **early warnings** of looming failures. Intelligent transparency is enabled by an infrastructure that applies **analytics** to data from all phases of the life cycle of open source projects, from development to deployment. Such an infrastructure brings stakeholders the information they need when they need it." |


* * *

|*James Herbsleb, Christian Kastner, Christopher Bogart, **Intelligently Transparent Software Ecosystems**, IEEE Software, January 2016.[^foo257]*|

[^foo257]: [DOI: 10.1109/MS.2015.156 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.156)
 
 
{pagebreak}


  
* * *

| "We're living in a **physical world** that's **moving at the speed of software**. This means that software's trajectory will drive software engineering, not vice versa. However, software engineering is also driven by visionary corporate leaders, backed by skilled software developers." |


* * *

|*George Hurlburt, Jeffrey Voas, **Software is Driving Software Engineering?**, IEEE Software, January 2016.[^foo258]*|

[^foo258]: [DOI: 10.1109/MS.2016.22 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.22)
 
 
{pagebreak}


  
* * *

| "**Apache Mesos**, ... abstracts away many of the hassles of managing a **distributed system**. ... You don't have to think about how you're going to **get your task** to a **different machine** with Mesos. You just tell it, '**Run** this task using **these resources**; those resources are tied to a particular machine,' and then **Mesos takes care** of getting the task there, **starting** the task, and **watching** it while it's actually running on that machine. Mesos provides **primitives** that somebody building a distributed system can take advantage of. " |


* * *

|*Jeff Meyerson, **Ben Hindman on Apache Mesos**, IEEE Software, January 2016.[^foo259]*|

[^foo259]: [DOI: 10.1109/MS.2016.18 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.18)
 
 
{pagebreak}






![](images-high-quality/2016-2.jpg)




{pagebreak}

  
* * *

| "**Different ages** of humanity have required **different modes of thinking**. These modes aren't only reflections of the particular circumstances of life in each age; they're also projections of the forces that propel us to the next." |


* * *

|*Grady Booch, **The Computational Human**, IEEE Software, March 2016.[^foo260]*|

[^foo260]: [DOI: 10.1109/MS.2016.59 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.59)
 
 
{pagebreak}


  
* * *

| "A **software retrofit** can address problems of business-critical systems that are no longer maintainable." |


* * *

|*Thomas Ronzon, **Software Retrofit in High-Availability Systems: When Uptime Matters**, IEEE Software, March 2016.[^foo261]*|

[^foo261]: [DOI: 10.1109/MS.2016.49 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.49)
 
 
{pagebreak}


  
* * *

| "**Naming conventions** affect the readability of your code and the ease with which you can find your way around when you're reviewing that code. Naming conventions **aren't meant to help the compiler**. A compiler has no trouble distinguishing names, no matter how long, short, or obscure they are. But to us humans, they can matter a great deal." |


* * *

|*Gerard J. Holzmann, **Code Clarity**, IEEE Software, March 2016.[^foo262]*|

[^foo262]: [DOI: 10.1109/MS.2016.44 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.44)
 
 
{pagebreak}


  
* * *

| "Software engineering for **big data systems** is complex and faces challenges including **pervasive distribution**, write-heavy **workloads**, **variable request** loads, computation-intensive **analytics**, and high **availability**." |


* * *

|*Ian Gorton, Ayse Basar Bener, Audris Mockus, **Software Engineering for Big Data Systems**, IEEE Software, March 2016.[^foo263]*|

[^foo263]: [DOI: 10.1109/MS.2016.47 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.47)
 
 
{pagebreak}


  
* * *

| "Conventional horizontal **evolutionary prototyping** for small-data system development is inadequate and too expensive for identifying, analyzing, and mitigating risks in big data system development. RASP (**Risk-Based, Architecture-Centric Strategic Prototyping**) is a model for cost-effective, systematic risk management in agile big data system development. It uses prototyping strategically and only in areas that architecture analysis can't sufficiently address." |


* * *

|*Hong-Mei Chen, Rick Kazman, Serge Haziyev, **Strategic Prototyping for Developing Big Data Systems**, IEEE Software, March 2016.[^foo264]*|

[^foo264]: [DOI: 10.1109/MS.2016.36 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.36)
 
 
{pagebreak}


  
* * *

| "**Video data** has become the **largest source of big data.** Owing to video data's complexities, velocity, and volume, public security and other surveillance applications require efficient, intelligent runtime **video processing**." |


* * *

|*Weishan Zhang, Liang Xu, Zhongwei Li, Qinghua Lu, Yan Liu, **A Deep-Intelligence Framework for Online Video Processing**, IEEE Software, March 2016.[^foo265]*|

[^foo265]: [DOI: 10.1109/MS.2016.31 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.31)
 
 
{pagebreak}


  
* * *

| "**Big data systems** (BDSs) are complex, consisting of multiple interacting hardware and software components, such as distributed computing nodes, databases, and middleware. Any of these components can fail. Finding **the failures' root causes** is extremely laborious. Analysis of **BDS-generated logs** can speed up this process. The logs can also help improve testing processes, detect security breaches, customize operational profiles, and aid with any other tasks requiring runtime-data analysis. However, **practical challenges** hamper log analysis tools' adoption." |


* * *

|*Andriy Miranskyy, Abdelwahab Hamou-Lhadj, Enzo Cialini, Alf Larsson, **Operational-Log Analysis for Big Data Systems: Challenges and Solutions**, IEEE Software, March 2016.[^foo266]*|

[^foo266]: [DOI: 10.1109/MS.2016.33 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.33)
 
 
{pagebreak}


  
* * *

| "Many real-world data analysis scenarios require **pipelining** and integration of multiple (big) **data-processing** and **data-analytics jobs**, which often execute in heterogeneous environments, such as **MapReduce**; **Spark**; or **R, Python**, or **Bash scripts**. Such a pipeline requires much **glue code** to get data across environments." |


* * *

|*Dongyao Wu, Liming Zhu, Xiwei Xu, Sherif Sakr, Daniel Sun, Qinghua Lu, **Building Pipelines for Heterogeneous Execution Environments for Big Data Processing**, IEEE Software, March 2016.[^foo267]*|

[^foo267]: [DOI: 10.1109/MS.2016.35 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.35)
 
 
{pagebreak}


  
* * *

| "Clemens Szyperski (Microsoft), Martin Petitclerc (IBM), and Roger Barga (Amazon Web Services) answer three questions: What major challenges do you face when building **scalable, big data systems**? How do you **address these challenges**? Where should the research community focus its efforts to create **tools and approaches** for building highly reliable, scalable, big data systems?" |


* * *

|*Clemens Szyperski, Martin Petitclerc, Roger Barga, **Three Experts on Big Data Engineering**, IEEE Software, March 2016.[^foo268]*|

[^foo268]: [DOI: 10.1109/MS.2016.58 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.58)
 
 
{pagebreak}


  
* * *

| "It's also important to understand the difference between what a single programmer can do and what large teams of programmers can do. Even **the best practices of refactoring are really a joke** in the context of **a large legacy application**. Refactoring tools really don't help you with large legacies." |


* * *

|*Dave Thomas, **Innovating Legacy Systems**, IEEE Software, March 2016.[^foo269]*|

[^foo269]: [DOI: https://doi.ieeecomputersociety.org/10.1109/MS.2016.38 ](https://doi.ieeecomputersociety.org/10.1109/MS.2016.38)
 
 
{pagebreak}






![](images-high-quality/2016-3.jpg)




{pagebreak}

  
* * *

| "The next generation of software-intensive systems will be **taught instead of programmed**. This poses considerable pragmatic challenges in how we develop, deliver, and evolve them." |


* * *

|*Grady Booch, **It Is Cold. And Lonely.**, IEEE Software, May 2016.[^foo270]*|

[^foo270]: [DOI: 10.1109/MS.2016.85 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.85)
 
 
{pagebreak}


  
* * *

| "Following certain best practices for **visual communication** can help bridge the gap between IT architects and business stakeholders. These practices stem from disciplines such as **psychology**, **graphic design**, **communication science**, and **cartooning**." |


* * *

|*Jochem Schulenklopper, Eelco Rommes, **Why They Just Don't Get It: Communicating about Architecture with Business Stakeholders**, IEEE Software, May 2016.[^foo271]*|

[^foo271]: [DOI: 10.1109/MS.2016.67 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.67)
 
 
{pagebreak}


  
* * *

| "The emerging **DevOps movement** emphasizes **development and operations staff** working together **as early as possible**--sharing tools, processes, and practices that smooth the production path." |


* * *

|*Eoin Woods, **Operational: The Forgotten Architectural View**, IEEE Software, May 2016.[^foo272]*|

[^foo272]: [DOI: 10.1109/MS.2016.86 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.86)
 
 
{pagebreak}


  
* * *

| "Building a **secure system** requires **proactive**, rigorous **analysis of the threats** to which it might be exposed, followed by systematic transformation of those threats into security-related requirements." |


* * *

|*Jane Cleland-Huang, Tamara Denning, Tadayoshi Kohno, Forrest Shull, Samuel Weber, **Keeping Ahead of Our Adversaries**, IEEE Software, May 2016.[^foo273]*|

[^foo273]: [DOI: 10.1109/MS.2016.75 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.75)
 
 
{pagebreak}


  
* * *

| "**DevO**ps aims to reduce the time between **committing** a system change and placing the change **into normal production**, while ensuring **high quality**." |


* * *

|*Liming Zhu, Len Bass, George Champlin-Scharff, **DevOps and Its Practices**, IEEE Software, May 2016.[^foo274]*|

[^foo274]: [DOI: 10.1109/MS.2016.81 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.81)
 
 
{pagebreak}


  
* * *

| "Modern software-based services are implemented as distributed systems with **complex behavior** and failure modes. Many large tech organizations are using **experimentation** to verify such systems' reliability. **Netflix** engineers call this approach **chaos engineering**." |


* * *

|*Ali Basiri, Niosha Behnam, Ruud de Rooij, Lorin Hochstein, Luke Kosewski, Justin Reynolds, Casey Rosenthal, **Chaos Engineering**, IEEE Software, May 2016.[^foo275]*|

[^foo275]: [DOI: 10.1109/MS.2016.60 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.60)
 
 
{pagebreak}


  
* * *

| "When **DevOps** started gaining momentum in the software industry, one of the first service-based architectural styles to be introduced, be applied in practice, and become popular was **microservices**. Migrating **monolithic** architectures to **cloud-native** architectures such as microservices reaps many benefits, such as adaptability to technological changes and independent resource management for different system components." |


* * *

|*Armin Balalaie, Abbas Heydarnoori, Pooyan Jamshidi, **Microservices Architecture Enables DevOps: Migration to a Cloud-Native Architecture**, IEEE Software, May 2016.[^foo276]*|

[^foo276]: [DOI: 10.1109/MS.2016.64 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.64)
 
 
{pagebreak}


  
* * *

| "Wotif Group used **DevOps principles** to recover from the **downward spiral** of **manual release** activity that many IT departments face. Its approach involved the idea of '**making it easy to do the right thing**.' By defining the right thing (**deployment standards**) for development and operations teams and making it easy to adopt, Wotif drastically improved the average release cycle time." |


* * *

|*Matt Callanan, Alexandra Spillane, **DevOps: Making It Easy to Do the Right Thing**, IEEE Software, May 2016.[^foo277]*|

[^foo277]: [DOI: 10.1109/MS.2016.66 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.66)
 
 
{pagebreak}


  
* * *

| "**Interconnected computing systems** in various forms will soon permeate our lives, realizing the **Internet of Things** (IoT) and letting us enjoy novel, enhanced services that promise to improve our everyday life. Nevertheless, this new reality introduces significant challenges in terms of **performance, scaling, usability**, and **interoperability**. Leveraging the benefits of service-oriented architectures (SOAs) can help alleviate many of the issues that developers, implementers, and users alike must face in the context of the IoT." |


* * *

|*Konstantinos Fysarakis, Damianos Mylonakis, Charalampos Manifavas, Ioannis Papaefstathiou, **Node.DPWS: Efficient Web Services for the Internet of Things**, IEEE Software, May 2016.[^foo278]*|

[^foo278]: [DOI: 10.1109/MS.2015.155 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.155)
 
 
{pagebreak}


  
* * *

| "With the increasing importance, size, and complexity of **automated test suites**, the need exists for suitable methods and tools to develop, assess the quality of, and **maintain test code** (scripts) in parallel with **regular production** (application) code." |


* * *

|*Vahid Garousi, Michael Felderer, **Developing, Verifying, and Maintaining High-Quality Automated Test Scripts**, IEEE Software, May 2016.[^foo279]*|

[^foo279]: [DOI: 10.1109/MS.2016.30 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.30)
 
 
{pagebreak}


  
* * *

| "Building on **lean and agile** practices, **DevOps** means **end-to-end automation** in software development and delivery. Hardly anybody will be able to approach it with a cookbook-style approach, but most developers will benefit from better connecting the previously isolated silos of development and operations. Many **DevOps tools** exist that can help them do this." |


* * *

|*Christof Ebert, Gorka Gallardo, Josune Hernantes, Nicolas Serrano, **DevOps**, IEEE Software, May 2016.[^foo280]*|

[^foo280]: [DOI: 10.1109/MS.2016.68 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.68)
 
 
{pagebreak}






![](images-high-quality/2016-4.jpg)




{pagebreak}

  
* * *

| "**Mobile apps** increasingly constitute **complete ecosystems** to support businesses such as farming. ... Having the **right data** at the **right time** at the **right place** is crucial for high user productivity and a good user experience. In particular, **offline capability** is important but difficult. " |


* * *

|*Susanne Braun, Ralf Carbon, Matthias Naab, **Piloting a Mobile-App Ecosystem for Smart Farming**, IEEE Software, July 2016.[^foo281]*|

[^foo281]: [DOI: 10.1109/MS.2016.98 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.98)
 
 
{pagebreak}


  
* * *

| "Many organizations use **business process models** to document business operations and formalize business requirements in software-engineering projects. The **Business Process Model and Notation** (BPMN), a specification by the Object Management Group, has evolved into the **leading standard** for **process modeling**. One challenge is **BPMN's complexity**: it offers a huge variety of elements and often several representational choices for the same semantics." |


* * *

|*Henrik Leopold, Jan Mendling, Oliver Gunther, **Learning from Quality Issues of BPMN Models from Industry**, IEEE Software, July 2016.[^foo282]*|

[^foo282]: [DOI: 10.1109/MS.2015.81 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.81)
 
 
{pagebreak}


  
* * *

| "In the **mobile-app ecosystem**, **user ratings** of apps (a measure of **user perception**) are extremely important because they correlate strongly with downloads and hence revenue." |


* * *

|*Hammad Khalid, Meiyappan Nagappan, Ahmed E. Hassan, **Examining the Relationship between FindBugs Warnings and App Ratings**, IEEE Software, July 2016.[^foo283]*|

[^foo283]: [DOI: 10.1109/MS.2015.29 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.29)
 
 
{pagebreak}


  
* * *

| "A proposed **data-driven** software **quality improvement** method has three elements. First, the downstream **Customer Quality Metric** (CQM) quantifies quality as customers perceive it. On the basis of data collected after systems are deployed, it measures how serious defects affect customers. Second, the upstream Implementation **Quality Index** (IQI) measures the effectiveness of error removal during development. IQI predicts future customer quality; it has a positive correlation with CQM. Finally, **prioritization tools** and techniques help focus limited development resources on the riskiest files in the code." |


* * *

|*Randy Hackbarth, Audris Mockus, John Palframan, Ravi Sethi, **Improving Software Quality as Customers Perceive It**, IEEE Software, July 2016.[^foo284]*|

[^foo284]: [DOI: 10.1109/MS.2015.76 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.76)
 
 
{pagebreak}


  
* * *

| "**Measurement** of **software security** is an ongoing research field. **Privacy** is also becoming an imperative target as social networking and ubiquitous computing evolve and users exchange high volumes of personal information. However, security and privacy alone don't guarantee proper data protection; software must **also be dependable**." |


* * *

|*George Hatzivasilis, Ioannis Papaefstathiou, Charalampos Manifavas, **Software Security, Privacy, and Dependability: Metrics and Measurement**, IEEE Software, July 2016.[^foo285]*|

[^foo285]: [DOI: 10.1109/MS.2016.61 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.61)
 
 
{pagebreak}


  
* * *

| "**Dynamic program analysis**, such as with **profiling**, **tracing**, and **bug-finding tools**, is essential for software engineering. Unfortunately, implementing dynamic analysis for managed languages such as Java is unduly difficult and error prone because the runtime environments provide only complex low-level mechanisms." |


* * *

|*Yudi Zheng, Stephen Kell, Lubomir Bulej, Haiyang Sun, Walter Binder, **Comprehensive Multiplatform Dynamic Program Analysis for Java and Android**, IEEE Software, July 2016.[^foo286]*|

[^foo286]: [DOI: 10.1109/MS.2015.151 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.151)
 
 
{pagebreak}


  
* * *

| "A well-known adage is '**diversity brings innovation.**' Diversity can be in **culture, thinking, discipline, gender**, and many more aspects. The result is the same: the chances for creating innovation in a given context increase when diversity is involved. To some extent, this principle should also hold for **gender diversity** in software teams. Achieving gender diversity in **IT-related fields** has been a goal for decades, but still, **too few women** choose such a career. But what skills or traits assigned to **the feminine role** bring concrete advantages to software teams?" |


* * *

|*Maryam Razavian, Patricia Lago, **Feminine Expertise in Architecting Teams**, IEEE Software, July 2016.[^foo287]*|

[^foo287]: [DOI: 10.1109/MS.2015.84 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.84)
 
 
{pagebreak}


  
* * *

| "Users continue to stumble upon **software bugs**, despite developers' efforts to build and test high-quality software. Although **traditional testing** and **quality assurance** techniques are extremely valuable, software testing should pay more **attention to exploration**. Exploration can **directly apply knowledge** and learning to the core of industrial software testing, revealing more relevant bugs earlier." |


* * *

|*Juha Itkonen, Mika V. Mantyla, Casper Lassenius, **Test Better by Exploring: Harnessing Human Skills and Knowledge**, IEEE Software, July 2016.[^foo288]*|

[^foo288]: [DOI: 10.1109/MS.2015.85 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.85)
 
 
{pagebreak}






![](images-high-quality/2016-5.jpg)




{pagebreak}

  
* * *

| "**Huge industries**, from the automotive and healthcare industries to finance and entertainment, **center increasingly on software**. **Managing** such a **software business** is tough because software's ethereal nature offers infinite lucrative or catastrophic choices. The main things to manage are the business model, the **execution strategy**, the product or service, and the development process." |


* * *

|*Diomidis Spinellis, **Managing a Software Business**, IEEE Software, September 2016.[^foo289]*|

[^foo289]: [DOI: 10.1109/MS.2016.111 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.111)
 
 
{pagebreak}


  
* * *

| "**Computational humor** is a technically intriguing problem. And, in the journey to understand the theories, mechanisms, and algorithms that discern and **define funny**, we learn something about ourselves and what it means to be human." |


* * *

|*Grady Booch, **No Laughing Matter**, IEEE Software, September 2016.[^foo290]*|

[^foo290]: [DOI: 10.1109/MS.2016.127 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.127)
 
 
{pagebreak}


  
* * *

| "Developers of **systems of systems** face challenges such as **heterogeneous**, **inconsistent**, and changing elements; continuous evolution and deployment; decentralized control; and inherently **conflicting** and often **unknowable** requirements." |


* * *

|*Michael Vierhauser, Rick Rabiser, Paul Granbacher, **Monitoring Requirements in Systems of Systems**, IEEE Software, September 2016.[^foo291]*|

[^foo291]: [DOI: https://doi.ieeecomputersociety.org/10.1109/MS.2016.112 ](https://doi.ieeecomputersociety.org/10.1109/MS.2016.112)
 
 
{pagebreak}


  
* * *

| "Developers of **systems of systems (SoSs)** face challenges such as heterogeneous, inconsistent, and changing elements; continuous evolution and deployment; decentralized control; and inherently conflicting and often unknowable requirements." |


* * *

|*Michael Vierhauser, Rick Rabiser, Paul Grunbacher, **Monitoring Requirements in Systems of Systems**, IEEE Software, September 2016.[^foo292]*|

[^foo292]: [DOI: 10.1109/MS.2016.112 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.112)
 
 
{pagebreak}


  
* * *

| "**Simulation software** is important to our understanding of the universe. The intrinsic **multiphysics** aspects are spiced with a range of temporal scales and spatial scales, both of which cover **more digits** than are available in the **standard hardware**." |


* * *

|*Simon Portegies Zwart, Jeroen Bedorf, **Creating the Virtual Universe**, IEEE Software, September 2016.[^foo293]*|

[^foo293]: [DOI: 10.1109/MS.2016.113 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.113)
 
 
{pagebreak}


  
* * *

| "The **software architecture** pendulum is swinging away from traditional practices and toward **agile and continuous** practices. To be successful in this new world, architects should emphasize **products over projects**, drive architectural decisions, **understand code**, and communicate and collaborate effectively with delivery teams." |


* * *

|*Murat Erder, Pierre Pureur, **What's the Architect's Role in an Agile, Cloud-Centric World?**, IEEE Software, September 2016.[^foo294]*|

[^foo294]: [DOI: 10.1109/MS.2016.119 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.119)
 
 
{pagebreak}


  
* * *

| "**Small** and **medium-sized enterprises** depend heavily on their capability to **differentiate themselves** from their competitors through innovative approaches. **Innovation management** assumes that systematically applying strategies combined with appropriate methods and tools increases the ability to build innovative products and services. To leverage their competitive capabilities, small companies involved in software development must combine **innovation management** and **software engineering practices**." |


* * *

|*Ricardo Eito-Brun, Miguel-Angel Sicilia, **Innovation-Driven Software Development: Leveraging Small Companies' Product-Development Capabilities**, IEEE Software, September 2016.[^foo295]*|

[^foo295]: [DOI: 10.1109/MS.2016.63 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.63)
 
 
{pagebreak}


  
* * *

| "**Software providers** differ widely in **productivity and quality**. Traditional means of evaluation, such as CVs and client references, fail to separate the competent from the incompetent. **Trialsourcing**--having **multiple providers** create **sample pieces of software** for evaluation--can help clients select providers." |


* * *

|*Magne Jorgensen, **Better Selection of Software Providers through Trialsourcing**, IEEE Software, September 2016.[^foo296]*|

[^foo296]: [DOI: 10.1109/MS.2015.24 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.24)
 
 
{pagebreak}


  
* * *

| "Most companies have learned that **cost calculations** for **offshore outsourcing** shouldn't be **limited to hourly wages**. Looking at salaries alone, you could naively hope for cost reductions of up to 90 percent. However, don't underestimate the cost of **knowledge transfer**, **travel**, **attrition**, **miscommunication**, and so on. ... The offshore team's true hourly costs took three years to become comparable with those of the in-house team. Getting close to the break-even point took five years. **Learning costs** due to **offshore employee turnover** were the **primary cost** factor to get under control." |


* * *

|*Darja Smite, Rini van Solingen, **What's the True Hourly Cost of Offshoring?**, IEEE Software, September 2016.[^foo297]*|

[^foo297]: [DOI: 10.1109/MS.2015.82 ](http://doi.ieeecomputersociety.org/10.1109/MS.2015.82)
 
 
{pagebreak}


  
* * *

| "You could view **maintenance** as an impending **operational cost tsunami**, owing to seismic development activities. It’s no longer tenable to keep creating new individual solutions to the same basic problems because those solutions must be maintained as long as they live, binding expensive human resources that are constantly declining." |


* * *

|*Harry M. Sneed, Chris Verhoef, **From Software Development to Software Assembly**, IEEE Software, September 2016.[^foo298]*|

[^foo298]: [DOI: https://doi.ieeecomputersociety.org/10.1109/MS.2015.78 ](https://doi.ieeecomputersociety.org/10.1109/MS.2015.78)
 
 
{pagebreak}


  
* * *

| "In **machine learning**, a computer first learns to perform a task by studying **a training set** of examples. The computer then performs the same task with data it hasn't encountered before." |


* * *

|*Panos Louridas, Christof Ebert, **Machine Learning**, IEEE Software, September 2016.[^foo299]*|

[^foo299]: [DOI: 10.1109/MS.2016.114 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.114)
 
 
{pagebreak}


  
* * *

| "**Too many tests** is the same as **not enough tests**. In both cases it's **suboptimal**. Whether you waste time **debugging** because you don't have enough tests or you waste time **maintaining tests** that don't need to be there, at the end of the day both of those things amount to waste." |


* * *

|*Stefan Tilkov, **Jay Fields on Working with Unit Tests**, IEEE Software, September 2016.[^foo300]*|

[^foo300]: [DOI: 10.1109/MS.2016.121 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.121)
 
 
{pagebreak}






![](images-high-quality/2016-6.jpg)




{pagebreak}

  
* * *

| "Being **a good software architect** has never been easy. Changes in the software industry are making the job even more challenging. The key drivers are the rising role of software in systems and their operation; more emphasis on **reuse**, **agility**, and **testability** during software development; and several quality elements increasingly affected by architectural choices." |


* * *

|*Diomidis Spinellis, **The Changing Role of the Software Architect**, IEEE Software, November 2016.[^foo301]*|

[^foo301]: [DOI: 10.1109/MS.2016.133 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.133)
 
 
{pagebreak}


  
* * *

| "Documenting **the time dimension** part of your architecture might look like extra work. However, **anticipation** should be a large part of your job as an architect, anyway. If you **communicate your anticipation** as an evolution viewpoint or architecture roadmap, your architecture description will stay valid longer. And, you'll have a ready answer when stakeholders ask how you've addressed their change and planning concerns." |


* * *

|*Eltjo Poort, **Just Enough Anticipation: Architect Your Time Dimension**, IEEE Software, November 2016.[^foo302]*|

[^foo302]: [DOI: 10.1109/MS.2016.134 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.134)
 
 
{pagebreak}


  
* * *

| "As new and exciting healthcare applications arise that use **smart technologies**, the **Internet of Things**, **data analytics**, and other technologies, a critical problem is emerging: the potential loss of caring. Although these exciting technologies have improved patient care by allowing for better assessment, surveillance, and treatment, their use can disassociate the caregiver from the patient, essentially removing the &#x0022;care&#x0022; from healthcare. So, you can view caring as an undiscovered -ility that ranks at least as important as other well-known -ilities in healthcare systems." |


* * *

|*Nancy Laplante, Phillip A. Laplante, Jeffrey Voas, **Caring: An Undiscovered &#x0022;Super -ility&#x0022; of Smart Healthcare**, IEEE Software, November 2016.[^foo303]*|

[^foo303]: [DOI: 10.1109/MS.2016.136 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.136)
 
 
{pagebreak}


  
* * *

| "When customers visit a **Brazilian e-commerce** site and search for a product, they're likely using software developed by **Neemu**, a start-up created in **Manaus**, a city in the heart of the **Amazon rainforest**. Nowadays, millions of people throughout Brazil use this software, which demonstrates alternative economic **development in Amazonia** that has low impact on the environment." |


* * *

|*Edleno Silva de Moura, Mauro Rojas Herrera, Leonardo Santos, Tayana Conte, **When Software Impacts the Economy and Environment**, IEEE Software, November 2016.[^foo304]*|

[^foo304]: [DOI: 10.1109/MS.2016.135 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.135)
 
 
{pagebreak}


  
* * *

| "Forty years ago, **Thomas McCabe** introduced his famous **cyclomatic complexity** (CC) metric. Today, it’s still one of the **most popular and meaningful** measurements for analyzing code. " |


* * *

|*Christof Ebert, James Cain, **Cyclomatic Complexity**, IEEE Software, November 2016.[^foo305]*|

[^foo305]: [DOI: 10.1109/MS.2016.147 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.147)
 
 
{pagebreak}


  
* * *

| "**Internet scale**, the increasing rate of technology evolution, and the broad adoption of lean and agile methods have triggered a profound change in not only application and infrastructure architectures but also the **software architect**'s roles and responsibilities." |


* * *

|*Gregor Hohpe, Ipek Ozkaya, Uwe Zdun, Olaf Zimmermann, **The Software Architect's Role in the Digital Age**, IEEE Software, November 2016.[^foo306]*|

[^foo306]: [DOI: 10.1109/MS.2016.137 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.137)
 
 
{pagebreak}


  
* * *

| "The popularity of agile methods such as **Scrum** and **Kanban**, with their clear focus on **team collaboration**, threatens many roles traditionally assigned to individual experts. Some organizations are even challenging the raison d'&#x00EA;tre of the software architect role. However, researchers' experiences developing connected-vehicle software revealed **two reasons** why successful projects still often assign **architecture-related responsibilities** to individual experts acting as software architects. First, **the experts** help effectively **manage complexity**; second, they act as **knowledge multipliers** when development must scale up." |


* * *

|*Soren Frey, Lambros Charissis, Jens Nahm, **How Software Architects Drive Connected Vehicles**, IEEE Software, November 2016.[^foo307]*|

[^foo307]: [DOI: 10.1109/MS.2016.145 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.145)
 
 
{pagebreak}


  
* * *

| "**Software architects** are key assets for successful development projects. ... researchers investigated how architects at **Ericsson** were organized, their roles and responsibilities, and **the effort** they spent guarding and governing a large-scale legacy product developed by teams at multiple locations. ... the architectural decisions were centralized to a **team of architects**. The team extensively **used code reviews** to not only check the code's state but also reveal defects that could turn into maintainability problems. ... **the effort** architects spend designing architecture, guarding its integrity and evolvability, and mentoring development teams is directly related to **team maturity**." |


* * *

|*Ricardo Britto, Darja Smite, Lars-Ola Damm, **Software Architects in Large-Scale Distributed Projects: An Ericsson Case Study**, IEEE Software, November 2016.[^foo308]*|

[^foo308]: [DOI: 10.1109/MS.2016.146 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.146)
 
 
{pagebreak}


  
* * *

| "Owing to the increasing amount of **computation** in **electromechanical devices**, the role of **software architect** is often found in **embedded-systems** development. However, because computer scientists usually have limited knowledge of **embedded-systems concepts** such as **controllers**, **actuators**, and **bu**ses, embedded-software architects are often engineers with no education in software architecture basics, which is normally a topic in computer science courses." |


* * *

|*Pablo Oliveira Antonino, Andreas Morgenstern, Thomas Kuhn, **Embedded-Software Architects: It's Not Only about the Software**, IEEE Software, November 2016.[^foo309]*|

[^foo309]: [DOI: 10.1109/MS.2016.142 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.142)
 
 
{pagebreak}


  
* * *

| "**Software architects** don't just design architecture components or champion architecture qualities; they often must guide and **harmonize** the entire **community of project stakeholders**. The **community-shepherding** aspects of the architect's role have been gaining attention, given the increasing importance of complex 'organizational rewiring' scenarios such as DevOps, open source strategies, transitions to agile development, and corporate acquisitions" |


* * *

|*Damian A. Tamburri, Rick Kazman, Hamed Fahimi, **The Architect's Role in Community Shepherding**, IEEE Software, November 2016.[^foo310]*|

[^foo310]: [DOI: 10.1109/MS.2016.144 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.144)
 
 
{pagebreak}


  
* * *

| "As software systems have evolved, so has software architecture, with practices growing to meet each era's new challenges. The next phase of evolution--**intelligent connected systems**--promises to be an exciting time for **software architects**." |


* * *

|*Eoin Woods, **Software Architecture in a Changing World**, IEEE Software, November 2016.[^foo311]*|

[^foo311]: [DOI: 10.1109/MS.2016.149 ](http://doi.ieeecomputersociety.org/10.1109/MS.2016.149)
 
 
{pagebreak}


  
* * *

| "**High-maintenance code** not only is verbose but also tends to rely on unstated, poorly stated, or incompletely stated assumptions. If you want to understand that type of code, you need long chains of reasoning to figure out how and why it works, and under which conditions it could start failing when other parts of the system are updated. **The reliance on hidden assumptions** is probably the most telling feature of high-maintenance code." |


* * *

|*Gerard J. Holzmann, **Hi Maintenance**, IEEE Software, November 2016.[^foo312]*|

[^foo312]: [DOI: https://doi.ieeecomputersociety.org/10.1109/MS.2016.153 ](https://doi.ieeecomputersociety.org/10.1109/MS.2016.153)
 
 
{pagebreak}


# 2017
{pagebreak}






![](images-high-quality/2017-1.jpg)




{pagebreak}

  
* * *

| "New wiring transformed **ENIAC** into a versatile stored-program computer. **Rewiring Internet of Things infrastructures** into a **general-purpose computing fabric** can similarly change how modern computation interfaces with our environment." |


* * *

|*Diomidis Spinellis, **Software-Engineering the Internet of Things**, IEEE Software, January 2017.[^foo313]*|

[^foo313]: [DOI: 10.1109/MS.2017.15 ](http://doi.ieeecomputersociety.org/10.1109/MS.2017.15)
 
 
{pagebreak}


  
* * *

| "The proper **alignment of requirements engineering and testing** (RET) can be key to software's success. Three practices can provide effective RET alignment: using **test cases** as requirements, harvesting **trace links**, and **reducing distances** between requirements engineers and testers." |


* * *

|*Elizabeth Bjarnason, Markus Borg, **Aligning Requirements and Testing: Working Together toward the Same Goal**, IEEE Software, January 2017.[^foo314]*|

[^foo314]: [DOI: 10.1109/MS.2017.14 ](http://doi.ieeecomputersociety.org/10.1109/MS.2017.14)
 
 
{pagebreak}


  
* * *

| "No consolidated set of software engineering **best practices** for the **Internet of Things (IoT)** has yet emerged. Too often, the landscape resembles **the Wild West**, with unprepared programmers putting together IoT systems in ad hoc fashion and throwing them out into the market, often poorly tested. In addition, the academic sector is in danger of fragmenting into specialized, often unrelated research areas." |


* * *

|*Xabier Larrucea, Annie Combelles, John Favaro, Kunal Taneja, **Software Engineering for the Internet of Things**, IEEE Software, January 2017.[^foo315]*|

[^foo315]: [DOI: 10.1109/MS.2017.28 ](http://doi.ieeecomputersociety.org/10.1109/MS.2017.28)
 
 
{pagebreak}


  
* * *

| "The **Internet of Things (IoT)** is a challenging combination of **distribution and heterogeneity**. A number of software engineering solutions address those challenges in isolation, but few solutions tackle them in combination, which poses a set of concrete challenges. The **ThingML** (Internet of Things Modeling Language) approach attempts to address those challenges." |


* * *

|*Brice Morin, Nicolas Harrand, Franck Fleurey, **Model-Based Software Engineering to Tame the IoT Jungle**, IEEE Software, January 2017.[^foo316]*|

[^foo316]: [DOI: 10.1109/MS.2017.11 ](http://doi.ieeecomputersociety.org/10.1109/MS.2017.11)
 
 
{pagebreak}


  
* * *

| "Despite the progress in **Internet of Things (IoT)** research, a general software engineering approach for systematic development of IoT systems and applications is still missing. A synthesis of the state of the art in the area can help frame the **key abstractions** related to such development." |


* * *

|*Franco Zambonelli, **Key Abstractions for IoT-Oriented Software Engineering**, IEEE Software, January 2017.[^foo317]*|

[^foo317]: [DOI: 10.1109/MS.2017.3 ](http://doi.ieeecomputersociety.org/10.1109/MS.2017.3)
 
 
{pagebreak}


  
* * *

| "**Mission-critical Internet of Things (MC-IoT)** systems involve heterogeneous things from both the **digital and physical worlds**. They run applications whose failure might cause significant and possibly **dramatic consequences**, such as interruption of public services, significant business losses, and deterioration of enterprise operations. These applications require not only high **availability**, **reliability**, **safety**, and **security** but also **regulatory compliance**, **scalability**, and **serviceability**. At the same time, they're exposed to various facets of uncertainty, spanning from software and hardware variability to mission planning and execution in possibly unforeseeable environments. **Model-driven engineering** can potentially meet these challenges and better enable the adoption of MC-IoT systems." |


* * *

|*Federico Ciccozzi, Ivica Crnkovic, Davide Di Ruscio, Ivano Malavolta, Patrizio Pelliccione, Romina Spalazzese, **Model-Driven Engineering for Mission-Critical IoT Systems**, IEEE Software, January 2017.[^foo318]*|

[^foo318]: [DOI: 10.1109/MS.2017.1 ](http://doi.ieeecomputersociety.org/10.1109/MS.2017.1)
 
 
{pagebreak}


  
* * *

| "A roadmap from today's cloud-centric, data-centric IoT systems to the **Programmable World** highlights the technical challenges that deserve to be part of developer education and deserve deeper investigation beyond those IoT topics that receive the most attention today." |


* * *

|*Antero Taivalsaari, Tommi Mikkonen, **A Roadmap to the Programmable World: Software Challenges in the IoT Era**, IEEE Software, January 2017.[^foo319]*|

[^foo319]: [DOI: 10.1109/MS.2017.26 ](http://doi.ieeecomputersociety.org/10.1109/MS.2017.26)
 
 
{pagebreak}


  
* * *

| "**Microservices** are in many ways **a best-practice approach** for realizing **SOA**." |


* * *

|*Cesare Pautasso, Olaf Zimmermann, Mike Amundsen, James Lewis, Nicolai Josuttis, **Microservices in Practice, Part 1: Reality Check and Service Design**, IEEE Software, January 2017.[^foo320]*|

[^foo320]: [DOI: 10.1109/MS.2017.24 ](http://doi.ieeecomputersociety.org/10.1109/MS.2017.24)
 
 
{pagebreak}


  
* * *

| "Just as physicists infer dark matter's presence on the basis of its gravitational effects on visible matter, we can conceptualize a '**darkitecture**' that outlines visible software architectures." |


* * *

|*Balaji Prasad, **Darkitecture: The Reality Skirted by Architecture**, IEEE Software, January 2017.[^foo321]*|

[^foo321]: [DOI: 10.1109/MS.2017.7 ](http://doi.ieeecomputersociety.org/10.1109/MS.2017.7)
 
 
{pagebreak}


  
* * *

| "**Computer games** are rich, complex, and often large-scale software applications. They're a significant, interesting, and often compelling domain for innovative research in software engineering techniques and technologies. **Computer games** are progressively changing the everyday world in many positive ways. Game developers, whether focusing on entertainment market opportunities or game-based applications in nonentertainment domains such as education, healthcare, defense, or scientific research (that is, serious games), thus share a common interest in how best to engineer game software." |


* * *

|*Walt Scacchi, **Practices and Technologies in Computer Game Software Engineering**, IEEE Software, January 2017.[^foo322]*|

[^foo322]: [DOI: 10.1109/MS.2017.20 ](http://doi.ieeecomputersociety.org/10.1109/MS.2017.20)
 
 
{pagebreak}


  
* * *

| "'What is **Infrastructure as code**? There are a lot of ways to answer that. One is that automation is the “CALM” of DevOps. CALM stands for **culture, automation, learning, and measurement**. Infrastructure as Code is about the automation piece. That's how people who have been doing DevOps for a while approach it, using tools like Chef, Puppet, Ansible, and SaltStack. The philosophy behind this is that infrastructure has become like data: the physical layer has been abstracted. It's **become software**, as opposed to being a physical thing. We can use infrastructure tools the same way we use software. We can **bring in best practices from software development**, such as continuous integration CI, test-driven development, and continuous delivery CD version control systems, and apply them to managing our infrastructure. " |


* * *

|*Sven Johann, **Kief Morris on Infrastructure as Code**, IEEE Software, January 2017.[^foo323]*|

[^foo323]: [DOI: 10.1109/MS.2017.13 ](http://doi.ieeecomputersociety.org/10.1109/MS.2017.13)
 
 
{pagebreak}


# 2018
{pagebreak}






![](images-high-quality/2018-1.jpg)




{pagebreak}

  
* * *

| "Although intensive research on **software analytics** has been going on for nearly a decade, a repeated complaint in software analytics is that industrial practitioners find it **hard to apply the results** generated from data science." |


* * *

|*Ye Yang, Davide Falessi, Tim Menzies and Jairus Hihn, **Actionable Analytics for Software Engineering**, IEEE Software, January 2018.[^foo324]*|

[^foo324]: [DOI: https://doi.ieeecomputersociety.org/10.1109/MS.2017.4541039 ](https://doi.ieeecomputersociety.org/10.1109/MS.2017.4541039)
 
 
{pagebreak}


