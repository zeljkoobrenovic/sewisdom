# Part II: Patterns of Dynamics {#Patterns}

In this part of our notes we discuss our central thesis. Namely, that design complexity emerges from the instability of design activities, which, in turn, is a consequence of complex and dynamic relations among design situations, design outcomes and design resources. We believe that these dynamic relations are main sources of complexity characteristic for design activities. As mentioned in the introduction, while design situations, outcomes and resources are themselves complex structures, what makes a design activity additionally and characteristically complex are relations among these structures. Dynamics of these relations challenge designers' ability to deal with complexity as any of the structures is subject to change, in a difficult to predict ways.

We want to achieve two goals. Firstly, we want to show that, in design, it makes no sense to treat design situations, design outcomes and design resources as stable elements and in isolation of each other. Furthermore, we want to challenge the common idea that the design process moves from a problem to a solution in a linear and causal fashion. Instead, the dynamics of the network connecting design situations, design outcomes and design resources are highly diverse. Of course, there already exists a significant diversity in how these dynamics have been described in design literature. However, we still find it necessary to contribute to this ongoing debate by providing another perspective and hopefully useful, more structured model.

Secondly, we want to show that regardless of the seeming arbitrariness of interactions between design situations, outcomes and resources, it is still possible to constructively portray, investigate and discuss such dynamics. In other words, we want to argue that in many cases these dynamics show signs of "organized complexity", where some patterns may be observed. As a mean to achieve this goal, we introduce a concept of *patterns of dynamics* between elements of a design activity. A pattern is a recurring arrangement of interactions among elements of a design activity. By studying contemporary design literature, we have found several common patterns of these dynamics. It is important to note that these patterns are primarily conceptual tools. The main purpose of patterns is to support analytic and reflective thinking for practical purposes and not to serve as definite scientific definitions of existing elements.

With eleven patterns, we provide an initial categorization and description of dynamics that we have identified between design situations, outcomes and resources. We are aware that it is not possible to capture all patterns that may occur in design processes. But we do believe that, by examining findings from contemporary seminal design research, it is possible to abstract some core patterns into a format that can support discussions and a deeper understanding about design as a complex activity.

For convenience and clarity, each pattern of dynamics is described with the same format:

* a brief descriptive name,
* a “motto”,
* optional alternative names,
* a brief summary,
* a brief list of topics discussed in relation to the pattern,
* a brief description about when the pattern is desirable and undesirable, and
* a more detailed discussion based on examples from the design literature.

We structured our review of patterns, based on [our analytics model](#Model), around three “axis” of relations between “elements” of design activities:

* dynamics between design situations and outcomes,
* dynamics between design outcomes and resources,
* dynamics between design situations and resources.

Each pattern may be viewed as the description of dynamics that shape design decisions during design activities. In any design activity, designers make a number of decisions, trying to answer the following questions [(Obrenovic 2008)](#Obrenovic2011):

* How will the design process advance?
* What needs and opportunities will the design address?
* What form will the resulting outcome take?

Our patterns provide description of dynamics that influence decisions that designers make when trying to answer these questions. When we look at the result of some design activity, with a hindsight we normally can clearly describe what the design outcome is, how it has changed the original design situation, and what design resources have been used. However, a route to the design result may be very complex, and with very diverse starting points. As we will illustrate with our patterns, sometimes, we may start with a problematic situation that we want to improve. Sometimes we may not have a problematic situation but a technology that people suddenly start to use. And sometimes the sheer availability of some design resource may be the primary driver of change. And frequently, multiple of these patterns of dynamics will co-occur.


## A. Patterns of Dynamics Between Design Situations and Design Outcomes

![](images/Model_Situation_Outcome.png)

The dynamics between a design situation and a design outcome seem to be the most complex dynamics in any design activity. In the design literature, we have found several common and often interconnected views on dynamics of this relation, which we describe in the following five patterns:

* Co-Evolution of Problem-Solution,
* Solution Looking for a Problem,
* Problematic Solution,
* Boomerang, and
* Puzzle Solving.



### Co-Evolution of Problem-Solution {#CoEvolution}

**Motto**: *“If you want to change something, you need to understand it, if you want to understand something you need to change it.” ([Gravemeijer and Cobb 2006](#Gravemeijer2006))*

**Summary**: *A design situation and designer’s understanding of the design situation (problem definition) changes and evolves in parallel and under influence of design outcome and designer’s understating of potential design outcomes (design solutions).*

**Alternative names**: *Problem–Solution Flux*.

**Topics**: *problems solving, problem setting, prototyping, iterative development, agile software development, reinventing the wheel*

**Desirable**: *In most complex real-world situations and in new domains, as this pattern facilitates learning, stimulates communication among stakeholders, and minimizes the risk of failure.*

**Undesirable**: *In well-known domains, where it may lead to the "reinventing-the-wheel" and "not-invented-here" anti-patterns.*

* * *

Design authors generally agree that design situations are never clearly defined problems. Rather, the model commonly used to describe design problems and their solutions is that of a co-evolution, where understanding of what the actual problem is evolves together with designers' attempts to create a solution ([Dorst & Cross 2001](#Dorst2001)).

Donald Schön ([1983](#Schon1983)) was among first to argue that design is not a straightforward problem-solving activity. He elaborated that real-world problems do not present themselves to practitioners as givens (page 40). Rather, they must be constructed from the materials of problematic situations, which are puzzling, troubling, and uncertain[^foowicked]. Practitioners must make sense of uncertain situations that initially makes no sense. Schön emphasized that in design practice, *problem setting* is equally important as *problem solving*.

[^foowicked]: [Rittel and Webber (1973)](#Rittel1973), for instance, claimed that real-world problems are "wicked" problems, were a problem cannot be defined until a solution has been found. Such problems are also sometimes called ill-structured ([Reitman 1965](#Reitman1965); [Simon 1973](#Simon1973)) or complex ([Funke 1991](#Funke1991)). For readers interested in discussion on wicked problems in design, we recommend [Coyne's (2005)](#Coyne2005) and [Farrell & Hooker's (2013)](#Farrell2013).

Design authors also emphasize that a design situation cannot be fully understood unless some attempts have been made to change or improve the situation. Bryan Lawson, for example, claimed that many components of a design problem cannot be expected to emerge until some attempt has been made at generating solutions ([Lawson 2005: p 120](#Lawson2005)). He argued that design situations are often full of uncertainties when it comes to the objectives and their priorities. These objectives and priorities are likely to change during the design process as the solution implications begin to emerge. Lawson concluded that we should not expect a comprehensive and static formulation of design problems. Rather we should see design problems as in dynamic tension with design solutions.


Herbert Simon ([1996](#Simon1996)) stated that a goal of design might actually be to understand the problem and to generate new goals. He elaborated that the idea of final goals and a static problem definition is inconsistent with our limited ability to foretell or determine the future (page 162). Simon claimed that by designing without a fixation on final goals, and by adopting the stance to welcome new, emergent and originally unintended goals, design becomes a powerful tool for discovering new previously unforeseen goals ([Chua 2015](#Chua2015)). As an example, Simon used an extensive renewal program in the city of Pittsburgh, where a principal goal was rebuilding the center of the city, the so-called Golden Triangle. Simon noted that the main consequence of the initial step of redevelopment was to demonstrate the possibility of creating an attractive and functional central city on this site. This demonstration was followed by many subsequent construction activities that have changed the whole face of the city and the attitudes of its inhabitants. Each step of implementation created a new situation. The new situation provided a starting point for fresh design activity ([Simon 1996](#Simon1996), page 162).

Fred Brooks noted that it is really impossible for a client to specify completely, precisely, and correctly the exact requirements of a software product before trying some versions of the product ([Brooks 1995](#Brooks1995)). Brooks claimed that the most difficult part of software design is deciding precisely what to build, and went further to claim that a core service offered by a designer is not only providing a solution but helping clients to discover what they want designed ([Brooks 2010](#Brooks2010), page 23). Empirical studies of software projects confirm these observations, as badly defined system requirements are among main causes of software project failures ([Charette 2005](#Charette2005)).

Many classical design practices, such as sketching and prototyping, are mechanism that stimulate co-evolution of solutions and problems (see [Buxton 2007](#Buxton2007)). Schön and Wiggins ([1992](#Schon1992)), using the example of an architect, described that architect use sketching to engage in the "seeing-moving-seeing" sequence. This sequence consists of creating a drawing to represent an initial idea, observing a drawing, discovering "certain unintended consequences", and reacting to this discovery by further transforming the drawing[^dialecticOfSketching] (page 139). With sketching, designers can, in relatively short time and with low costs, significantly improve their understanding of a design problem and possible design solutions ([Obrenovic 2013](#Obrenovic2013)).

[^dialecticOfSketching]: Goldschmidt (1991) further articulated this process, making a distinction between *seeing-as* and *seeing-that* moves in a "dialectics of sketching".

In modern software development, a co-evolution is the primary pattern of dynamics behind the [agile software development](https://www.agilealliance.org/agile101/) movement, nowadays a mainstream software development methodology. Agile software development promotes iterative and incremental development, using continuous feedback to refine and deliver a software system. One of the central values behind agile software development is responding to change over following a plan, making explicit the expectation that requirements (problem definition) cannot be fully known in advance, and will change during the project.

Because it stimulates learning and exploration, the *[co-evolution of problem-solution](#CoEvolution)* pattern is particularly useful in new domains, for which there are little known and documented experiences. The co-evolution of problem-solution, however, may be an anti-pattern when applied in well-known domains, where it may lead to the "reinventing-the-wheel" and "not-invented-here" anti-patterns (e.g. see [Obrenovic 2017](#Obrenovic2017)). In well-known domains, there are normally lots of documented experiences and best practices, and there are often standard solutions that can reused. For example, for most organizations it is very expensive and time consuming to implement their own custom solutions for tasks such as human resources management or communication (email, messaging). Normally, it is much easier and more cost effective to adapt organizational process to use standard off-the-shelf software solutions for these tasks.

The *[co-evolution of problem-solution](#CoEvolution)* pattern may be connected to the *[puzzle solving](#PuzzleSolving)* pattern, which may occur during co-evolution of problem-solution as a way to find answers to specific well-scoped questions. The *[co-evolution of problem-solution](#CoEvolution)* pattern may also be related to the *[design-by-buzzword](#DesignByBuzzword)* pattern, where it may occur as a way to develop better understanding of useful applications for new design resources.

![Pittsburg's Golden Triangle. In 1950s, an extensive renewal program begun in the city of Pittsburgh, with a principal goal of rebuild the center of the city, the so-called Golden Triangle. Credit: U.S. National Archives and Records Administration / Wikimedia Commons.](images/Pittsburgh_Golden_Triangle.jpg)



### Solution Looking for a Problem {#SolutionLookingForProblem}

**Motto**: *“When humans possess a tool, they excel at finding new uses for it.” ([Nye 2006](#Nye2006))*

**Summary**: *Understanding of a design outcome and its possibilities leads to innovative usages of the  design outcome in situations and for problems that were not initially envisioned.*

**Topics**: *novelty, creativity, curiosity, unordinary usages of ordinary things, early adopters, bitcoin and blockchain*

**Desirable**: *As an innovation strategy, when an organization wants to be an early adopter of an emerging technology and where the organization can afford associated risks.*

**Undesirable**: *In most other situations as it requires significant investments without tangible benefits.*

* * *

In the pattern described in this section, we address examples of design activities in which there was a significant investment in the development of a design “solution”, without clear idea (or with wrong idea) about problems that these “solutions” could solve.

The *solution looking for a problem* pattern may lead to successful results because people often find new uses for existing things. David Nye [(2006)](#Nye2006) noted that when humans possess a tool, they excel at finding new uses for it. He argued that necessity is often not the mother of invention, and that in many cases the opposite was the case (page 2). The tool often exists before the problem to be solved. Nye concluded that latent in every tool are unforeseen transformations. Fred Brooks similarly noted that as a software product is found to be useful, people try it in new cases at the edge of, or beyond, the original domain ([Brooks 1995, page 12](#Brooks1995)).

Norman explored this issue as well, claiming that major innovations came from technologists who had little understanding of the problem domain ([Norman 2010](#Norman2010)). He stated that this is true for almost all of the powerful inventions that have changed society: the airplane, the automobile, the telephone, the radio, the television, the computer, the personal computer, the internet, SMS text messaging, and the cellphone. Norman claimed that with many of these inventions, the technology came first, the products second, and then the needs slowly appeared. New applications are first considered to be luxuries, after a while they become "needs," and finally, they may end up being seen as essential. In his earlier work, [Norman (2008)](#Norman2008) similarly explored how unordinary usages of ordinary products may lead to new requirements and new products. Norman provided an example of Nokia's designers, who added a penlight to some of their phones after visiting China where they noticed that people were using displays of their mobile phones as a source of light.

Nowadays, bitcoin and blockchain[^blockchain] are examples of technologies that [some see as solutions looking for a problem](https://qz.com/844507/bitcoin-and-blockchain-seem-more-and-more-like-solutions-looking-for-a-problem/). Blockchain opens a range of new possibilities for businesses in which value can be directly transferred between participants over the Internet without intermediaries or centralized points of control ([Aste et al. 2017](#Aste2017)). While many argue that the blockchain technology has enormous potential, at the time of writing of this book, practical applications of blockchain were limited. Blockchain is still looking for more practical problems to solve.

[^blockchain]: Blockchain is a technology that uses community validation to keep synchronized the content of ledgers replicated across multiple users. While blockchain derives its origins from technologies introduced decades ago, it has gained popularity with Bitcoin.

A *solution looking for a problem* normally requires significant investments without tangible benefits. This approach is normally an anti-pattern, especially for smaller organizations that invested most of their resources in the development of such solutions. The [analysis of Forbes](https://www.forbes.com/sites/groupthink/2016/03/02/top-20-reasons-why-startups-fail-infographic/), for instance, discovered that 42% of unsuccessful startups had failed due to the lack of marketing need for "solutions" they offered.

While the *solution looking for a problem* pattern introduces significant risks, it may be a successful innovation strategy. Being an early adopter of some technology may be a crucial competitive advantage. Waiting to invest in the technology after its value has been demonstrated on the market may be too late. Consequently, many organizations are investing in the development of innovative solutions not because of immediate marketing needs, but to be in a good starting position if such marketing needs appear.

The *solution looking for a problem* pattern is related to the *[co-evolution of problem-solution](#CoEvolution)* pattern because once a new usage of a design “solution” emerges in a new situation, this new situation often starts to influence further evolution of the original “solution”.


![A DynaTAC 8000X (first commercially available mobile phone from 1984). Martin Cooper of Motorola made the first publicized handheld mobile phone call on a prototype DynaTAC model on April 3, 1973. Credit: Hinman, Rachel. 2012. The Mobile Frontier. New York: Rosenfeld Media. / Flickr / CC-BY-2.0](images/first_mobile_phone.jpg)


### Problematic Solution {#ProblematicSolution}

**Motto**: *“Everything we design has the potential not only to solve problems but also to create new ones.” ([Lawson 2005](#Lawson2005))*

**Summary**: *The consequences of a design outcome create new situations that are perceived as problematic and may ask for another design to improve it. A design may become more known for the problems it caused than for the solution it provided.*

**Alternative name**: *Collateral Damage*.

**Topics**: *unexpected and undesired effects, innovative domains, expectation management, year 2000 problem*

**Desirable**: *In a very limited number of real-world situations, when a goal is to stimulate further development of some solution without immediately benefiting from it.*

**Undesirable**: *In most other real-world situations.*

* * *

Any design outcome may, in good faith, introduce unexpected and undesired effects. Design literature provides numerous examples of designers having to deal with issues of unintended consequences of their designs (e.g. [Janlert and Stolterman 2008](#Janlert2008)). Lawson nicely illustrated this issue on an example of a motorcar:

*“Design solutions are not panaceas and most usually have some undesirable effects as well as the intended good effects. The modern motor car is a wonderfully sophisticated design solution to the problem of personal transportation in a world which requires people to be very mobile over short and medium distances on an unpredictable basis. However, when that solution is applied to the whole population and is used by them even for the predictable journeys we find ourselves designing roads, which tear apart our cities and rural areas. The pollution which results have become a problem in its own right, but even the car is now beginning not to work well as it sits in traffic jams! This is a very dramatic illustration of the basic principle that everything we design has the potential not only to solve problems but also to create new ones!"* ([Lawson 2005: p 122](#Lawson2005))

![Traffic Jam in Maputo. A car is an excellent design solution to the problem of personal transportation, but when applied to the whole population it creates other problems, such as traffic jams. Credit: A Verdade / Wikimedia Commons / CC BY 2.0.](images/Chapa_traffic_jam_in_Maputo_(9717216968).jpg)

In software design, one of the most prominent examples of problems caused by previous design solutions was the “year 2000 (Y2K) problem” (e.g. [Neumann and McCullagh 1999](#Neuman1999); [Berghel 1999](#Berghel1999); [Pescio 1997](#Pescio1997)). This problem was caused by a shortcut taken by early software designers. To conserve memory space, early software designers used a solution that recorded the year using the last two digits rather than four. Computers using this system would then recognize the year 2000 as the year 1900 instead, potentially causing serious problems in many sectors. It was estimated that costs of fixing the Y2K problem exceeded $3 trillion worldwide ([Brown et al. 2000](#Brown2000)).

Spam is another example of problems created by success of messaging and social media technologies, such as email, SMS, Twitter and Facebook. Spam misuse the ease and low price of sending messages (a solution) to distribute huge volumes of messages that propagate malware, disseminate phishing exploits, and advertise illegal products. Spam messages generate significant costs for users and network operators ([Fonseca et al. 2016](#Fonseca2016)). Furthermore, spam has required significant investments in spam detection and prevention tools, which are now core tools of any messaging platform.

The problematic solution is a consequence of designers’ inability to predict all effects of design outcomes. Unexpected and undesired effects of design outcomes are more likely to appear in more innovative domains. Sometimes this is a consequence of attempts to speed up a design process, leaving insufficient time for exploration and learning (the *[co-evolution of problem-solution](#CoEvolution)* pattern). For instance, building of the Sydney Opera House, due political pressures, started too early, before final designs were completed. This forced early start led to significant later problems, such as the discovery that the podium columns were not strong enough to support the roof structure, and had to be re-built ([Murray 2004](#Murray2004)). Due to a number unexpected and unintended effects, the Sydney Opera House project was completed ten years late and with the 1,357% over-budget.

If a design outcome will be perceived as problematic is also a function of expectations. Marketing and other expectation management techniques may have a significant impact on how the design outcome will be accepted. Don Norman, in his [talk at Main Event in 2004](https://mprove.de/script/04/nng/expectationdesign.html), said that expectations are connected to hope, fear, satisfaction and anger. Norman elaborated that delivering on positive expectations leads to people experiencing pleasure. But failure to deliver on positive expectations may lead to negative emotions and seeing of a product as a failure and a problem.

The *problematic solution* pattern is related to the *[boomerang](#Boomerang)* pattern, as both are a consequence of unexpected and undesirable effects of design decisions.







### Boomerang {#Boomerang}

**Motto**: *"How can something seem so plausible at the time and so idiotic in retrospect?" (Bill Watterson, Calvin and Hobbes)*

**Summary**: *Designer’s efforts to address some situation triggers a number of reactions that radically change the original design situation often to the point that the intended design outcome or a contribution of a designer becomes obsolete or irrelevant. Such reactions would normally not occur without the design activity.*

**Alternative names**: *Ricochet, Own Goal, Shoot Oneself in the Foot*.

**Topics**: *social and political issues, mass market, competition, IBM PC, vaporware, one laptop per child (OLPC) project*

**Desirable**: *In a very limited number of real-world situations, when a goal is to stimulate further development of some solution without benefiting from it.*

**Undesirable**: *In most other real-world situations.*

* * *

The boomerang situation described dynamics of design activities in which designers’ efforts to create a design outcome lead to radical changes of the original design situation. Often such change can make intended design outcomes unsuccessful, obsolete or irrelevant.  This type of patterns of dynamics can occur particularly strongly if the design enters the mass market or can have significant influence on the society.

An example of the *boomerang* pattern is the one laptop per child (OLPC) project ([Kraemer et al. 2009](#Kraemer2009)). The OLPC project created a novel technology, the XO laptop, developed with close attention to the needs of students in poor rural areas. The project failed to reach many of its original goals, in huge part due to the aggressive reaction of the PC industry to the perceived threat of a $100 laptop being widely distributed in places the industry saw as emerging markets for its own products ([Kraemer et al. 2009](#Kraemer2009)). Soon after the OLPC project started, the PC industry begun to introduce their own educational computers with low price. This reaction of the PC industry would not occur without the OLPC project. And OLPC project probably would not start, or would have different goals if there were available educational PCs with low price.

A similar story is the development of the IBM PC ([Goth 2011](#Goth2011)). IBM underestimated the influence that PC would have for their own future. On the one hand the introduction of the PC changed the market and lead to less demand for IBM mainframe computers. And while IBM led the PC market in the beginning, as the IBM PC market grew IBM's influence diminished. In November 1985 PC Magazine stated *"Now that it has created the [PC] market, the market doesn't necessarily need IBM for the machines"*. The IBM management was also not able to predict the impact of their own design, as reported by Greg Goth:

*“And management said, ‘Okay, fine. It won't hurt anything. It's not going to mess up our business. You're not trying to replace us. You have 10 or 12 people. When you find it's really not much of anything, you'll come back and we'll do real computing.’ That was the attitude. They weren't afraid. They thought it would be, maybe, interesting. It might actually be a follow-on to Displaywriter and Datamaster. We'd sell maybe 100,000 or 200,000 units, and then we'd keep doing computing as we had always done it. So that's why they left us alone. We were off the radar.”* ([Goth 2011](#Goth2011), page 26)

The boomerang may also occur even before any observable design activity has started. The mere decision to work on some design situation may cause a number of reactions that may change that situation. Lawson noted that once a design situation has been identified it is no longer possible to avoid making a decision about design outcome ([Lawson 2005](#Lawson2005), page 115). He elaborated that in many real-life design situations it is not possible to take no action because the very process of avoiding or delaying a decision has an effect. For example, if a new road is planned but the route remains under debate for any lengthy period, the property in the region of the various routes will likely change value. Lawson concluded that procrastination as a strategy in design is deeply flawed.

In software design a similar effect we may find in ["vaporware"](https://en.wikipedia.org/wiki/Vaporware) or other practices of announcing a product that does not exist to gain a competitive advantage and keep customers from switching to competing products (e.g. [Heiko 2004](#Heiko2004); [Richard 1995](#Richard1995)). Designers' intention to address particular situation may be seriously harmed by announcements of the competitors. Such, often very simple announcements, may radically change the market and clients’ expectations. This is another example of the *boomerang* pattern, as here a design activity triggers forces that are significantly changing the design situation and are undermining the design effort. Again, these forces would not be "awakened" without the design activity.

The *boomerang* pattern is connected to the *[problematic solution](#ProblematicSolution)* pattern, as both of these patterns describe dynamics that are a consequence of unexpected and undesirable effects of design decisions. The *boomerang pattern* may lead to the *[solution looking for a problem](#SolutionLookingForProblem)* pattern if a failure to create an outcome in one design situation leads to usage of a (part of) design outcome in another situation.


![IBM Personal Computer, 1981. IBM introduction of PC changed the market and lead to less demand for IBM mainframe computers. Credit: Wikimedia Commons.](images/IBM_PC_1981.jpg)



![The U.S. Justice Department accused IBM of intentionally announcing its System/360 Model 91 computer (pictured) three years early to hurt sales of its competitor's computer. Credit: Wikimedia Commons.](images/360-91-Panel.jpg)




### Puzzle Solving {#PuzzleSolving}

**Motto**: *"A problem well put is half solved." (John Dewey, The Pattern of Inquiry)*

**Summary**: *A design situation is viewed as a clearly defined and static problem (i.e. a problem that can be clearly stated and where it is known what form the solution should have). A design outcome is seen as a solution for this problem. Design is viewed as a problem-solving activity.*

**Topics**: *problem solving, the puzzle trap, education, well-scoped design sub-tasks*

**Desirable**: *In education, as well as in a limited number of practical cases for well-scoped design sub-tasks.*

**Undesirable**: *In most real-world situations, as few design problems are clearly understood before start of a design activity.*

* * *

The *puzzle solving* patterns views designing as a problem-solving activity, an activity that leads to a solution for a clear existing problem.

This pattern is of limited use in design practice because very few of design problems are clearly understood before a design activity starts (see [Section Co-Evolution of Problem-Solution](#CoEvolution)). Lawson even called such view on design “the puzzle trap” ([Lawson 2005, page 221](#Lawson2005)). Norman ([2010](#Norman2010)) similarly explained that interactions design is sometimes naively viewed as a problem-solving activity. In such naïve view, interaction designers are capturing and understanding the hidden unmet needs of potential users/customers, that is, to identify “the” problem, with the intention to design an outcome that fulfills those needs. Norman noted that this view, however, does not reflect the everyday practice of interaction designers.

The *puzzle solving* pattern has its value in a limited number of practical cases. Many design sub-tasks can be addressed as problem solving activities. Design of computing algorithms can be viewed as an occurrence of the *puzzle solving* pattern. Here, the goal is to find an efficient algorithmic solution for a clearly defined computing problem[^LampsonNote]. In software design, [test-driven development](https://en.wikipedia.org/wiki/Test-driven_development) (TDD) promotes an approach to designing and programming of software systems through series of mini problem-solving activities. In a TDD approach, every line of new code should be written in response to a test the programmer writes just before coding ([Melnik & Jeffries 2007](#Melnik2007)). Creating such tests may be seen as an attempt to clearly define problems (problem setting). And writing new code may be seen as an attempt to find and implement a solution that is good enough to pass the test.

[^LampsonNote]: Design of algorithms, however, is only a small part of the software design, and designing whole systems requires different approach. This is nicely described in the Butler Lampson's article on system design [Lampson (1984)](#Lampson1984). Lampson argued that designing a computer system is very different from designing an algorithm because the requirements are less precisely defined, more complex, and more subject to change. The measure of success is much less clear. And the designer usually finds himself in "a sea of possibilities", where it is not clear how one choice will limit his freedom to take other choices or affect the size and performance of the entire-system.

The *puzzle solving* pattern is also useful in education, where problems can be artificially clearly defined so that students can focus on developing a particular design technique. For example, it is a common practice to teach computer programming through exercises where students need to design an algorithm for a clearly defined problem (such as calculating the number of days between two dates). Similarly, Bill Buxton ([2007](#Buxton2007)) promoted an approach to interaction design education based on copying the classics, drawing a parallel with the traditional art education. In the traditional art education, drawing antiquities (a clearly defined problem), is often used to lay the foundation for building up the student’s skills. As students are not overwhelmed by trying to deal with issues such as thinking about an appropriate subject or composition (problem setting), they can focus on learning how to master the pencil, a prerequisite to high art.


The *puzzle solving* pattern may be present within the *[co-evolution of problem-solution](#CoEvolution)* pattern, as a way to find answers to specific well-scoped questions.

![A jigsaw puzzle. Solving clearly defined problems, such as puzzles, is often seen as an anti-pattern in design, but may have the value in education. Credit: MeHe / pixabay.](images/puzzle.jpg)



## B. Patterns of Dynamics Between Design Outcomes and Resources

![](images/Model_Outcome_Technique.png)

Similar to the dynamics between design situations and outcomes, the dynamics between design outcomes and design resources are in design literature described as complex and bidirectional. The way the design process is set up when it comes to steps, phases, and activities has direct consequences on what can potentially be designed. On the other hand, design outcome may also influence design resources. We discuss the following patterns of dynamics:

* Resource Signature,
* Outcome Signature, and
* Design-by-Buzzword.



### Resource Signature {#ResourceSignature}

**Motto**: *"Every contact leaves a trace." (Edmond Locard)*

**Summary**: *Design resources, as well as the way how working with these resources is organized, are leaving a typical signature on a design outcome. It is often possible to guess, from the design
outcome, which design resources were used, and/or how the working with the resources was organized.*

**Alternative name**: *Design Style*.

**Topics**: *constraints, consistency, templates, frameworks, convention-over-configuration, Conway's Law*

**Desirable**: *In situations where consistency among design outcomes is important.*

**Undesirable**: *In complex real-world situations and in new domains where it may lead to unnecessary limited or complex solutions.*

* * *

The characteristics of design resources directly influence the design outcome’s form and possibilities. This influence can happen at all levels, from simple design tools to complex organizational structures. Selection of design materials, for instance, obviously leaves a clear signature on a design outcome. But all design resources, including tools, methods and organizational structures supporting a design activity may leave a typical signature on a design outcome.

At the tool level, the resource signature pattern is a consequence of strengths and limitations of used design tools. Design tools empower designers but at the same time they may constraint designers’ actions. These constraints often leave a typical signature on a design outcome. Mary Collins, in her post ["Web Design Trends: Why Do All Websites Look the Same?"](https://www.friday.ie/journal/why-do-all-websites-look-the-same/) noted that many of the modern websites style-wise look very similar: "*large full width background image or video in the header, overlaid text, followed by a block of short text, and then the obligatory icon columns*". Collins argued that this uniformity has its origins in popularity of UI frameworks, in particular [Bootstrap](http://getbootstrap.com/), as well as availability of pre-designed website themes, such as those in [WordPress](https://wordpress.com/).

![The screenshot of several popular WordPress themes with similar styles.](images/wordpress-themes.jpg)


In software design, developers need to use a number of complex software frameworks and libraries. These frameworks often have recommended  ways of working and their own conventions. Many software frameworks follow the [convention-over-configuration](https://en.wikipedia.org/wiki/Convention_over_configuration) approach, making it easier to do things that follow particular conventions. Sometimes, such frameworks are called ["opinionated" frameworks](https://stackoverflow.com/questions/802050/what-is-opinionated-software) as they embed and promote "opinions" about how things should be done. Such "opinionated" frameworks encourage designers into doing things their way. By design, such frameworks are leaving a very strong signature on a design outcome. For example, [Maven](https://en.wikipedia.org/wiki/Apache_Maven), one of the most popular software project management tools, strongly encourages applications to follow standard Maven directory structure and file name conventions. In practice that means that virtually all Maven projects will have a very similar source code organization. While this may be limiting in some cases, the significant advantage is that anyone who worked on one Maven project, will be able to easier find their way in another Maven project.


One advantage of the design signature pattern is that it facilitates consistency and better understandability of design outcomes. Myers argued that since all user interfaces created with the same tool will be similar, such tools help achieving a consistent look and feel ([Myers et al. 2000](#Myers2000)). For instance, [Bootstrap](http://http://getbootstrap.com/) and [Google Material Design](https://material.google.com/) are frameworks for creating unified user experiences across diverse platforms and devices. While being very flexible, these frameworks come with a number of predefined elements and resources, such as material icons, which can give applications a distinctive Bootstrap or Google material look and feel. This consistent look and feel, in turn, can make it easier for users to reuse their experiences from other applications across diverse channels.

Having design tools that impose strong constraints, while limiting designers, also can simplify design of new design outcomes. Tools without such constraints may lead designers to create unnecessarily complex and difficult to use designs. This issue is nicely illustrated in the Nielsen’s 2010 report on usability of iPad applications:

*“The first crop of iPad apps revived memories of Web designs from 1993, when Mosaic first introduced the image map that made it possible for any part of any picture to become a UI element. As a result, graphic designers went wild: anything they could draw could be a UI, whether it made sense or not. It's the same with iPad apps: anything you can show and touch can be a UI on this device. There are no standards and no expectations."* ([Nielsen 2010](#Nielsen2010))

The main disadvantage of using tools with predefined elements is that they constraint the design outcome and may limit options and creativity of designers. Websites that use predefined templates may lack clear distinction in style from other sites, which may cause user dissatisfaction or users' perception of the company as unoriginal or amateurish. Consequently, tools with less constraints may lead to more innovative designs. As argued by [Shneiderman et al. (2007)](#Shneiderman2007), the success of [Flash](https://en.wikipedia.org/wiki/Adobe_Flash) user interface tool was partially based on lack of predefined widgets. It stimulated innovative designs because it encouraged designers to explore different ways to control the interaction, instead of just using buttons and scroll bars. We may argue that lack of predefined elements in a user interface was a typical signature of the Flash tool.

The *resource signature* pattern may also occur as a consequence of individual designer's background and preferences. In his examination of forces that generate a style in architecture, Chiu-Shui Chan ([2001](#Chan2001)) argued that, what we see as an architectural style, is not only a similarity of physical features in a designed object. Rather, a style also reflects designers' personal aspects, including operations of cognitive mechanisms, utilization of repeated procedures, personal preference for certain images, and manipulation of certain seasoned design knowledge. Designers have their own unique sets of skills and experiences, and often they have developed their own design styles. Moreover, sometimes a designer may be invited to design something exactly because of this style.

The resource signature pattern may also be visible at the level of design processes and organizations. Established processes and organizational structures may influence the form of design outcomes. Melvin Conway, in what is nowadays known as *the Conway's law*, stated that organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations ([Conway 1968](#Conway1968)[^fooConwayLink]). For instance, two software modules A and B cannot interface correctly with each other unless the designer and implementer of A communicates with the designer and implementer of B. Similarly, [Bass et al. (2012)](#Bass2012) reported a case in which a software architect was asked by the management to add a database component to the software solution, not because of its suitability, but because the database department of the company was overstaffed and underworked and they needed something to do (page 59). [MacCormack et al. 2012](#MacCormack2012) explored the duality between product and organizational architectures, highlighting the impact of organizational design decisions on the technical structure of the artifacts that these organizations develop.


![Illustration of the Conway's Law. Credit: Martin Fowler (https://martinfowler.com/articles/microservices.html).](images/conways-law.jpg)


The resources signature pattern is a consequence of inertia (resistance to change) of design resources. Consequently, the *resource signature* pattern can be summarized as follows. If some things can be created without (or with minimal) changes of design resources (or with minimal changes of the ways how these resources are used) than these things are more likely to be found in a design outcome. The resistance to change of design resources is not necessarily a problem. Having stable tools, habits, and organizational structures often makes designing easier, more predictable and faster. Such inertia may be a design decision, for example, if the goal is to create consistent design outcomes. But such inertia may happen implicitly, for instance, due to sheer size and complexity of used resources. Social dynamics in design teams and organizations also contribute to this pattern, such as in the case of the Conway's law. As noted by James Coplien ([1999](#Coplien1999)) in his discussion of Conway's law, "*[software] architecture is not so much about the software, but about the people who write the software. The core principles of architecture, such as coupling and cohesion, aren't about the code. The code doesn't 'care' about how cohesive or decoupled it is; ... But people do care about their coupling to other team members.*" The resistance to change means that the resources may be difficult or costly to change, often leading to an easier option of design outcome adaptations. However, too much inertia may lead to situations where design outcome becomes unnecessarily constraint or complex.

The *resource signature* pattern is related to the *[outcome signature](#OutcomeSignature)* pattern, as design resources may get their "signature" form as a result of the need to support efficient creation of certain types of design outcomes. The *resource signature* pattern is also related to the *[resource conformity](#ResourceConformity)* pattern, as adopting popular design resources with established best-practices, also means accepting particular constraints and ways of working with these resources.

[^fooConwayLink]: [http://www.design.caltech.edu/erik/Misc/Conway.html](http://www.design.caltech.edu/erik/Misc/Conway.html)






### Outcome Signature {#OutcomeSignature}

**Motto**: *"We are what we repeatedly do." (Will Durant, The Story of Philosophy)*

**Summary**: *Design resources are adapted to a design outcome, sometimes to the point that the form and organization of design resources reflects in many aspects the intended shape of the outcome.*

**Topics**: *specialization, inverse Conway's law, work optimization*

**Desirable**: *In situations where efficiency of design work is important.*

**Undesirable**: *In complex real-world situations and in new domains where it may limit designers' ability to apply other approaches.*

* * *

The structure of design outcomes may influence the tools, methods, processes and whole organizations that build such outcomes. As in the case of the *[resource signature](#ResourceSignature)* pattern, this adaptation can happen at all levels, from individual design tools to complex organizational structures.

Design tools often need to be adapted to create a particular design outcome. For example, many software design tools are configurable so that frequently used functions are more easily accessible (e.g. via shortcuts or toolbar buttons). In this way, the configured tool becomes optimized for particular tasks, making these tasks easier, and other more difficult. This tool configuration is a signature that a design outcome leaves on a design resource.

Working on a particular types of design outcomes, also leads to improvements of designers’ skills and knowledge. Working with the same tool to create similar design outcomes (e.g. mobile applications, web applications), will lead designers to develop a specific set of skills, biased at efficient creation of such design outcomes. Once such skills are developed, designers are much more efficient in creating new similar design outcomes. This, in turn, may lead to other positive consequences, such as more rapid prototyping and more iterations of iterative design that is a crucial component of achieving high-quality user interfaces ([Myers et al. 2000](#Myers2000); [Nielsen 1993](#Nielsen1993)).

The *outcome signature* pattern also happens at the process and organizational levels. [Bass et al. (2012)](#Bass2012), for instance, argued that software design often describes not only the structure of the design outcome, but that it can engrave the structure of the development project and sometimes the structure of the entire organization (page 33). They elaborated that a normal method for dividing up the labor is to assign to different groups different portions of the system to construct. Such work-breakdown structure in turn dictates units of planning, schedule and budget; inter-team communication channels; configuration control and file-system organization; test plans and procedures; and even minutiae such as how the project internet is organized and who sits with whom at the company picnic. Sam Newman similarly provides an example of an organizational structure that grew up around the product  architecture [(Newman 2005, page 201)](#Newman2015).

*Outcome signature* may be a consequence of a success of a product and the need to maintain and support the product in the long term. Bill Buxton ([2007](#Buxton2007)) claimed that, while the worst thing that can happen to a new product is that it is a failure, the second worst thing that can happen is that it is a huge success (page 208). Buxton elaborated that the more successful a product, the more of them are out there and the longer the company, clients, and successors have to live with the design and architectural decisions that were made. To be able to maintain and support successful products, organizations need to make long-term adaptations and optimizations. While such products may be profitable, they may also be a burden on the organization. Long-lived systems tend to grow in size and complexity over the time, and maintenance and support of such systems tend to consume more and more of the organization's resources. This may limit the ability of the organization to do other things and innovate. Adam Schneider, for instance, [noted](http://deloitte.wsj.com/cio/2013/10/01/when-companies-become-prisoners-of-legacy-systems/) that many companies are prisoners of their legacy systems, which prevent companies from surging ahead in the marketplace, introducing new products, moving into new geographies, or expanding services to customers on new platforms.


The *outcome signature* pattern is related to the *[resource signature](#ResourceSignature)* pattern. Adaptations of design resources to support efficient creation of certain types of design outcomes, often leads to long-term changes of these design resources. These long-term changes, in turn, may affect the form of new design outcomes in new projects where the same resources are used. The *outcome signature* pattern is also related to the *[resource commitment](#ResourceCommitment)* pattern. Having tools, skills, and organizational structures optimized for creating a particular type of a design outcome, may encourage designers to reuse their tools and skills in new design situations. But this optimization may also lead to the *[cherry picking](#CherryPicking)* pattern, and stimulate designers to choose only those situations where a specific type of design outcome is required.

![Hammer-heads optimized for different purposes. Credit: Wikimedia Commons.](images/hammerheads.jpg)



### Design-by-Buzzword {#DesignByBuzzword}

**Motto**: *"Projects that do not capitalize on new opportunities will generally find their products unable to compete." [Boehm and Bhuta (2008)](#Boehm2008)*

**Summary**: *A designer is joining a growing trend in using some technology, often in an opportunist way. New opportunities of particular design resources are shaping the design outcome.*

**Alternative name**: *Opportunistic Design*.

**Topics**: *exploiting new opportunities, hype, trends, end-user development and meta-design*

**Desirable**: *In fast-changing domains where capitalization on new opportunities is a crucial competitive advantage.*

**Undesirable**: *In many real-world situations and in well-known domains where it may lead to unnecessary complex solutions.*

* * *

Design-by-buzzword is a form of dynamics between design outcomes and design resources where designers use a design situation as an opportunity to try out some novel or upcoming design resource (e.g. [Ncube et al. 2008](#Ncube2008)).

Design-by-buzzword is a consequence of technology developments, designer’s creativity in using and applying new resources, as well as changing expectations of users who are constantly learning about technology advances. Introduction an iPhone, for instance, radically changed user’s expectations of mobile applications ([e.g. see "How iPhone Changed the World"](http://www.cultofmac.com/103229/how-iphone-changed-the-world/)).


![The iPhone family. Introduction an iPhone radically changed user’s expectations of mobile applications. Credit: Apple.](images/iPhone-Family_US-EN-PRINT.jpg)


New technology opportunities are one of the main reasons for constant change of designs, especially in software design. [Boehm and Bhuta (2008)](#Boehm2008) argued that software projects that do not capitalize on new opportunities will generally find their products unable to compete. Earlier [Brooks (1995)](#Brooks1995) noted that new opportunities in technology are one of the main drivers behind constant changes of software designs: “*If not new computers, then at least new disks, new displays, new printers come along; and the software must be conformed to its new vehicles of opportunity*” (page 12).

In the *design-by-buzzword* pattern, the primary driver for usage of some resources is the "hype" and high expectations of some new trend. Such usage is normally not directly driven by the requirements of the situation or experiences in using the resource in similar situations. Nowadays, bitcoin and blockchain technologies are examples of such a hype. Many, primary financial institutions, are investing in these technologies, but actual value and practical utility of these technologies is still unclear.


Design-by-buzzword is driven by novelty rather than experience. The lack of experiences means that there are no clear guidelines and best practices, which may lead to unnecessary complex projects that are more likely to fail. Roy Thomas Fielding ([2000)](#Fielding2000) noted that software projects often begin with adoption of the latest "fad" in architectural design. Only later, if at all, it is discovered whether or not the system requirements call for such an architecture. As price for using some latest "fad" may be high, and usage of new resources may lead to more unexpected and undesired effects, projects based on the *design-by-buzzword* pattern are more likely to fail.

The *design-by-buzzword* pattern is related to the *[solution looking for a problem](#SolutionLookingForProblem)* pattern as new opportunities embedded in an innovative design outcome may lead to usages of this outcome in new situations. The *[co-evolution of problem-solution](#CoEvolution)* pattern may also be related to the *design-by-buzzword* pattern as a way to develop better understanding of useful applications for new design resources.


## C. Patterns of Dynamics Between Design Situations and Design Resources

![](images/Model_Situation_Technique.png)

Design situations and design resources are related in a number of ways. A designer is often pictured as a craftsman, someone who picks and chooses tools freely based on the situation and grounded in a judgment of overall benefits from using a specific resource ([Stolterman 2008](#Stolterman2008b)). Many of these factors are influenced by the specifics of the design situation at hand, and the designer has limited influence on them. Budget limitations, for instance, can influence the selection of materials and consequently tools and processes to work with these materials. The deadline imposed by clients may restrict the number of design iterations and limit the amount of testing and evaluation. Size and criticality of a situation may ask for different software development approaches (e.g. [Cockburn 2000](#Cockburn2000)).

The choice of design resources is never trivial and never a sole function of the situation requirements. The ‘benefits’ of using some tools also depend on the level of skill and mastery required, external pressure about standards, personal style of expression. The designer is also almost never in full control about which resources will be used and how they will be adapted to a particular situation.

We discuss the following patterns of these dynamics between design resources and situations:

* Resource Conformity,
* Resource Commitment, and
* Cherry Picking.


### Resource Conformity {#ResourceConformity}

**Motto**: *"When in Rome, do as the Roman's do."*

**Summary**: *To minimize risks, in a new design situation designers use popular and proven resources with established best practices. Such conformity may be driven by positive experiences of
others in similar situations, mere popularity of design resources, or mandatory requirements. The usage of a design resource further contributes to establishment and popularity of the resource and its usage in new design situations.*

**Topics**: *popularity, compliance, communities, fashion, peer pressure, legal requirements, education*

**Desirable**: *When conformity is mandatory, or when designers can benefit from joining a broader community.*

**Undesirable**: *In new domains where there are no established best practices, or in domains where capitalization on new opportunities is crucial.*

* * *

In the *resource conformity* pattern, designers select popular and proven resources with established best practices. In this pattern, the selection of design resources is primarily driven by external factors, such as experiences of others, popularity, or regulations.


The main driver behind conforming to established resources and best practices is the wish to minimize risks. Established and popular design resources and previous projects where such resources have been used provide some evidence that the design resources are suitable for particular situations. Consequently, a common strategy to select design resources is to look at successful design projects addressing similar situations, and to use the same resources.

Resource conformity has a number of practical advantages for designers. Well known tools usually have strong communities of practitioners and plenty of learning resources, enabling a designer to easier and in more predictable fashion master the resource usage. Resource conformity also has advantages for organizations, as it is easier to find new employees for popular tools.

Mere popularity of some design tool or methodology is often the main reason for its usage. For instance, while there are hundreds of libraries and frameworks for development of web user interfaces, at the time of writing of this book, most new web user interfaces are build using few most popular frameworks: React, Angular and Bootstrap. In the domain of graphic design, similarly there are hundreds of available tools, but most designers use [Adobe](http://www.adobe.com) tools (e.g. Photoshop, Illustrator and InDesign) by far the most popular graphic design tools, often described as *de facto* industry standard for graphics editing.

The most popular design resources are often introduced at schools and universities, further contributing to the popularity and widespread use of these resources. Adobe, for example, offers [educational resources and discounts](http://www.adobe.com/education.edu.html) on their products for teachers and students. In software engineering schools, Java, one of the most popular programming languages, has often used as the first programming languages that students learn ([Hadjerrouit 1998](#Hadjerrouit1998)). Before that, popularity of C++ in industry has led to it being often used for teaching as well ([Kölling (1999)](#Kolling1999)).

Usage of some resources also influences the future development of that resource. By using and buying a particular resource, designer’s increase the popularity of the resource and the profit of the producer, which can further stimulate the use of the tool. Successful projects are good references for resources used in them, and may be the main reason why others will select these resources for new projects.

Conformity may also be a result of legal and other regulations. Physical materials, for instance, need to satisfy a number of regulations about safety and environmental impact and there is often a limited list of "certified" or recommended materials. Here conformity is often more than a question of style. Failure to use recommended materials may have serious consequences and put lives of people in danger, as in the case of fire safety standards. In software design, many companies also have a list of approved resources, tools or libraries that are allowed to be used. Security concerns are often the main driver for these limitations. For instance, in 2017 the US Government banned Kaspersky Security software, limiting designers of network and application security to other options.

Designers may conform to usage of some resources due to fear of legal and other consequences. Harrison ([2004](#Harrison2004)) for instance, argued that if a software system fails and customers sue, it may be viewed as negligence if the designer’s organization did not follow best practices. For this argument, Harrison draw a parallel between software design and criminal trial. In a criminal trial (at least in the US), the failure to follow an established best practice  could result in an acquittal.

The *resource conformity* pattern is particularly useful in standard, well-known domains. As discussed in the *[co-evolution of problem-solution](#CoEvolution)* pattern, designing custom solutions may lead to "reinventing-the-wheel" and "not-invented-here" anti-patterns. In well-established domains, there are often standard solutions that can be reused with minimal modifications.

Resource conformity also has its downsides. One negative issue is that by using established and proven resources, designers may not capitalize on some new emerging technology. As discussed in the *[design-by-buzzword](#DesignByBuzzword)*  pattern, projects that do not capitalize on new opportunities may find their products unable to compete. Another negative issue is the [vendor lock-in](https://en.wikipedia.org/wiki/Vendor_lock-in), as designers and customers may become too dependent on a vendor for products and services, and are unable to use another vendor without substantial switching costs. Popular tools may also constrain a designer as they need to stay relevant for a number of users and may decide to focus on developing only the most common features.

The *resource conformity* pattern is related to the *[resource commitment](#ResourceCommitment)* pattern, as successful usages of some new design resources require some level of commitment. Design organizations may also commit to using some standard or popular resource. The *resource conformity* pattern is also related to the *[cherry picking](#CherryPicking)* pattern, because a wish to avoid risks may lead design organizations to work only in situations where proven resources with established best practices can be applied.


![Three examples of buildings in the Amsterdam School style, a style of architecture popular from 1910 through about 1930 in the Netherlands. Buildings of the Amsterdam School are characterized by brick construction with complicated masonry with a rounded or organic appearance, relatively traditional massing, and the integration of an elaborate scheme of building elements inside and out. Credit: Amsterdam Municipal Department for the Preservation and Restoration of Historic Buildings and Sites (bMA) / Wikimedia Commons.](images/Amsterdamse school.jpg)






### Resource Commitment {#ResourceCommitment}

**Motto**: *“It is a poor craftsman that blames his tools.”*

**Summary**: *In a new design situation designers use tools they committed to beforehand.*

**Topics**: *learning, standardization of work, tool development, "eating its own dog food", "if all you have is a hammer, everything looks like a nail"*

**Desirable**: *When designers want to master resource usage or further improve the resource itself.*

**Undesirable**: *In complex real-world situations where over-commitment may lead to worse design outcomes and lost opportunities compared to the situation where some other resources are used.*

* * *

The *resource commitment* pattern is a form of dynamics of design activities in which, in a new design situation, designers commit beforehand to using a particular resource, and persists in the usage of the resource even when they experience problems and difficulties.

Designers may commit to and persist in using a particular resource due to a number of reasons. Such commitment, for instance, can facilitate development of design skills. Learning to use a new design tool requires time and effort, and initial results may be discouraging. Without the commitment and persistence, a designer may give up learning too early, and never master the tool.

Most design companies have a set of their standard or recommended resources. If a whole organization commits to using a particular resource, it may have a positive effect on its operations. Many people will share the same knowledge and skills, learn from each other, and in general easier communicate and collaborate. [Ken Britton](http://queue.acm.org/detail.cfm?id=3131240), for instance, argued for the value of keeping the number of technologies organizations use to a minimum, so that the organizations can more easily train new people, maintain code, and support moves between teams.

A special case of the resource commitment pattern is the “*eating its own dog food*” pattern ([Harrison 2006](#Harrison2006)). To demonstrate confidence in their products, many design companies are forcing themselves to use their own products. A famous example is the 1980’s memo sent by the Apple Computer’s president Michael Scott asking employees to stop using typewriters and instead use Apple's own word processing software ([Ditlea 1981](#Ditlea1981)).

An over-reliance on a familiar resource has its downsizes, famously expressed as *“if all you have is a hammer, everything looks like a nail”*. Each tool and process comes with different concepts and abstractions, giving designers “lenses” through which they can view the design situation. If these “lenses” are too focused, designers may over-emphasize the parts of the situation that fit nicely in their process or their tool, and under-emphasize the parts where there is a less obvious match. Or designers may create unnecessary complex solutions (e.g. see [Plauger 1992](#Plauger1992), and discussion on the [Second-System Effect](https://en.wikipedia.org/wiki/The_Mythical_Man-Month#The_second-system_effect) in [Brooks 1995](#Brooks1995)). In software design, there is a similar notion of a silver bullet or golden hammer, "*a familiar technology or concept applied obsessively to many software problems*" ([Brown et al. 1998: p 111](#Brown1998)). Unified Modeling Language (UML) and Extensible Markup Language (XML) are examples of technologies that have been used almost “obsessively” in software design, even though in some cases such tools were not effective or sufficient (see [Bell 2004](#Bell2004); [Wilde and Glushko 2008](#Wilde2008)).

In all of these patterns there is the pre-commitment to some resource. On a positive side, this commitment may enable development of mastery in resource's usage and stimulate improvements of the resource itself. On the negative side, the over-commitment may lead to worse design outcomes and lost opportunities.

The *resource commitment* pattern is related to the *[resource conformity](#ResourceConformity)* pattern, as design organizations may commit to using some resource out of conformity. The *resource commitment* pattern is related to the *[cherry picking](#CherryPicking)* pattern, because a designer may choose situations in which resources he committed to may be more easily applied.



![Mike Scott Memo - No More Typewriters. Credit: archive.org](images/Apple_Memo_No_Typewriters.jpg)





### Cherry Picking {#CherryPicking}

**Motto**: *"Do one thing and do it well."*

**Summary**: *Design situations are selected based on how easily they can be approached with preferred or available resources. Other situations are avoided.*

**Topics**: *focusing usage of resources, work efficiency, minimizing risks*

**Alternative names**: *Low-Hanging Fruits, Selective Design*.

**Desirable**: *In new domains where there are plenty of opportunities and/or little competition, or when an organization needs to focus usage of scarce resources.*

**Undesirable**: *In many complex real-world situations as it may stimulate solving easy instead of important problems.*

* * *

In domains where designers can choose a design situation to work on, they may select, or cherry pick, a situation based on how easily it can be approached with the resources that designers are familiar and comfortable with (e.g. [Stolterman and Pierce 2012](#Stolterman2012)). Many designers may decide to specialize, and avoid involving in unfamiliar situations where they may not be able to use familiar resources.

Cherry picking may have positive effect on operations and success of designers and their organizations. [Ries and Ries (2002)](#Ries2002), for instance, claimed that companies are likely to be more successful if they focus their energies on one specific skill instead of trying to master a number of different ones (page 8). Limitation in resources may also stimulate designers to select situations where they expect more benefits or have less risk of failure. In [the business context](https://strategicthinker.wordpress.com/cherry-picking/) “cherry-picking” is used as a practice to identify and target the most profitable customers in a market, rather than serving them all. Cherry-picking the most attractive customers is a common approach for startups, since they can focus their limited resources and not disperse them over the whole segment. In [the financial world](http://www.investopedia.com/terms/c/cherrypicking.asp), "cherry picking" is also used as a strategy by investors to choose investments that have performed well within another portfolio in anticipation that the trend will continue. Here, cherry picking reduces the amount of time required for researching stocks because the pool of securities in which investors pick from is significantly narrowed.

Cherry picking also may have negative effects. One problem is that by cherry picking designers may be solving issues that are less relevant for the client. In domains where a rigor in applying a particular methodology is valued more than the practical value of a design outcome, such as in academic environments, this issue can be even more elaborate and sometimes negative. [Greenberg and Buxton 2008](#Greenberg2008), for example, argued that the [ACM CHI conference](https://sigchi.org/conferences/) has a methodology bias, where certain kinds of methods are considered more ‘correct’ and thus acceptable than others, with the consequence that people now likely generate ‘research questions’ and ‘designs’ that are amenable to a chosen method, rather than the other way around: “*That is, they choose a method perceived as ‘favored’ by review committees, and then find [cherry pick] or fit a problem to match it. … That is, researchers first choose the method (e.g., controlled study) and then concoct a problem that fits that method.*” In this case the domain and selection of situations that are of interest for that domain (in this example the interaction design domain) is more influenced and shaped by the tools and methods that researchers like than by the importance of the problems.

The *cherry picking* pattern is related to the *[resource commitment](#ResourceCommitment)* pattern, because a designer may choose situations in which resources he committed to may be more easily applied. The *cherry picking* pattern is also related to the *[resource conformity](#ResourceConformity)* pattern, because a wish to avoid risks may lead design organizations to work only in situations where proven resources with established best practices can be applied.


![Cherry picking. Designers may choose problems based on their specialization or due to resource limitations. Credit: Charles Nadeau / Wikimedia Commons / CC-BY-2.0.](images/cherry_picking.jpg)



## D. Emergence of Complex Patterns of Dynamics

*"Every place is given its character by certain patterns of events that keep on happening there."* (Christopher Alexander, The Timeless Way of Building)

The patterns of dynamics of design activities may facilitate describing complex dynamics between elements of design activities as a combination of several higher-level arrangements of such dynamics. With patterns, we can describe, compare, and contrast, diverse and complex design activities in similar terms and on a higher level of abstraction.

We can, for instance, talk about some typical combination of patterns. When a new situation appears, designers’ attempt to change that situation may lead to the *[co-evolution of problem-solution](#CoEvolution)* pattern. Novel or better resources may be needed for this situation, which will lead designers to change their way of working and to the emergence of the *[outcome signature](#OutcomeSignature)* pattern. Through *[resource commitment](#ResourceCommitment)* and *[eating its own dog food](#ResourceCommitment)* patterns the new resources can further develop and gain popularity. Once stable and popular the resources may become a *de facto* standard, and lead to the *[resource conformity](#ResourceConformity)* pattern. The *[resource conformity](#ResourceConformity)* may lead to the *[resource signature](#ResourceSignature)* pattern. The *[resource signature](#ResourceSignature)* pattern, on the other hand may trigger a reaction of customers wanting something new and original, which may result in new design situations.

The patterns of dynamics may be useful to discuss different levels of difficulties of design. Or, to paraphrase the Christopher Alexander's quote, we can argue that every design activity is given its character by patterns of dynamics that keep on happening there. Similar to [Gero (1990)](#Gero1990), we may talk about routine design vs. innovative / creative design,  later generally considered more difficult. In routine designs, designers normally have better defined situations and they are using familiar and proven tools. There we may primarily expect to see the *[resource commitment](#ResourceCommitment)* pattern and possibly the *[puzzle solving](#PuzzleSolving)* pattern, with little of other patterns occurring. Routine design may also be the consequence of the *[cherry picking](#CherryPicking)* pattern. In innovative designs, on the other hand we may expect to see the *[co-evolution of problem-solution](#CoEvolution)* pattern, with possibly the *[design-by-buzzword](#DesignByBuzzword)* and *[solution looking for a problem](#SolutionLookingForProblem)* patterns. Innovative / creative design is also more likely to lead to the *[boomerang](#Boomerang)* and *[problematic solution](#ProblematicSolution)* patterns, as we are dealing with more novel and unknown elements.

The patterns of dynamics strongly suggest that designers need techniques to estimate both the short-term and long-term impacts of design. In this aspect, we support the view of [Penzenstadler et al. (2014)](#Penzenstadler2014), who argued that software designers could considerably improve civilization’s sustainability by taking into account not just the first-order impacts of software systems but also their second- and third-order impacts. We believe that our framework, could support such reasoning. The patterns illustrate that design activities have both a short-term and long-term dynamics. The short-term dynamics are normally localized within a particular project, and are occurring in a limited period of time. The long-term dynamics are occurring over a longer period of time and among multiple projects. For example, the *[co-evolution of problem-solution](#CoEvolution)* pattern is normally intrinsic to the design activity and people involved in it, and the pattern is occurring during a concrete project. The *[boomerang](#Boomerang)* pattern, on the other hand is primarily a consequence of indirect interactions though a number of elements outside the main design activity. Some patterns reflect both short-term and long-term dynamics. For example, the *[eating its own dog food](#ResourceCommitment)* pattern has immediate short-term effect on the project where it is being used, but it also promotes particular design resources, which, on the long-term, may influence many other design projects.


![The formation of complex symmetrical and fractal patterns in snowflakes exemplifies emergence in a physical system. In philosophy, systems theory, science, and art, emergence is whereby larger entities arise through interactions among smaller or simpler entities such that the larger entities exhibit properties the smaller/simpler entities do not exhibit. Credit: Wikimedia Commons.](images/SnowflakesWilsonBentley.jpg)


