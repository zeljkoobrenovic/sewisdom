# Part II: Patterns of Dynamics {#Patterns}

In this part of our notes, we discuss our central thesis. Namely, that design activites are characterized by inherent instability - complex and dynamic relations among design situations, design outcomes and design resources. We believe that these active ties are primary sources of complexity characteristic for design activities. As mentioned in the introduction, while design situations, outcomes, and resources are themselves complex structures, what makes a design activity additionally and characteristically complex are relations among these structures. Dynamics of these relations challenge designers' ability to deal with complexity as any of the structures are subject to change, in a difficult to predict ways.

We want to achieve two goals. Firstly, we want to show that, in design, it makes no sense to treat design situations, design outcomes and design resources as stable elements and in isolation of each other. Furthermore, we want to challenge the conventional idea that the design process moves from a problem to a solution linearly and causally. Instead, the dynamics of the network connecting design situations, design outcomes, and design resources are highly diverse. Of course, there already exists a significant diversity in how design literature describes these dynamics. However, we still find it necessary to contribute to this ongoing debate by providing another perspective and hopefully useful, more structured model.

Secondly, we want to show that regardless of the seeming arbitrariness of interactions between design situations, outcomes, and resources, it is still possible to constructively portray, investigate and discuss such dynamics. In other words, we want to argue that in many cases these dynamics show signs of "organized complexity," where we may observe some patterns. As a mean to achieve this goal, we introduce a concept of *patterns of dynamics* between elements of design activities. A pattern is a recurring arrangement of interactions among elements of design activities. By studying contemporary design literature, we have found several common patterns of these dynamics. It is important to note that these patterns are primarily conceptual tools. The purpose of patterns is to support analytic and reflective thinking for practical purposes and not to serve as strict scientific definitions of existing elements.

The patterns of dynamics illustrate how people deal with ambiguity, uncertainty, and complexity when they attempt to change the world. As such, these patterns are universal to all design disciplines. Design disciplines may differ in which situations they address, which outcomes they create and which resources they use. But the way how people deal with ambiguity, uncertainty, and complexity is cross-disciplinary. Consequently, we have found examples of all patterns of dynamics in all of the design disciplines we analyzed.

With eleven patterns, we provide an initial categorization and description of dynamics that we have identified between design situations, outcomes, and resources. We are aware that it is not possible to capture all patterns that may occur in design processes. By examining findings from contemporary seminal design research, we abstracted some core patterns into a format that can support discussions about design complexity.

None of the described patterns is universally good or bad. Each pattern may be desirable in one situation, and undesirable in another. Patterns may be a consequence of a conscious effort to create particular design dynamics, or they may occur accidentally.

For convenience and clarity, we describe each pattern of dynamics with the same format:

* a brief descriptive name,
* a “motto,”
* optional alternative names,
* a summary,
* a short list of topics related to the pattern,
* a brief description of when the pattern is desirable and undesirable, and
* a more detailed discussion based on examples from the design literature.

We structured our review of patterns, based on [our analytics model](#Model), around three “axis” of relations between “elements” of design activities:

* dynamics between design situations and outcomes,
* dynamics between design outcomes and resources,
* dynamics between design situations and resources.

Each pattern may be viewed as the description of dynamics that shape design decisions during design activities. In any design activity, designers make many choices, trying to answer the following questions [(Obrenovic 2008)](#Obrenovic2011):

* How will the design process advance?
* What needs and opportunities will the design address?
* What form will the resulting outcome take?

Our patterns describe dynamics that influence decisions that designers make when trying to answer these questions. When we look at the result of some design activity, with hindsight, we usually can describe what the design outcome is, how it has changed the original design situation, and what design resources have been used. However, a route to the design result may be very complicated, and with very diverse starting points. As we will illustrate with our patterns, sometimes, we may start with a problematic situation that we want to improve. Sometimes we may not have a problem to solve but a technology that people suddenly start to use. And sometimes the sheer availability of some design resource may be the primary driver of change. And frequently, multiple of these patterns of dynamics will co-occur.


## A. Patterns of Dynamics Between Design Situations and Design Outcomes

![](images/Model_Situation_Outcome.png)

The dynamics between of a design situation and a design outcome seem to be the most extensive in any design activity. In the design literature, we have found several common and often interconnected views on dynamics of this relation, which we describe in the following five patterns:

* Co-Evolution of Problem-Solution,
* Puzzle Solving,
* Solution Looking for a Problem,
* Pandora's Box, and
* The Force Awakens.



### Co-Evolution of Problem-Solution {#CoEvolution}

**Motto**: *“If you want to change something, you need to understand it, if you want to understand something you need to change it.” ([Gravemeijer and Cobb 2006](#Gravemeijer2006))*

**Summary**: *A design situation and designer’s understanding of the design situation (problem definition) changes and evolves in parallel and under the influence of design outcome and designer’s understating of potential design outcomes (design solutions).*

**Alternative names**: *Problem–Solution Flux*.

**Topics**: *problems solving, problem setting, prototyping, iterative development, agile software development, reinventing the wheel*

**Desirable**: *In most complex real-world situations and new domains, as this pattern facilitates learning, stimulates communication among stakeholders, and minimizes the risk of failure.*

**Undesirable**: *In well-known domains, where it may lead to the "reinventing-the-wheel" and "not-invented-here" anti-patterns.*

* * *

Design authors generally agree that design situations are never clearly defined problems. Instead, the model commonly used is that of a co-evolution  ([Dorst & Cross 2001](#Dorst2001)). In this model designers' understanding of what the actual problem is evolving together with their attempts to create a solution.

Donald Schön ([1983](#Schon1983)) was among first to argue that design is not a straightforward problem-solving activity. He elaborated that real-world problems do not present themselves to practitioners as givens (page 40). Instead, problem understanding must be constructed from the materials of problematic situations, which are puzzling, troubling, and uncertain[^foowicked]. Practitioners must make sense of unclear descriptions of situations that initially makes no sense. Schön emphasized that in design practice, *problem setting* is as crucial as *problem solving*.

[^foowicked]: [Rittel and Webber (1973)](#Rittel1973), for instance, claimed that real-world problems are "wicked" problems, were a problem cannot be defined until a solution has been found. Such problems are also sometimes called ill-structured ([Reitman 1965](#Reitman1965); [Simon 1973](#Simon1973)) or complex ([Funke 1991](#Funke1991)). For readers interested in discussion on wicked problems in design, we recommend [Buchanan 1992](#Buchanan1992), [Coyne's (2005)](#Coyne2005) and [Farrell & Hooker's (2013)](#Farrell2013).

Design authors also emphasize that a design situation cannot be fully understood unless some attempts have been made to change or improve the situation. Bryan Lawson, for example, claimed that many components of a design problem could not be expected to emerge until some attempt has been made at generating solutions ([Lawson 2005: p 120](#Lawson2005)). He argued that design situations are often full of uncertainties when it comes to the objectives and their priorities. These goals and priorities are likely to change during the design process as the solution implications begin to emerge. Lawson concluded that we should not expect a comprehensive and static formulation of design problems. Instead, we should see design problems as in dynamic tension with design solutions.


Herbert Simon ([1996](#Simon1996)) stated that a goal of design might be to understand the problem and to generate new goals. He elaborated that the idea of final goals and a static problem definition is inconsistent with our limited ability to foretell or determine the future (page 162). Simon claimed that by designing without a fixation on final goals, and by adopting the stance to welcome new, emergent and originally unintended goals, design becomes a powerful tool for discovering new previously unforeseen goals ([Chua 2015](#Chua2015)). As an example, Simon used an extensive renewal program in the city of Pittsburgh, where a principal goal was rebuilding the center of the town, the so-called Golden Triangle. Simon noted that the main consequence of the initial step of redevelopment was to demonstrate the possibility of creating an attractive and functional central city on this site. This demonstration was followed by subsequent construction activities that have changed the whole face of the city and the attitudes of its inhabitants. Each step of implementation created a new situation. The new situation provided a starting point for fresh design activity ([Simon 1996](#Simon1996), page 162).

Fred Brooks noted that it is impossible for a client to specify completely, precisely, and correctly the exact requirements of a software product before trying some versions of the product ([Brooks 1995](#Brooks1995)). Brooks claimed that the most challenging part of software design is deciding what to build. He went further to argue that a core service offered by a designer is not only providing a solution but helping clients to discover what they want ([Brooks 2010](#Brooks2010), page 23). Empirical studies of software projects confirm these observations, as inadequately defined system requirements are among leading causes of software project failures ([Charette 2005](#Charette2005)).

Classical design practices, such as sketching and prototyping, are mechanisms that stimulate co-evolution of solutions and problems (see [Buxton 2007](#Buxton2007)). Schön and Wiggins ([1992](#Schon1992)), using the example of an architect, described that architect use sketching to engage in the "seeing-moving-seeing" sequence. This sequence consists of creating a drawing to represent an initial idea, observing a drawing, discovering "certain unintended consequences," and reacting to this discovery by further transforming the drawing[^dialecticOfSketching] (page 139). With sketching, designers can, in relatively short time and with low costs, significantly improve their understanding of a design problem and possible design solutions ([Obrenovic 2013](#Obrenovic2013)).

[^dialecticOfSketching]: Goldschmidt (1991) further articulated this process, making a distinction between *seeing-as* and *seeing-that* moves in a "dialectics of sketching."

In modern software development, a co-evolution is the primary pattern of dynamics behind the [agile software development](https://www.agilealliance.org/agile101/) movement, nowadays a mainstream software development methodology. Agile software development promotes iterative and incremental development, using continuous feedback to refine and deliver a software system. One of the central values behind agile software development is *responding to change over following a plan*. This approach makes explicit the expectation that requirements (problem definition) cannot be fully known in advance, and will change during the project.

Because it stimulates learning and exploration, the *co-evolution of problem-solution* pattern is particularly useful in new domains, for which there are little known and documented experiences. The co-evolution of problem-solution, however, may be an anti-pattern when applied in well-known areas, where it may lead to the "reinventing-the-wheel" and "not-invented-here" anti-patterns (e.g., see [Obrenovic 2017](#Obrenovic2017)). In well-known domains, there usually are lots of documented experiences and best practices, and there are often standard solutions that can be reused. For example, for most organizations, it is costly and time-consuming to implement their custom solutions for tasks such as human resources management or communication (email, messaging). Typically, it is much easier and more cost-effective to adapt the organizational process to use standard off-the-shelf software solutions for these tasks.

The *co-evolution of problem-solution* pattern may be connected to the *[puzzle solving](#PuzzleSolving)* pattern. There it may occur during co-evolution of problem-solution as a way to find answers to specific well-scoped questions. The *[co-evolution of problem-solution](#CoEvolution)* pattern may also be related to the *[design-by-buzzword](#DesignByBuzzword)* pattern. There it may occur as a way to develop a better understanding of useful applications for new design resources.

![Pittsburg's Golden Triangle. In the 1950s, an extensive renewal program began in the city of Pittsburgh, with a principal goal of rebuild the center of the town, the so-called Golden Triangle. Credit: U.S. National Archives and Records Administration / Wikimedia Commons.](images/Pittsburgh_Golden_Triangle.jpg)



### Puzzle Solving {#PuzzleSolving}

**Motto**: *"A problem well put is half solved." (John Dewey, The Pattern of Inquiry)*

**Summary**: *A design situation is viewed as a clearly defined and static problem (i.e., a problem that can be clearly stated and where it is known what form the solution should have). A design outcome is seen as a solution for this problem. Design is viewed as a problem-solving activity.*

**Topics**: *problem-solving, the puzzle trap, education, well-scoped design sub-tasks, test-driven development*

**Desirable**: *In education, as well as in a limited number of practical cases for well-scoped design sub-tasks.*

**Undesirable**: *In most real-world situations, because few design problems are fully understood before the start of design activity.*

* * *

The *puzzle solving* patterns views design as a problem-solving activity, an activity that leads to a solution for a precisely defined existing problem.

This pattern is of limited use in design practice because very few of design problems are fully understood before a design activity starts (see [Section Co-Evolution of Problem-Solution](#CoEvolution)). Lawson even called such view on design “the puzzle trap” ([Lawson 2005, page 221](#Lawson2005)). Norman ([2010](#Norman2010)) similarly explained that interactions design is sometimes naively viewed as a problem-solving activity. In such naïve view, interaction designers are capturing and understanding the hidden unmet needs of potential users/customers. The intention of designers is then to design an outcome that fulfills those requirements. Norman noted that this view, however, does not reflect the everyday practice of interaction designers.

The *puzzle solving* pattern has its value in a limited number of practical cases. A designer can approach some of the design sub-tasks as problem-solving activities. Design of computing algorithms, for example, can be viewed as an occurrence of the *puzzle solving* pattern. Here, the goal is to find an efficient algorithmic solution for a precisely defined computing problem[^LampsonNote]. In software design, [test-driven development](https://en.wikipedia.org/wiki/Test-driven_development) (TDD) promotes an approach to designing and programming of software systems through series of mini problem-solving activities. In a TDD approach, a developer should write every line of new code in response to a test the developer writes just before coding ([Melnik & Jeffries 2007](#Melnik2007)). Creating such tests may be seen as an attempt to define a problem (problem setting). And writing new code may be seen as an attempt to find and implement a solution that is good enough to pass the test.

[^LampsonNote]: Design of algorithms, however, is only a small part of the software design, and designing whole systems requires a different approach. Butler Lampson nicely described this issue in his article on system design [Lampson (1984)](#Lampson1984). Lampson argued that designing a computer system is very different from developing an algorithm because the requirements are less precisely defined, more complex, and more subject to change. The measure of success is much less clear. And the designer usually finds himself in "a sea of possibilities," where it is not clear how one choice will limit his freedom to take other decisions or affect the size and performance of the entire system.

Teachers can also use the *puzzle solving* pattern in education, where problems can be artificially clearly defined so that students can focus on developing a particular design technique. For example, it is a common practice to teach computer programming through exercises where students need to design an algorithm for an explicitly defined problem (such as calculating the number of days between two dates). Similarly, Bill Buxton ([2007](#Buxton2007)) promoted an approach to interaction design education based on copying the classics, drawing a parallel with the traditional art education. In traditional art education, drawing antiquities (a clearly defined problem), is often used to lay the foundation for building up the student’s skills. In such exercises, students are not overwhelmed by trying to deal with issues such as thinking about an appropriate subject or composition (problem setting). Instead, they can focus on learning how to master the pencil, a prerequisite to high art.


The *puzzle solving* pattern may be present within the *[co-evolution of problem-solution](#CoEvolution)* pattern, as a way to find answers to specific well-scoped questions.

![A jigsaw puzzle. Solving problems, such as puzzles, is often seen as an anti-pattern in design but may have the value in education. Credit: MeHe / pixabay.](images/puzzle.jpg)




### Solution Looking for a Problem {#SolutionLookingForProblem}

**Motto**: *“When humans possess a tool, they excel at finding new uses for it.” ([Nye 2006](#Nye2006))*

**Summary**: *Understanding of a design outcome and its possibilities leads to innovative usages of the  design outcome in situations and for problems that were not initially envisioned.*

**Topics**: *novelty, creativity, curiosity, unordinary usages of ordinary things, early adopters, bitcoin, and blockchain*

**Desirable**: *As an innovation strategy, when an organization wants to be an early adopter of emerging technology and where the organization can afford associated risks.*

**Undesirable**: *In most other situations as it requires significant investments without tangible benefits.*

* * *

In this section we address examples of design activities where there was a significant investment in the development of a design “solution,” but without clear idea (or with the wrong idea) about the problem that such “solution” should solve.

The *solution looking for a problem* pattern may lead to successful results because people often find new uses for existing things. David Nye [(2006)](#Nye2006) noted that when humans possess a tool, they excel at finding new applications for it. He argued that necessity is often not the mother of invention and that in many cases the opposite was the case (page 2). The tool usually exists before the problem to be solved. Nye concluded that latent in every tool is unforeseen transformation. Fred Brooks similarly noted that as a software product is found to be useful, people try it in new cases at the edge of, or beyond, the original domain ([Brooks 1995, page 12](#Brooks1995)).

Norman explored this issue as well, claiming that many major innovations came from technologists who had little understanding of the problem domain ([Norman 2010](#Norman2010)). He stated that this is true for almost all of the outstanding inventions that have changed society: the airplane, the automobile, the telephone, the radio, the television, the computer, the personal computer, the internet, SMS text messaging, and the cellphone. Norman claimed that with these inventions the technology came first, the products second, and then the needs slowly appeared. New applications are first considered to be luxuries, after a while they become "needs," and finally, they may end up being seen as essential. In his prior work, [Norman (2008)](#Norman2008) similarly explored how unordinary usages of ordinary products may lead to new requirements and new products. Norman provided an example of Nokia's designers. They added a penlight to some of their phones after visiting China where they noticed that people were using displays of their mobile phones as a source of light.

Nowadays, bitcoin and blockchain[^blockchain] are examples of technologies that [some see as solutions looking for a problem](https://qz.com/844507/bitcoin-and-blockchain-seem-more-and-more-like-solutions-looking-for-a-problem/). Blockchain opens a range of new possibilities for businesses in which value needs to be directly transferred between participants over the Internet without intermediaries or centralized points of control ([Aste et al. 2017](#Aste2017)). While proponents argue that the blockchain technology has enormous potential, practical applications of blockchain were limited. The blockchain technology is still looking for more practical problems to solve.

[^blockchain]: Blockchain is a technology that uses community validation to keep synchronized the content of ledgers replicated across multiple users. While blockchain derives its origins from techniques introduced decades ago, it has gained popularity with Bitcoin.

A *solution looking for a problem* requires typically significant investments without tangible benefits. This approach is usually an anti-pattern, especially for smaller organizations that invested most of their resources in the development of such solutions. The [analysis of Forbes](https://www.forbes.com/sites/groupthink/2016/03/02/top-20-reasons-why-startups-fail-infographic/), for instance, discovered that 42% of unsuccessful startups had failed due to the lack of marketing need for "solutions" they offered.

While the *solution looking for a problem* pattern introduces significant risks, it may be a successful innovation strategy. Being an early adopter of some technology may be a crucial competitive advantage. Waiting to invest in the technology after its value has been demonstrated on the market may be too late. Consequently, organizations are investing in the development of innovative solutions, not because of immediate marketing needs, but to be in a good starting position if such marketing needs appear.

The *solution looking for a problem* pattern is related to the *[co-evolution of problem-solution](#CoEvolution)* pattern. Once a new usage of a design “solution” emerges in a new situation, this new situation may start to influence further evolution of the original “solution.”


![A DynaTAC 8000X (first commercially available mobile phone from 1984). Martin Cooper of Motorola made the first publicized handheld mobile phone call on a prototype DynaTAC model on April 3, 1973. Credit: Hinman, Rachel. 2012. The Mobile Frontier. New York: Rosenfeld Media. / Flickr / CC-BY-2.0](images/first_mobile_phone.jpg)


### Pandora's Box {#ProblematicSolution}

**Motto**: *“Everything we design has the potential not only to solve problems but also to create new ones.” ([Lawson 2005](#Lawson2005))*

**Summary**: *The consequences of a design outcome create new situations that are perceived as problematic and may ask for another design to improve it. A design outcome may become more known for the problems it caused than for the solution it provided.*

**Alternative name**: *Problematic Solution, Collateral Damage*.

**Topics**: *unexpected and undesired effects, innovative domains, expectation management, the year 2000 problem*

**Desirable**: *In a limited number of real-world situations, when a goal is to stimulate further development of some solution without immediately benefiting from it.*

**Undesirable**: *In most other real-world situations.*

* * *

Any design outcome may, in good faith, introduce unexpected and undesired effects. Design literature provides numerous examples of designers having to deal with issues of unintended consequences of their designs (e.g. [Janlert and Stolterman 2008](#Janlert2008)). Lawson nicely illustrated this issue on an example of a motorcar:

*“Design solutions are not panaceas and most usually have some undesirable effects as well as the intended good effects. The modern motor car is a wonderfully sophisticated design solution to the problem of personal transportation in a world which requires people to be very mobile over short and medium distances on an unpredictable basis. However, when that solution is applied to the whole population and is used by them even for the predictable journeys, we find ourselves designing roads, which tear apart our cities and rural areas. The pollution which results have become a problem in its own right, but even the car is now beginning not to work well as it sits in traffic jams! This is a very dramatic illustration of the basic principle that everything we design has the potential not only to solve problems but also to create new ones!"* ([Lawson 2005: p 122](#Lawson2005))

![Traffic Jam in Maputo. A car is an excellent design solution to the problem of personal transportation, but when applied to the whole population it creates other problems, such as traffic jams. Credit: A Verdade / Wikimedia Commons / CC-BY 2.0.](images/Chapa_traffic_jam_in_Maputo_(9717216968).jpg)

In software design, one of the most prominent examples of problems caused by previous design solutions was the “the year 2000 (Y2K) problem” (e.g. [Neumann and McCullagh 1999](#Neuman1999); [Berghel 1999](#Berghel1999); [Pescio 1997](#Pescio1997)). A shortcut taken by early software designers cause this problem. To conserve memory space, early software designers used a solution that recorded the year using the last two digits rather than four. Computers using this system would then recognize the year 2000 as the year 1900 instead, potentially causing severe problems in many sectors. It was estimated that costs of fixing the Y2K problem exceeded $3 trillion worldwide ([Brown et al. 2000](#Brown2000)).

Spam is another example of problems created by the success of messaging and social media technologies, such as email, SMS, Twitter, and Facebook. Spam misuse the ease and low price of sending messages (a solution) to distribute huge volumes of messages that propagate malware, disseminate phishing exploits, and advertise illegal products. Spam messages generate significant costs for users and network operators ([Fonseca et al. 2016](#Fonseca2016)). Furthermore, spam has required significant investments in spam detection and prevention tools, which are now core tools of any messaging platform.

The pandora's box pattern is a consequence of designers’ inability to predict all effects of design outcomes. Unexpected and undesired effects of design outcomes are more likely to appear in more innovative domains. Sometimes this is a consequence of attempts to speed up a design process, leaving insufficient time for exploration and learning (the *[co-evolution of problem-solution](#CoEvolution)* pattern). For instance, construction of the Sydney Opera House, due political pressures, started too early, before final designs were completed. This forced early start led to significant later problems. For instance, constructors discovered that the podium columns were not strong enough to support the roof structure, and had to be re-built ([Murray 2004](#Murray2004)). Due to a number unexpected and unintended effects, the Sydney Opera House project was completed ten years late and with the 1,357% over-budget.

If people will perceive a design outcome as problematic is also a function of their expectations. Marketing and other expectation management techniques may have a significant impact on how people will accept the design outcome. Don Norman, in his [talk at Main Event in 2004](https://mprove.de/script/04/nng/expectationdesign.html), said that expectations are connected to hope, fear, satisfaction, and anger. Norman elaborated that delivering on positive expectations leads to people experiencing pleasure. But failure to deliver on positive expectations may result in negative emotions and perception of a product as problematic.

The *pandora's box* pattern is related to the *[force awakens](#Boomerang)* pattern, as both are a consequence of unexpected and undesirable effects of design decisions.







### The Force Awakens {#Boomerang}

**Motto**: *"How can something seem so plausible at the time and so idiotic in retrospect?" (Bill Watterson, Calvin, and Hobbes)*

**Summary**: *Designer’s efforts to address some situation triggers reactions that radically change the original design situation. Often such reactions make the intended design outcome or a contribution of a designer obsolete or irrelevant. Such responses would typically not occur without the design activity.*

**Alternative names**: *Boomerang, Ricochet, Own Goal, Shoot Oneself in the Foot*.

**Topics**: *social and political issues, mass market, competition, IBM PC, vaporware, one laptop per child (OLPC) project*

**Desirable**: *In a limited number of real-world situations, when a goal is to stimulate further development of some solution without benefiting from it.*

**Undesirable**: *In most other real-world situations.*

* * *

The force awakens pattern described dynamics of design activities in which designers’ efforts to create a design outcome lead to radical changes of the original design situation. Often such change can make intended design outcomes unsuccessful, obsolete or irrelevant.  This type of patterns of dynamics can be very elaborate if the design enters the mass market or can have a significant influence on the society.

An example of the *force awakens* pattern is the "one laptop per child" (OLPC) project ([Kraemer et al. 2009](#Kraemer2009)). The OLPC project created a novel technology, the XO laptop, developed with close attention to the needs of students in poor rural areas. The plan failed to reach many of its original goals, in huge part due to the aggressive reaction of the PC industry. The PC industry perceived the OLPC project as a threat of a $100 laptop distributed in emerging markets ([Kraemer et al. 2009](#Kraemer2009)). Soon after the OLPC project started, the PC industry began to introduce their educational computers with low prices. This reaction of the PC industry would not occur without the OLPC project. And OLPC project probably would not start or would have different goals, if there were available educational PCs with low price.

A similar story is the development of the IBM PC ([Goth 2011](#Goth2011)). IBM underestimated the influence that PC would have for their future. On the one hand, the introduction of the PC changed the market and led to less demand for IBM mainframe computers. IBM led the PC market in the beginning. But as the IBM PC market grew, IBM's influence diminished. In November 1985 PC Magazine stated *"Now that it has created the [PC] market, the market doesn't necessarily need IBM for the machines"*. The IBM management was also not able to predict the impact of their design, as reported by Greg Goth:

*“And management said, ‘Okay, fine. It won't hurt anything. It's not going to mess up our business. You're not trying to replace us. You have 10 or 12 people. When you find it's really not much of anything, you'll come back, and we'll do real computing.’ That was the attitude. They weren't afraid. They thought it would be, maybe, interesting. It might actually be a follow-on to Displaywriter and Datamaster. We'd sell maybe 100,000 or 200,000 units, and then we'd keep doing computing as we had always done it. So that's why they left us alone. We were off the radar.”* ([Goth 2011](#Goth2011), page 26)

The force awakens pattern may also occur even before any observable design activity has started. A decision to work on some design situation may cause some reactions that may change that situation. Lawson noted that once a design situation has been identified, it is no longer possible to avoid deciding on a design outcome ([Lawson 2005](#Lawson2005), page 115). He elaborated that in many real-life design situations it is not possible to take no action because the very process of avoiding or delaying a decision has an effect. For example, if a new road is planned, but the route remains under debate for a lengthy period, the property in the region of the various paths will likely change the value. Lawson concluded that procrastination as a strategy in design is deeply flawed.

In software design a similar effect we may find in ["vaporware"](https://en.wikipedia.org/wiki/Vaporware). Vaporware is a practice of announcing a product that does not exist to gain a competitive advantage and keep customers from switching to competing products (e.g. [Heiko 2004](#Heiko2004); [Richard 1995](#Richard1995)). Announcements of the competitors may seriously harm designers' intention to address a particular situation. Such, often very simple announcements, may radically change the market and clients’ expectations. Vaporware is another example of the *force awakens* pattern, as here a design activity triggers forces that are significantly changing the design situation and are undermining the design effort. Again, these forces would not be "awakened" without the design activity.

The *force awakens* pattern is connected to the *[pandora's box](#ProblematicSolution)* pattern, as both of these patterns describe dynamics that are a consequence of unexpected and undesirable effects of design decisions. The *force awakens pattern* may lead to the *[solution looking for a problem](#SolutionLookingForProblem)* pattern. A failure to create an outcome in one design situation may lead to usage of a (part of) design outcome in another situation.


![IBM Personal Computer, 1981. IBM introduction of PC changed the market and led to less demand for IBM mainframe computers. Credit: Wikimedia Commons.](images/IBM_PC_1981.jpg)



![The U.S. Justice Department accused IBM of intentionally announcing its System/360 Model 91 computer (pictured) three years early to hurt sales of its competitor's computer. Credit: Wikimedia Commons.](images/360-91-Panel.jpg)





## B. Patterns of Dynamics Between Design Outcomes and Resources

![](images/Model_Outcome_Technique.png)

Similar to the dynamics between design situations and outcomes, the dynamics between design outcomes and design resources are in design literature described as sophisticated and bidirectional. The way how designers set the design process when it comes to steps, phases, and activities has direct consequences on what they can design. On the other hand, design outcome may also influence design resources. We discuss the following patterns of dynamics:

* Your Design Is Your Reflection,
* You Are Reflection of Your Design, and
* Design-by-Buzzword.



### Your Design Is Your Reflection {#ResourceSignature}

**Motto**: *"Every contact leaves a trace." (Edmond Locard)*

**Summary**: *Design resources, as well as the way how working with these resources is organized, are leaving a characteristic signature on a design outcome. It is often possible to guess, from the design outcome, which design resources designers used, and how the working with the resources was organized.*

**Alternative names**: *Resource Signature, Design Style*.

**Topics**: *constraints, consistency, templates, frameworks, convention-over-configuration, Conway's Law*

**Desirable**: *In situations where consistency among design outcomes is essential.*

**Undesirable**: *In complex real-world situations and in new domains where it may lead to unnecessary limited or complex solutions.*

* * *

The characteristics of design resources directly influence the design outcome’s form and possibilities. This influence can happen at all levels, from simple design tools to complex organizational structures. Selection of design materials, for instance, leaves a clear signature on a design outcome. But all design resources, including tools, methods and organizational structures supporting a design activity may leave a typical signature on a design outcome.

The following table illustrates levels at which this pattern may occur.

|Level                  |Examples                                                                                 |
|-----------------------|-----------------------------------------------------------------------------------------|
|Technology and tools   |Templates, material characteristics or default tool settings drive the shape of outcome  |
|Individual designers   |Designer's style, skills and preferences drive the shape of outcome                      |
|Team and organization  |Team organization and communication structures drive the shape of outcome (Conway's law) |

At the tool level, the *your design is your reflection* pattern is a consequence of possibilities and limitations of used design tools. Design tools empower designers but at the same time, they may constraint designers’ actions. These restrictions often leave a typical signature on a design outcome. Mary Collins, in her post ["Web Design Trends: Why Do All Websites Look the Same?"](https://www.friday.ie/journal/why-do-all-websites-look-the-same/) noted that modern websites style-wise look very similar: "*large full-width background image or video in the header, overlaid text, followed by a block of short text, and then the obligatory icon columns*." Collins argued that this uniformity has its origins in popularity of UI frameworks, in particular [Bootstrap](http://getbootstrap.com/), as well as the availability of pre-designed website themes, such as those in [WordPress](https://wordpress.com/).

![The screenshot of several popular WordPress themes with similar styles.](images/wordpress-themes.jpg)


In software design, developers need to use software frameworks and libraries. These frameworks often have recommended ways of working and their conventions. Some software frameworks follow the [convention-over-configuration](https://en.wikipedia.org/wiki/Convention_over_configuration) approach, making it easier to do things that mimic particular conventions. Sometimes, such frameworks are called ["opinionated" frameworks](https://stackoverflow.com/questions/802050/what-is-opinionated-software) as they embed and promote "opinions" about how things should be done. Such "opinionated" frameworks encourage designers into doing things their way. By design, such frameworks are leaving a strong signature on a design outcome. For example, [Maven](https://en.wikipedia.org/wiki/Apache_Maven), one of the most popular software project management tools, strongly encourages applications to follow standard Maven directory structure and file name conventions. In practice, that means that virtually all Maven projects will have a very similar source code organization. While this may be limiting in some cases, the significant advantage is that anyone who worked on one Maven project will be able to work in another Maven project more efficiently.


One advantage of the design signature pattern is that it facilitates consistency and better understandability of design outcomes. Myers argued that since all user interfaces created with the same tool will be similar, such tools help to achieve a consistent look and feel ([Myers et al. 2000](#Myers2000)). For instance, [Bootstrap](http://http://getbootstrap.com/) and [Google Material Design](https://material.google.com/) are frameworks for creating unified user experiences across diverse platforms and devices. While being very flexible, these frameworks come with predefined elements and resources, such as material icons, which can give applications a distinctive Bootstrap or Google material look and feel. This consistent look and feel, in turn, can make it easier for users to reuse their experiences from other applications across diverse channels.

Having design tools that impose strong constraints, while limiting designers, also can simplify the design of new design outcomes. Tools without such constraints may lead designers to create unnecessarily complex and difficult to use designs. Nielsen’s 2010 report on the usability of iPad applications nicely illustrates this issue:

*“The first crop of iPad apps revived memories of Web designs from 1993 when Mosaic first introduced the image map that made it possible for any part of any picture to become a UI element. As a result, graphic designers went wild: anything they could draw could be a UI, whether it made sense or not. It's the same with iPad apps: anything you can show and touch can be a UI on this device. There are no standards and no expectations."* ([Nielsen 2010](#Nielsen2010))

The main disadvantage of using tools with predefined elements is that they constraint the design outcome and may limit options and creativity of designers. Websites that use predefined templates may lack clear distinction in style from other sites, which may cause user dissatisfaction or users' perception of the company as unoriginal or amateurish. Consequently, tools with fewer constraints may lead to more innovative designs. As argued by [Shneiderman et al. (2007)](#Shneiderman2007), the success of [Flash](https://en.wikipedia.org/wiki/Adobe_Flash) user interface tool was partially based on the lack of predefined widgets. It stimulated innovative designs because it encouraged designers to explore different ways to control the interaction, instead of just using buttons and scroll bars. We may argue that lack of predefined elements in a user interface was a typical signature of the Flash tool.

The *your design is your reflection* pattern may also occur as a consequence of individual designer's background and preferences. In his examination of forces that generate a style in architecture, Chiu-Shui Chan ([2001](#Chan2001)) argued that an architectural style is not only a similarity of physical features in a designed object. Instead, a style also reflects designers' personal aspects, including operations of cognitive mechanisms, utilization of repeated procedures, personal preference for specific images, and manipulation of certain seasoned design knowledge. Designers have their own unique sets of skills, knowledge, and experiences, and often they have developed their design styles. Moreover, sometimes a designer may be invited to design something exactly because of this style. That means that different design outcomes produced by the same designers will often have some standard features.

The *your design is your reflection* pattern may also be visible at the level of design processes and organizations. Established processes and organizational structures may influence the form of design outcomes. Melvin Conway, in what is nowadays known as *Conway's law*, stated that organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations ([Conway 1968](#Conway1968)[^fooConwayLink]). In other words, the structure of a system will follow the organization of the people that built it ([e.g. see Lewis & Fowler 2014](#Lewis2014)). When designing a complex system, two modules A and B cannot interface correctly with each other unless the designer and implementer of A can communicate with the designer and implementer of B. [MacCormack et al. 2012](#MacCormack2012) similarly explored the duality between product and organizational architectures, highlighting the impact of organizational design decisions on the technical structure of the artifacts that these organizations develop. This pattern may enable organizations to create particular types of design outcomes efficiently. If an organization frequently produces a specific kind of design outcomes, having a stable, optimized organizational structure can be a significant advantage. When established organizational structures do not match well requirements of design outcomes, this pattern may lead to negative consequences. If the organizational structure makes it difficult to introduce particular changes, this pattern may lead to missed opportunities or lower quality. Gokpinar et al. ([2010](#Gokpinar2010)), in their study of vehicle development process of a major auto company, found out that mismatches between product architecture and organizational structure lead to a number of quality issues. In other cases, this pattern may lead to unnecessary complexity. For example, [Bass et al. (2012)](#Bass2012) reported a case in which a software architect was asked by the management to add a database component to the software solution without clear functional need. The main reason was that database department was overstaffed and underworked and they needed something to do (page 59). "Design by committee" is another example of unnecessary design complexity introduces by imposed organizational structures.  Fred Brooks ([2010](#Brooks2010)) argued that outcomes of a design by committee lack focus and result in impractical products with too broad functionality. Brooks elaborated that the people in committees, to protect their interests and avoid conflicts, are often reluctant to reject any request:

*Each player has a wish list garnered from his constituents and weighted by his personal experiences. Each has both an ego and a reputation that depend on how well he gets his list adopted. Logrolling is endemic—an inevitable consequence of the incentive structure. "I won't naysay your wish, if you won't naysay mine"* (page 41).



![Illustration of the Conway's Law. Credit: Martin Fowler (https://martinfowler.com/articles/microservices.html).](images/conways-law.jpg)


The your design is your reflection pattern is a consequence of inertia (resistance to change) of design resources. The opposition to change of design resources is not necessarily a problem. Having stable tools, habits, and organizational structures often make designing more comfortable, more predictable and faster. Such inertia may be a design decision, for example, if the goal is to create consistent design outcomes. But such inertia may happen implicitly, for instance, due to sheer size and complexity of used resources. Social dynamics in design teams and organizations also contribute to this pattern, such as in the case of the Conway's law. As noted by James Coplien ([1999](#Coplien1999)) in his discussion of Conway's law, "*[software] architecture is not so much about the software, but about the people who write the software. The core principles of architecture, such as coupling and cohesion, aren't about the code. The code doesn't 'care' about how cohesive or decoupled it is; ... But people do care about their coupling to other team members.*." The resistance to change means that the resources may be difficult or costly to change, often leading to a more manageable option of design outcome adaptations. However, too much inertia may lead to situations where design outcome becomes unnecessarily constraint or complex.

The *your design is your reflection* pattern is related to the *[you are reflection of your design](#OutcomeSignature)* pattern. Design resources may get their "signature" form as a result of the need to support efficient creation of certain types of design outcomes. The *your design is your reflection* pattern is also related to the *[conformity](#ResourceConformity)* pattern. Adopting popular design resources with established best-practices also means accepting particular constraints and ways of working with these resources.

[^fooConwayLink]: [http://www.design.caltech.edu/erik/Misc/Conway.html](http://www.design.caltech.edu/erik/Misc/Conway.html)






### You Are Reflection of Your Design {#OutcomeSignature}

**Motto**: *"We are what we repeatedly do." (Will Durant, The Story of Philosophy)*

**Summary**: *Design resources are adapted to a design outcome, sometimes to the point that the form and organization of design resources reflects the intended shape of the outcome.*

**Topics**: *Specialization, Inverse Conway's Law, Work Optimization*

**Alternative name**: *Outcome Signature*

**Desirable**: *In situations where efficiency of design work is essential.*

**Undesirable**: *In complex real-world situations and in new domains where it may limit designers' ability to apply other approaches.*

* * *

The structure of design outcomes may influence the tools, methods, processes and whole organizations that create such outcomes. As in the case of the *[your design is your reflection](#ResourceSignature)* pattern, this adaptation can happen at all levels, from individual design tools to complex organizational structures.

The following table illustrates levels at which this pattern may occur.

|Level                  |Examples                                                                                                                        |
|-----------------------|--------------------------------------------------------------------------------------------------------------------------------|
|Technology and tools   |Tools and materials are selected and configured to facilitate the creation of particular outcome types.                         |
|Individual designers   |Types of outcomes they worked on define designers' style, skills, and knowledge                                                 |
|Team and organization  |Team organization and communication structures are defined to facilitate a particular outcome structure (inverse Conway's law). |


Design tools often need to be adapted to create a particular design outcome. For example, most software design tools are configurable so that frequently used functions are more easily accessible (e.g., via shortcuts or toolbar buttons). In this way, the configured tool becomes optimized for particular tasks, making these tasks easier, and other more difficult. This tool configuration is a signature that working on a design outcome leaves on a design resource.

Working on a particular type of design outcomes also leads to improvements in designers’ skills and knowledge. Working with the same tool to create similar design outcomes (e.g., mobile applications, web applications), will lead designers to develop a specific set of skills, biased at the efficient creation of such design outcomes. Once designers develop such skills, they are much more efficient in creating new similar design outcomes. This efficiency, in turn, may lead to other positive consequences, such as more rapid prototyping and more iterations of iterative design that is a crucial component of achieving high-quality user interfaces ([Myers et al. 2000](#Myers2000); [Nielsen 1993](#Nielsen1993)).

The *you are reflection of your design* pattern also happens at the process and organizational levels. [Bass et al. (2012)](#Bass2012), for instance, argued that software design often describes not only the structure of the design outcome. It can engrave the structure of the development project and sometimes the structure of the entire organization (page 33). They elaborated that a standard method for dividing up the labor is to assign to different groups different portions of the system to construct. Such work-breakdown structure in turn dictates:

* units of planning, schedule, and budget,
* inter-team communication channels,
* configuration control and file-system organization,
* test plans and procedures, and
* even minutiae such as how the project internet is organized and who sits with whom at the company picnic.

Sam Newman similarly provides an example of an organizational structure that grew up around the product architecture [(Newman 2005, page 201)](#Newman2015). The organization was tightly aligned with the parts of the product. To make changes to the product, they first had to change the organizational structure.

The *you are reflection of your design signature* pattern may be a consequence of the success of a product and the need to maintain and support the product in the long term. Bill Buxton ([2007](#Buxton2007)) claimed that the second worst thing that can happen to a new product (after failure) is that it is a huge success (page 208). Buxton elaborated that the more successful a product, the more of them are going to be produced and used. That means that the company, clients, and successors have to deal longer with the design and architectural decisions that designers made. To be able to maintain and support successful products, organizations need to make long-term adaptations and optimizations. While such products may be profitable, they may also be a burden. Long-lived systems tend to grow in size and complexity over the time, and maintenance and support of such systems tend to consume more and more of the organization's resources. This consumption of resources may limit the ability of the organization to do other things and innovate. Adam Schneider, for instance, [noted](http://deloitte.wsj.com/cio/2013/10/01/when-companies-become-prisoners-of-legacy-systems/) that companies may become prisoners of their legacy systems. The need to support legacy systems prevents such companies from surging ahead in the marketplace, introducing new products, moving into new geographies, or expanding services to customers on new platforms.


The *you are reflection of your design* pattern is related to the *[your design is your reflection](#ResourceSignature)* pattern. Adaptations of design resources to support efficient creation of certain types of design outcomes often lead to long-term changes in these design resources. These long-term changes, in turn, may affect the form of new design outcomes in new projects where designers use the same resources. The *you are reflection of your design* pattern is also related to the *[commitment](#ResourceCommitment)* pattern. Having tools, skills, and organizational structures optimized for creating a particular type of a design outcome may encourage designers to reuse their tools and skills in new design situations. But this optimization may also lead to the *[cherry picking](#CherryPicking)* pattern, and stimulate designers to choose only those situations where a specific type of design outcome is required.

![Hammer-heads optimized for different purposes. Credit: Wikimedia Commons.](images/hammerheads.jpg)



### Design-by-Buzzword {#DesignByBuzzword}

**Motto**: *"Projects that do not capitalize on new opportunities will generally find their products unable to compete." [Boehm and Bhuta (2008)](#Boehm2008)*

**Summary**: *A designer is joining a growing trend in using some technology, often in an opportunist way. New possibilities of design resources are shaping the design outcome.*

**Alternative names**: *Design-by-Buzzword, Opportunistic Design*.

**Topics**: *exploiting new opportunities, hype, new trends, hackathons*

**Desirable**: *In fast-changing domains where capitalization on new opportunities is a crucial competitive advantage.*

**Undesirable**: *In real-world situations and in well-known domains where it may lead to unnecessary complex solutions.*

* * *

The *design-by-buzzword* pattern is a form of dynamics between design outcomes and design resources where designers use a design situation as an opportunity to try out some novel or upcoming design resource (e.g. [Ncube et al. 2008](#Ncube2008)).

The *design-by-buzzword* pattern is a consequence of technology developments, designer’s creativity in using and applying new resources, as well as changing expectations of users who are continually learning about technology advances. Introduction an iPhone, for instance, radically changed user’s expectations of mobile applications ([e.g., see "How iPhone Changed the World"](http://www.cultofmac.com/103229/how-iphone-changed-the-world/)).


![The iPhone family. Introduction an iPhone radically changed user’s expectations of mobile applications. Credit: Apple.](images/iPhone-Family_US-EN-PRINT.jpg)


New technology opportunities are one of the main reasons for a constant change of designs, especially in software design. [Boehm and Bhuta (2008)](#Boehm2008) argued that software projects that do not capitalize on new opportunities will generally find their products unable to compete. Earlier [Brooks (1995)](#Brooks1995) noted that new opportunities in technology are one of the primary drivers behind constant changes of software designs: “*If not new computers, then at least new disks, new displays, new printers come along; and the software must be conformed to its new vehicles of opportunity*” (page 12).

In the *design-by-buzzword* pattern, the primary driver for the use of some resources is the "hype" and high expectations of some new trend. Such usage usually is not directly driven by the requirements of the situation or experiences in using the resource in similar cases. Nowadays, bitcoin and blockchain technologies are examples of such hype. Financial institutions are investing in these technologies, but the actual value and practical utility of these technologies are still unclear.

Novelty rather than experience drives the *design-by-buzzword* pattern. The lack of experiences means that there are no clear guidelines and best practices, which may lead to unnecessary complex projects that are more likely to fail. Roy Thomas Fielding ([2000)](#Fielding2000) noted that software projects often begin with adoption of the latest "fad" in architectural design. Only later, if at all, it is discovered whether or not the system requirements call for such an architecture. As usage of new resources may lead to more unexpected and undesired effects, projects based on the *design-by-buzzword* pattern are also more likely to fail.

Design-by-buzzword introduces a number of risks. Designers need to work with resources that are not necessarily proven in practice, and for which there are little experiences that can be reused. On the other hand, avoiding using new resources may impact the long-term competitiveness of an organization. Consequently, organizations are looking for ways to combine benefits of being an early adopter of some technology or technique, while limiting the risk. Hackathons are an increasingly more popular form of making such compromise ([Komssi et al. 2015](#Komssi2015)). Here the risk is minimized by time-boxing the activity, normally for several days only, with the idea that this limited time frame gives enough time to get basic insights and some hands-on experience with a  new trend.

The *design-by-buzzword* pattern is related to the *[solution looking for a problem](#SolutionLookingForProblem)* pattern. New opportunities embedded in an innovative design outcome may lead to usages of this outcome in new situations. The *[co-evolution of problem-solution](#CoEvolution)* pattern may also be related to the *design-by-buzzword* pattern as a way to develop a better understanding of useful applications for new design resources.


## C. Patterns of Dynamics Between Design Situations and Design Resources

![](images/Model_Situation_Technique.png)

Design situations and design resources relate to each other in many ways. A designer is often pictured as a craftsman, someone who picks and chooses tools freely based on the case and grounded in the judgment of overall benefits from using a specific resource ([Stolterman 2008](#Stolterman2008b)). Some resource selection criteria are influenced by the specifics of the design situation at hand, and the designer has limited influence on them. Budget limitations, for instance, can affect the selection of materials and consequently tools and processes to work with these materials. The deadline imposed by clients may restrict the number of design iterations and limit the amount of testing and evaluation. Size and criticality of a situation may ask for different software development approaches (e.g. [Cockburn 2000](#Cockburn2000)).

The choice of design resources is never trivial and never a sole function of the situation requirements. The ‘benefits’ of using some tools also depend on the level of skill and mastery required, external pressure about standards, personal style of expression. The designer is also almost never in full control about which resources will be used and how they will be adapted to a particular situation.

We discuss the following patterns of these dynamics between design resources and situations:

* Conformity,
* Commitment, and
* Cherry Picking.


### Conformity {#ResourceConformity}

**Motto**: *"When in Rome, do as the Roman's do."*

**Summary**: *To minimize risks in a new design situation, designers use popular and proven resources with established best practices. Such conformity may be driven by positive experiences of others in similar situations, mere popularity of design resources, or mandatory requirements. The usage of a design resource further contributes to establishment and reputation of the resource and its usage in new design situations.*

**Topics**: *popularity, compliance, communities, fashion, peer pressure, legal requirements, education*

**Desirable**: *When conformity is mandatory, or when designers can benefit from joining a broader community.*

**Undesirable**: *In new domains where there are no established best practices, or in areas where capitalization on new opportunities is crucial.*

* * *

In the *conformity* pattern, designers select popular and proven resources with established best practices. In this pattern, external factors, such as experiences of others, popularity, or regulations, are primary drivers for the selection of design resources.


The primary driver behind conforming to established resources and best practices is the wish to minimize risks. Established and popular design resources and reference projects provide some evidence that the design resources are suitable for particular situations. Consequently, a common strategy to select design resources is to look at successful design projects addressing similar conditions and to use the same resources.

Conformity has practical advantages for designers. Well-known tools usually have active communities of practitioners and plenty of learning resources, enabling a designer to more efficiently and predictably master the resource usage. Conformity also has advantages for organizations, as it is easier to find new employees for mainstream tools.

The mere popularity of some design tool or methodology is often the main reason for its usage. For instance, while there are hundreds of libraries and frameworks for the development of web user interfaces, most new web user interfaces are build using few most popular frameworks: React, Angular and Bootstrap. In the domain of graphic design, similarly there are hundreds of available tools, but most designers use [Adobe](http://www.adobe.com) tools (e.g., Photoshop, Illustrator, and InDesign) by far the most popular graphic design tools, often described as *de facto* industry standard for graphics editing.

The most popular design resources are often introduced at schools and universities, further contributing to the popularity and widespread use of these resources. Adobe, for example, offers [educational resources and discounts](http://www.adobe.com/education.edu.html) on their products for teachers and students. In software engineering schools, Java, one of the most popular programming languages, has often been used as the first programming languages that students learn ([Hadjerrouit 1998](#Hadjerrouit1998)). Before that, the popularity of C++ in the industry has led to its use for teaching as well ([Kölling (1999)](#Kolling1999)).

Usage of some resources also influences the future development of that resource. By using and buying a particular resource, designers increase the popularity of the resource and the profit of the producer, which can further stimulate the use of the tool. Successful projects are excellent references for resources used in them and may be the main reason why others will select these resources for new projects.

Conformity may also be a result of legal and other regulations. Physical materials, for instance, need to satisfy rules about safety and environmental impact and there is often a limited list of "certified" or recommended materials. Here conformity is more than a question of style. Failure to use recommended materials may have severe consequences and put lives of people in danger, as in the case of fire safety standards. In software design, companies often also have a list of approved resources, tools or libraries. Security concerns are often the driver of these limitations. For instance, in 2017 the US Government banned Kaspersky Security software, limiting designers of network and application security to other options.

Designers may conform to the usage of some resources due to fear of legal and other consequences. Harrison ([2004](#Harrison2004)) for instance, argued that if a software system fails and customers sue, it may be viewed as negligence if the designer’s organization did not follow best practices. For this argument, Harrison draws a parallel between software design and criminal trial. In a criminal trial (at least in the US), the failure to follow an established best practice could result in an acquittal.

The *conformity* pattern is particularly useful in standard, well-known domains. As discussed in the *[co-evolution of problem-solution](#CoEvolution)* pattern, designing custom solutions may lead to "reinventing-the-wheel" and "not-invented-here" anti-patterns. In well-established domains, designers often can use standard solutions with minimal modifications.

Conformity also has its downsides. One negative issue is that by using established and proven resources, designers may not capitalize on some new emerging technology. As discussed in the *[design-by-buzzword](#DesignByBuzzword)* pattern, projects that do not capitalize on new opportunities may find their products unable to compete. Another negative issue is the [vendor lock-in](https://en.wikipedia.org/wiki/Vendor_lock-in), as designers and customers may become too dependent on a vendor for products and services, and are unable to use another vendor without substantial switching costs. Popular tools may also constrain a designer as they need to stay relevant for many users and may decide to focus on developing only the most common features.

The *conformity* pattern is related to the *[commitment](#ResourceCommitment)* pattern, as successful usages of some new design resources require some level of commitment. Design organizations may also commit to using some standard or favorite resource. The *conformity* pattern is also related to the *[cherry picking](#CherryPicking)* pattern. A wish to avoid risks may lead design organizations to work only in situations where proven resources with established best practices can be applied.


![Three examples of buildings in the Amsterdam School style, a style of architecture popular from 1910 through about 1930 in the Netherlands. Buildings of the Amsterdam School are characterized by brick construction with complicated masonry with a rounded or organic appearance, relatively traditional massing, and the integration of an elaborate scheme of building elements inside and out. Credit: Amsterdam Municipal Department for the Preservation and Restoration of Historic Buildings and Sites (bMA) / Wikimedia Commons.](images/Amsterdamse school.jpg)






### Commitment {#ResourceCommitment}

**Motto**: *“It is a poor craftsman that blames his tools.”*

**Summary**: *In a new design situation designers use tools they committed to beforehand.*

**Topics**: *learning, standardization of work, tool development, "eating its own dog food," "if all you have is a hammer, everything looks like a nail"*

**Desirable**: *When designers want to master resource usage or further improve the resource itself.*

**Undesirable**: *In complex real-world situations where over-commitment may lead to worse design outcomes and lost opportunities.*

* * *

The *commitment* pattern is a form of dynamics of design activities in which, in a new design situation, designers commit beforehand to using a particular resource. And they persist in the usage of the resource even when they experience difficulties.

Designers may commit to and persist in using a particular resource due to a number of reasons. Such commitment, for instance, can facilitate the development of design skills. Learning to use a new design tool requires time and effort, and initial results may be discouraging. Without the commitment and persistence, a designer may give up learning too early, and never master the tool.

Most design companies have a set of their standard or recommended resources. If a whole organization commits to using a particular resource, it may have a positive effect on its operations. More people will share the same knowledge and skills, learn from each other, and in general easier communicate and collaborate. [Ken Britton](http://queue.acm.org/detail.cfm?id=3131240), for instance, argued for the value of keeping the number of technologies organizations use to a minimum. With fewer technologies, the organizations can more easily train new people, maintain code, and support moves between teams. Sam Newman ([2015](Newman2015)} similarly described that [Netflix](https://www.netflix.com/), has mostly standardized on [Cassandra](http://cassandra.apache.org/) as a data-store technology (page 16). Although it may not be the best fit for all of its cases, Newman elaborated that Netflix felt that the value gained by building tooling and expertise around Cassandra was more important than having to support and operate at scale multiple other platforms that may be a better fit for certain tasks.

A special case of the *commitment* pattern is the “*eating its own dog food*” pattern ([Harrison 2006](#Harrison2006)). To demonstrate confidence in their products, some design companies are forcing themselves to use their own products. A famous example is the 1980’s memo sent by the Apple Computer’s president Michael Scott. In the memo, Scott asked employees to stop using typewriters and instead use Apple's word processing software ([Ditlea 1981](#Ditlea1981)).

An over-reliance on a familiar resource has its downsizes, famously expressed as *“if all you have is a hammer, everything looks like a nail”*. Each tool and process comes with different concepts and abstractions, giving designers “lenses” through which they can view the design situation. If these “lenses” are too focused, designers may over-emphasize the parts of the situation that fits nicely in their process or their tool. Or they may under-emphasize the parts where there is a less obvious match. Designers may also create unnecessary complex solutions (e.g. see [Plauger 1992](#Plauger1992), and discussion on the [Second-System Effect](https://en.wikipedia.org/wiki/The_Mythical_Man-Month#The_second-system_effect) in [Brooks 1995](#Brooks1995)). In software design, there is a similar notion of a silver bullet or golden hammer, "*a familiar technology or concept applied obsessively to many software problems*" ([Brown et al. 1998: p 111](#Brown1998)). Unified Modeling Language (UML) and Extensible Markup Language (XML) are examples of technologies that have been used almost “obsessively” in software design. These two technologies are valuable tools for software design. But in some cases, such tools are not effective or sufficient. For instance, Bell ([2004](#Bell2004)) discussed "UML fever," describing that it is not uncommon for people to believe that usage of UML guarantees the value of the artifacts produced. Similarly, in their article on "XML fever," Wilde and Glushko ([2008](#Wilde2008)) argued that some view XML as a magical solution of universal interoperability of information producers and consumers. They elaborated that much more is needed to achieve interoperability than simply using XML.

In all of these patterns, there is the pre-commitment to some resource. On a positive side, this commitment may enable development of mastery in resource's usage and stimulate improvements of the resource itself. On the negative side, the over-commitment may lead to worse design outcomes and lost opportunities.

The *commitment* pattern is related to the *[conformity](#ResourceConformity)* pattern, as design organizations may commit to using some resource out of conformity. The *commitment* pattern is related to the *[cherry picking](#CherryPicking)* pattern, because a designer may choose situations in which resources he committed to may be more readily applied.



![Mike Scott Memo - No More Typewriters. Credit: archive.org](images/Apple_Memo_No_Typewriters.jpg)





### Cherry Picking {#CherryPicking}

**Motto**: *"Do one thing and do it well."*

**Summary**: *Design situations are selected based on how quickly designers can approach these situations with preferred or available resources. Other situations are avoided.*

**Topics**: *focusing usage of resources, work efficiency, minimizing risks*

**Alternative names**: *Low-Hanging Fruits, Selective Design*.

**Desirable**: *In new domains where there are plenty of opportunities or little competition, or when an organization needs to focus usage of scarce resources.*

**Undesirable**: *In complex real-world situations as it may stimulate solving easy instead of important problems.*

* * *

In domains where designers can choose situations to work on, they may decide to select only those situations where they can use their preferred resources (e.g. [Stolterman and Pierce 2012](#Stolterman2012)). Designers may choose to specialize and avoid involving in unfamiliar situations where they may not be able to use familiar resources.

Cherry picking may have a positive effect on operations and success of designers and their organizations. [Ries and Ries (2002)](#Ries2002), for instance, claimed that companies are likely to be more successful if they focus their energies on one specific skill instead of trying to master many different ones (page 8).

Limitation in resources may also stimulate designers to select situations where they expect more benefits or have less risk of failure. In [the business context](https://strategicthinker.wordpress.com/cherry-picking/) “cherry-picking” is used as a practice to identify and target the most profitable customers in a market, rather than serving them all. Cherry-picking the most attractive customers is a common approach for startups since they can focus their limited resources and not disperse them over the whole segment. In [the financial world](http://www.investopedia.com/terms/c/cherrypicking.asp), "cherry picking" is also used as a strategy by investors to choose investments that have performed well within another portfolio in anticipation that the trend will continue. Here, cherry-picking reduces the amount of time required for researching stocks because the pool of securities in which investors pick from is narrowed.

Cherry-picking also may have negative effects. One problem is that by cherry-picking designers may be solving issues that are less relevant to the client. This problem is especially visible in domains where a rigor in applying a specific method is valued more than the practical value of a design outcome, such as in academic environments. [Greenberg and Buxton 2008](#Greenberg2008), for example, argued that the [ACM CHI conference](https://sigchi.org/conferences/) has a methodology bias, where certain kinds of methods are considered more ‘correct’ and thus acceptable than others. The consequence is that people now likely generate ‘research questions’ and ‘designs’ that are amenable to a chosen method, rather than the other way around: *“That is, they choose a method perceived as ‘favored’ by review committees, and then find or fit a problem to match it. … That is, researchers first choose the method (e.g., controlled study) and then concoct a problem that fits that method.”* In this case, the selection of situations is more influenced by the tools and techniques that researchers like than by the importance of the problems.

The *cherry picking* pattern is related to the *[commitment](#ResourceCommitment)* pattern, because a designer may choose situations in which resources he committed to may be more readily applied. The *cherry picking* pattern is also related to the *[conformity](#ResourceConformity)* pattern. A wish to avoid risks may lead design organizations to work only in situations where proven resources with established best practices can be applied.


![Cherry picking. Designers may choose problems based on their specialization or due to resource limitations. Credit: Charles Nadeau / Wikimedia Commons / CC-BY-2.0.](images/cherry_picking.jpg)



## D. Emergence of Complex Patterns of Dynamics

*"Every place is given its character by certain patterns of events that keep on happening there."* (Christopher Alexander, The Timeless Way of Building)

The patterns of dynamics of design activities may facilitate describing complex dynamics between elements of design activities as a combination of several higher-level arrangements of such dynamics. With patterns, we can explain, compare, and contrast, diverse and complex design activities in similar terms and on a higher level of abstraction.

We can, for instance, talk about some typical combination of patterns. When a new situation appears, designers’ attempt to change that situation may lead to the *[co-evolution of problem-solution](#CoEvolution)* pattern. Designers may need new or better resources for this situation, which will lead designers to change their ways of working and to the emergence of the *[you are reflection of your design](#OutcomeSignature)* pattern. Through *[commitment](#ResourceCommitment)* and *[eating its own dog food](#ResourceCommitment)* patterns the new resources can further develop and gain popularity. Once stable and popular the resources may become a *de facto* standard, and lead to the *[conformity](#ResourceConformity)* pattern. The *[conformity](#ResourceConformity)* pattern may lead to the *[your design is your reflection](#ResourceSignature)* pattern. The *[your design is your reflection](#ResourceSignature)* pattern, on the other hand, may trigger a reaction of customers wanting something new and original, which may result in new design situations.

The patterns of dynamics may be useful to discuss different levels of difficulties of design. Or, to paraphrase the Christopher Alexander's quote, we can argue that every design activity is given its character by patterns of dynamics that keep on happening there. Similar to [Gero (1990)](#Gero1990), we may talk about routine design vs. innovative design,  later generally considered more difficult. In routine designs, designers normally have better-defined situations, and they are using familiar and proven tools. There we may primarily expect to see the *[commitment](#ResourceCommitment)* pattern and possibly the *[puzzle solving](#PuzzleSolving)* pattern, with little of other patterns occurring. A routine design may also be the consequence of the *[cherry picking](#CherryPicking)* pattern. In innovative designs, on the other hand we may expect to see the *[co-evolution of problem-solution](#CoEvolution)* pattern, with possibly the *[design-by-buzzword](#DesignByBuzzword)* and *[solution looking for a problem](#SolutionLookingForProblem)* patterns. The innovative or creative design is also more likely to lead to the *[force awakens](#)* and *[pandora's box](#ProblematicSolution)* patterns, as we are dealing with more novel and unknown elements.

The patterns of dynamics strongly suggest that designers need techniques to estimate both the short-term and long-term impacts of design. In this aspect, we support the view of [Penzenstadler et al. (2014)](#Penzenstadler2014), who argued that software designers could considerably improve civilization’s sustainability by taking into account not just the first-order impacts of software systems but also their second- and third-order impacts. We believe that our framework could support such reasoning. The patterns illustrate that design activities have both a short-term and long-term dynamics. The short-term dynamics are typically localized within a particular project and are occurring in a limited period. The long-term dynamics are happening over a more extended period and among multiple projects. For example, the *[co-evolution of problem-solution](#CoEvolution)* pattern usually is intrinsic to the design activity and people involved in it, and the pattern is occurring during a concrete project. The *[force awakens](#Boomerang)* pattern, on the other hand, is primarily a consequence of indirect interactions through many elements outside the main design activity. Some patterns reflect both short-term and long-term dynamics. For example, the *[eating its own dog food](#ResourceCommitment)* pattern has an immediate short-term effect on the project where it is being used. But because it promotes and stimulates the development of specific design resources, on the long-term it may influence other design projects.


![The formation of complex symmetrical and fractal patterns in snowflakes exemplifies emergence in a physical system. In philosophy, systems theory, science, and art, emergence is whereby larger entities arise through interactions among smaller or simpler entities such that the larger entities exhibit properties, the smaller/simpler entities do not display. Credit: Wikimedia Commons.](images/SnowflakesWilsonBentley.jpg)


