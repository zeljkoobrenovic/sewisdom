# Part II: Patterns of Influences

In this part of our notes we will discuss our central thesis. Namely, that design complexity emerges from the instability of design activities, which, in turn, is a consequence of complex influences among design situations, design outcomes and design techniques. We believe that these influences are main sources of complexity characteristic for design activities. As mentioned in the introduction, while design situations, outcomes and techniques are themselves complex structures, what makes a design activity additionally and characteristically complex are interactions among these structures. These interactions challenge designers' ability to deal with complexity as any of these structure is subject to change, in a difficult to predict ways.

We want to achieve two goals. Firstly, we want to show that, in design, it makes no sense to treat design situations, design outcomes and design techniques as stable elements and in isolation of each other. Furthermore, we want to challenge the common idea that the design process moves from a problem to a solution in a linear and causal fashion. Instead the relations and influences between design situations, design outcomes and design techniques are highly diverse and bidirectional. Of course, there already exists a significant diversity in how these relations have been described in design literature. We are no alone to argue against this common idea and not the first to promote a more intricate understanding of the process. However, we still find it necessary to contribute to this ongoing debate by providing another perspective and hopefully useful, more structured model.

Secondly, we want to show that regardless of the seemingly arbitrariness and complexity of interactions between design situations, outcomes and techniques, it is still possible to constructively portray, investigate and discuss such influences. In other words, we want to argue that in many cases these influences show signs of "organized complexity", where some patterns may be observed. As a mean to achieve this goal, we introduce a concept of patterns of influences among elements of a design activity. A pattern is a recurring arrangement of influences among elements of a design activity. By studying contemporary design literature, we have found several what we have identified as common patterns of these influences. We have chosen the notion of pattern as our main concept since it points to relationships and influences that can be both simple and complex and that can be seen as both distinct and flexible. A pattern has to be revealed, described and named. It has to be stable enough to lead to intersubjective understanding while at the same time not be too limiting and rigid. It is important to understand the notion of patterns in our context as conceptual tools (as ‘ideal types’) with the purpose to support analytic and reflective thinking for practical purposes and not as definite scientific definitions of existing elements.

We will provide an initial categorization and descriptions of the kind of influences or patterns that we have identified between design situations, outcomes and techniques. We are aware that it is not possible to capture all patterns that may be involved in design processes. But we are convinced that it is possible to abstract some core patterns by examining findings from some contemporary seminal design research into a format that can support discussions and a deeper understanding about design as a complex activity.

For convenience and clarity, each pattern is described with the same format:

* a brief descriptive name,
* a brief summary,
* an optional “motto” and alternative names, and
* a more detailed discussion based on examples from the design literature.

Since working with all elements at once would present some complexity challenges, we have limited our analysis and presentation. We have chosen to  structure our review and organized this part of our notes around three “axis” of interactions between a pair of  “elements” of design activities:

* Interactions between design situations and design outcomes,
* Interactions between design outcomes and design techniques,
* Interactions between design situations and design techniques.


## A. Interactions Between Design Situations and Design Outcomes

![](images/Model_Situation_Outcome.png)

The relation between a design situation and a design outcome seems to be the most complex relation in any design activity. In the design literature, we have found several common and often interconnected views on this relation, which we describe in the following five patterns:

* Co-Evolution,
* A Solution Looking for a Problem,
* Boomerang,
* Collateral Damage, and
* Puzzle Solving.

### PATTERN 1: CO-EVOLUTION

**Summary**: *A design situation and designer’s understanding of the design situation changes and evolves in parallel and under influence of design outcome and designer’s understating of potential design outcomes.*

**Motto**: *“If you want to change something, you need to understand it, if you want to understand something you need to change it.” ([Gravemeijer and Cobb 2006](#Gravemeijer2006))*

Design scholars generally agree that design situations are never or rarely defined as precisely and clearly defined problems. [Schön (1983)](#Schon1983), for instance, argued that, in in real-world practice, problems do not present themselves to the practitioner as givens (page 40). Rather, they must be constructed from the materials of problematic situations, which are puzzling, troubling, and uncertain. Practitioners must make sense of an uncertain situation that initially makes no sense. Schön concluded that in practice, *problem setting* is as important as problem solving.

Many authors emphasized that design situations cannot be fully understood unless some attempts have been made to change or improve this situation. [Rittel and Webber (1973)](#Rittel1973), for instance, claimed that real-world problems are "wicked" problems, were a problem cannot be defined until a solution has been found[^foowicked].

[^foowicked]: Such problems are also sometimes called ill-structured ([Reitman 1965](#Reitman1965); [Simon 1973](#Simon1973)) or complex ([Funke 1991](#Funke1991)). For readers interested in discussion on wicked problems in design, we recommend [Coyne's (2005)](#Coyne2005) and [Farrell & Hooker's (2013)](#Farrell2013).

Lawson similarly claimed that many components of a design problem cannot be expected to emerge until some attempt has been made at generating solutions ([Lawson 2005: p 120](#Lawson2005)). He argues that design situations are often full of uncertainties when it comes to the objectives and their priorities, and that objectives and priorities are likely to change during the design process as the solution implications begin to emerge.

Simon ([1996](#Simon1996)) also stated that a goal of design might actually be to understand the problem and to generate new goals. He elaborated that the idea of final goals and a static problem definition is inconsistent with our limited ability to foretell or determine the future (page 162). Simon claimed that by designing without a fixation on final goals, and by adopting the stance to welcome new, emergent and originally unintended goals, design becomes a powerful tool for discovering new previously unforeseen goals ([Chua 2015](#Chua2015)).

In the domain of software design, Brooks noted that the most difficult part of software design is deciding precisely what to build. In his view, it is really impossible for a client to specify completely, precisely, and correctly the exact requirements of a software product before trying some versions of the product ([Brooks 1995](#Brooks1995)). Brooks went further to claim that a core service offered by a designer is not only providing a solution but helping clients to discover what they want designed ([Brooks 2010](#Brooks2010), page 23). Studies of success of software projects confirm this observation, as badly defined system requirements are one of the main reasons for failure of software projects ([Charette 2005](#Charette2005)).

![Pittsburg's Golden Traingle. In 1950s, an extensive renewal program begun in the city of Pittsburgh, with a principal goal of rebuild the center of the city, the so-called Golden Triangle. Herbert Simon noted that the main consequence of the initial step of redevelopment was to demonstrate the possibility of creating an attractive and functional central city on this site. This demonstration was followed by many subsequent construction activities that have changed the whole face of the city and the attitudes of its inhabitants. Each step of implementation created a new situation. The new situation provided a starting point for fresh design activity (Simon 1995, p. 162). Photo from Wikimedia Commons](images/Pittsburgh_Golden_Triangle.jpg)

### PATTERN 2: A SOLUTION LOOKING FOR A PROBLEM

**Summary**: *Understanding of a design outcome and its possibilities leads to usages of the same design in situations and for problems that were not initially envisioned.*

**Motto**: *“When humans possess a tool, they excel at finding new uses for it”* ([Nye 2006](#Nye2006))


Design solutions may exist before situations in which they are used. We often find new uses for things we already have. [Nye (2006, page 2)](#Nye2006) noted that when humans possess a tool, they excel at finding new uses for it. He argued that necessity is often not the mother of invention. He elaborated that in many cases, the opposite was the case. The tool often exists before the problem to be solved. Nye concluded that latent in every tool are unforeseen transformations.

Similarly, [Pescio (1997)](#Pescio1997) discussed how existing design solution may become a part of a new problem domain:

*“If we don't have a problem at hand to solve, we look for one—that's the emotional root of research and where our attention first focuses. We need a deliberate act of will to exclude solutions from our thinking at the analysis stage so that we can concentrate on fully describing the problem. More often than we'd like, we inject past solutions into the problem domain during the next development round. More precisely ... we inject part of the solution domain into the problem domain whenever the same or a similar project is revisited. When your system is maintained, ported, and reengineered over several years, it becomes harder and harder to properly recognize fragments of solutions that were injected earlier. They become accepted as part of the problem domain.”* ([Pescio 1997](#Pescio1997))

Norman explored this issue as well, claiming that major innovations came from technologists who had little understanding of the problem domain ([Norman 2010](#Norman2010)). He stated that this is true for almost all of the powerful inventions that have changed society: the airplane, the automobile, the telephone, the radio, the television, the computer, the personal computer, the internet, SMS text messaging, and the cellphone. Norman claimed that with many of these inventions, the technology came first, the products second, and then the needs slowly appeared. New applications are first considered to be luxuries, after a while they become "needs," and finally, they may end up being seen as essential. In his earlier work, [Norman (2008)](#Norman2008) similarly explored how unordinary usages of ordinary products may lead to new requirements (change in design situation) and new products. Norman provided an example of Nokia's designers, who added a penlight to some of their phones after visiting China and noticing that people were using displays of their mobile phones as a source of light.

Once a new usage of a design “solution” emerges, the new situation often starts to influence further evolution of the original “solution”. Brooks, for instance noted that all successful software gets changed partially because as a software product is found to be useful, people try it in new cases at the edge of, or beyond, the original domain ([Brooks 1995, page 12](#Brooks1995)).

![A DynaTAC 8000X (first commercially available mobile phone from 1984). Martin Cooper of Motorola made the first publicized handheld mobile phone call on a prototype DynaTAC model on April 3, 1973. Photo by Hinman, Rachel. 2012](images/first_mobile_phone.jpg)



{#Boomerang}
### PATTERN 3: BOOMERANG

**Summary**: *Designer’s efforts to address some situation triggers a number of reactions that radically change the original design situation often to the point that the intended design outcome or a contribution of a designer becomes unsuccessful, obsolete or irrelevant. Such reactions would normally not occur without the design activity.*.

**Alternative names**: *Shoot oneself in the foot, own goal*

The interaction between a design outcome and design situation can occur indirectly, especially if the design enters the mass market or can have significant influence on the society. In some cases, this interaction may change the original design situation so much that intended outcome of designers’ effort may become obsolete. An example of this issue is the one laptop per child (OLPC) project ([Kraemer et al. 2009](#Kraemer2009)). The OLPC project created a novel technology, the XO laptop, developed with close attention to the needs of students in poor rural areas. The project failed to reach many of its original goals, in huge part due to the aggressive reaction of the PC industry to the perceived threat of a $100 laptop being widely distributed in places the industry saw as emerging markets for its own products ([Kraemer et al. 2009](#Kraemer2009)). Soon after the OLPC project started, the PC industry begun to introduce their own educational computers with low price. This reaction of the PC industry would not occur without the OLPC project. And OLPC project probably would not start, or would have different goals if there were available educational PCs with low price.

A similar story is the development of the IBM PC ([Goth 2011](#Goth2011)). IBM underestimated the influence that PC would have for their own future. On the one hand the introduction of the PC changed the market and lead to less demand for IBM mainframe computers. And while led the PC market in the beginning, as the IBM PC market grew IBM's influence diminished. In November 1985 PC Magazine stated *"Now that it has created the [PC] market, the market doesn't necessarily need IBM for the machines"*. The IBM management was also not able to predict the impact of their own design, as reported by Greg Goth:

*“And management said, ‘Okay, fine. It won't hurt anything. It's not going to mess up our business. You're not trying to replace us. You have 10 or 12 people. When you find it's really not much of anything, you'll come back and we'll do real computing.’ That was the attitude. They weren't afraid. They thought it would be, maybe, interesting. It might actually be a follow-on to Displaywriter and Datamaster. We'd sell maybe 100,000 or 200,000 units, and then we'd keep doing computing as we had always done it. So that's why they left us alone. We were off the radar.”* ([Goth 2011](#Goth2011), page 26)

The boomerang may also occur even before any observable design activity has started. The mere decision to work on some design situation may cause a number of reactions that may change that situation. Lawson noted that once a design situation has been identified it is no longer possible to avoid making a decision about design outcome ([Lawson 2005](#Lawson2005), page 115). He elaborated that in many real-life design situations it is not possible to take no action because the very process of avoiding or delaying a decision has an effect. For example, if a new road is planned but the route remains under debate for any lengthy period, the property in the region of the various routes will likely change value. Lawson concluded that procrastination as a strategy in design is deeply flawed.

![IBM Personal Computer, 1981. IBM introduction of PC changed the market and lead to less demand for IBM mainframe computers. Photo from Wikimedia Commons](images/IBM_PC_1981_makffm.jpg)


In software design a similar effect we may find in ["vaporware"](https://en.wikipedia.org/wiki/Vaporware) or other practices of announcing a product that does not exist to gain a competitive advantage and keep customers from switching to competing products (e.g. [Heiko 2004](#Heiko2004); [Richard 1995](#Richard1995)). Your intention to address particular situation may be seriously harmed by announcements of your competitors. Such, often very simple announcements, may radically change the market, original situation, and clients’ expectations.

![The U.S. Justice Department accused IBM of intentionally announcing its System/360 Model 91 computer (pictured) three years early to hurt sales of its competitor's computer, Wikimedia Commons](images/360-91-Panel.jpg)



### PATTERN 4: COLLATERAL DAMAGE

**Summary**: *The consequences of a design outcome create new situations that are perceived as problematic and may ask for another design to improve it. A design may become more known for the problems it caused than for the solution it provided.*

**Moto**: *“Everything we design has the potential not only to solve problems but also to create new ones”* ([Lawson 2005](#Lawson2005))


Any design outcome may introduce unexpected and undesired effects. Design literature provides numerous examples of designers having to deal with issues of unintended consequences of their designs (e.g. [Janlert and Stolterman 2008](#Janlert2008)). Lawson nicely illustrates this issue on an example of a motorcar:

*“Design solutions are not panaceas and most usually have some undesirable effects as well as the intended good effects. The modern motor car is a wonderfully sophisticated design solution to the problem of personal transportation in a world which requires people to be very mobile over short and medium distances on an unpredictable basis. However, when that solution is applied to the whole population and is used by them even for the predictable journeys we find ourselves designing roads, which tear apart our cities and rural areas. The pollution which results have become a problem in its own right, but even the car is now beginning not to work well as it sits in traffic jams! This is a very dramatic illustration of the basic principle that everything we design has the potential not only to solve problems but also to create new ones!"* ([Lawson 2005: p 122](#Lawson2005))

Spam is another example of problems created by success of messaging and social media technologies, such as email, SMS, Twitter and Facebook.

In software design, one of the most prominent examples of problems caused by previous design solutions was the “year 2000 (Y2K) problem” (e.g. [Neumann and McCullagh 1999](#Neuman1999); [Berghel 1999](#Berghel1999)). This problem was caused by a shortcut taken by early software designers. To conserve memory space, early software designers used a solution that recorded the year using the last two digits rather than four. Computers using this system would then recognize the year 2000 as the year 1900 instead, potentially causing serious problems in many sectors. It was estimated that costs of fixing the Y2K problem exceeded $3 trillion worldwide ([Brown et al. 2000](#Brown2000)).

![Traffic Jam in Maputo. A car is an excellent design solution to the problem of personal transportation, but when applied to the whole population it creates other problems, such as traffic jams. Photo from Wikimedia Commons](images/Chapa_traffic_jam_in_Maputo_(9717216968).jpg)

![This illustration by Karl Jilg (commissioned by the Swedish Road Administration) emphasizes the dominance of car traffic in an urban environment.](images/karl_jilg_roads.jpg)

### (ANTI-)PATTERN 5: PUZZLE SOLVING

**Summary**: *A design situation is viewed as a clearly defined and static problem (i.e. a problem that can be clearly stated and where it is known what form the solution should have). A design outcome is seen as a solution for this problem. Design is viewed as a problem-solving activity.*


The puzzle solving patterns views design as a problem-solving activity, an activity that leads to a solution for a particular existing problem. Interaction design is, according to [Norman (2010)](#Norman2010), sometimes naively viewed as a problem-solving activity. In such view, interaction designers are capturing and understanding the hidden unmet needs of potential users/customers, that is, to identify “the” problem, with the intention to design an outcome that fulfills those needs.

This pattern is of limited use in design practice because very few of design problems are clearly understood before design activity starts (e.g. Buchanan 1992). Lawson even called such view on design “the puzzle trap” ([Lawson 2005, page 221](#Lawson2005)).

Nevertheless, the puzzle solving pattern has its value in a limited number of practical cases. Many design sub tasks can be addressed as problem solving activities. Design of computing algorithms can be described as a puzzle solving pattern. There the goal is to find efficient algorithmic solution for a clear computing problem. However, design of algorithms is only a small part of the system design, and designing systems requires different approach. This is nicely described in the Butler W. Lampson's article on system design [Lampson (1984)](#Lampson1984). Lampson argued that designing a computer system is very different from designing an algorithm because the requirements are less precisely defined, more complex, and more subject to change. The measure of success is much less clear. And the designer usually finds himself in "a sea of possibilities", where it is not clear how one choice will limit his freedom to take other choices or affect the size and performance of the entire-system.

The puzzle solving pattern is also useful in education, where problems can be artificially clearly defined so that students can focus on developing a particular design technique. For example, it is a common practice to teach computer programming through exercises where students need to design an algorithm for a clearly defined problem (such as calculating the number of days between two dates).

![A crossword. Solving clearly defined problems, such as crosswords, is often seen as an anti-pattern in design. Image from Wikimedia Commons](images/British_crossword.png)



## B. Interactions Between Design Outcomes and Techniques

![](images/Model_Outcome_Technique.png)

Similar to the relation between situation and outcome, the relation between design outcomes and design techniques is in design literature described as complex and bidirectional. The way the design process is set up when it comes to steps, phases, and activities has direct consequences on what can potentially be designed. On the other hand, design outcome may also influence design techniques. We discuss the following patterns of relations:

* Technique Signature,
* Outcome Signature, and
* Design-by-Buzzword.

### PATTERN 6: TECHNIQUE SIGNATURE

**Definition:** *Possibilities and constraints of tools and processes as well as the structure of a design organization are leaving a typical signature on a design outcome. It is often possible to guess, from the design outcome, which tools and processes were used or what is the structure of a design organization.*
**Alternative names**: *Conway's law*


The strengths and limitations of design techniques directly influence design outcomes’ form and possibilities. Design tools may empower designers, but they also constraint designers’ actions. This is not necessarily a disadvantage. As noted by Myers, since all user interfaces created with the same tool will be similar, such tools help achieving a consistent look and feel ([Myers et al. 2000](#Myers2000)). For instance, the [Google Material Design](https://material.google.com/) is a design language for creating unified user experiences across diverse platforms and devices. While being very flexible, this language also comes with a number of standard [predefined elements and resources](https://design.google.com/resources/), such as [material icons](https://design.google.com/icons/), which can give applications a distinctive Google material look and feel.

Mary Collins, in her post ["Web Design Trends: Why Do All Websites Look the Same?"](https://www.friday.ie/journal/why-do-all-websites-look-the-same/) argued that many of the modern websites style-wise look very similar: "large full width background image or video in the header, overlaid text, followed by a block of short text, and then the obligatory icon columns". Collins argued that this uniformity has its origins in popularity of UI frameworks, in particular [Bootstrap](http://getbootstrap.com/), as well as availability of pre-designed website themes, such as those in [WordPress](https://wordpress.com/).

![Several popular WordPress themes, all having very similar style.](images/wordpress-themes.png)

Having design tools that impose strong constraints, while limiting designers, also can simplify design of new design outcomes. Tools without such constraints may lead designers to create unnecessarily complex and difficult to use designs. This issue is nicely illustrated in the Nielsen’s 2010 report on usability of iPad applications:

*“The first crop of iPad apps revived memories of Web designs from 1993, when Mosaic first introduced the image map that made it possible for any part of any picture to become a UI element. As a result, graphic designers went wild: anything they could draw could be a UI, whether it made sense or not. It's the same with iPad apps: anything you can show and touch can be a UI on this device. There are no standards and no expectations."* ([Nielsen 2010](#Nielsen2010))

The main disadvantage of using tools with predefined elements and constraints is that they may limit the creativity of designers. Consequently, tools with less constraints may lead to more innovative designs. As argued by [Shneiderman et al. (2007)](#Shneiderman2007), the success of [Flash](https://en.wikipedia.org/wiki/Adobe_Flash) user interface tool was partially based on lack of predefined widgets. It stimulated innovative designs because it encouraged designers to explore different ways to control the interaction, instead of just using buttons and scroll bars.

The technique signature pattern is also visible at the level of design processes and organizations. Established processes and organizational structures may influence the form of design outcomes. Melvin Conway, in what is nowadays known as *the Conway's law*, stated that organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations ([Conway 1968](#Conway1968), [http://www.design.caltech.edu/erik/Misc/Conway.html](http://www.design.caltech.edu/erik/Misc/Conway.html)). For instance, two software modules A and B cannot interface correctly with each other unless the designer and implementer of A communicates with the designer and implementer of B. Similarly, [Bass et al. (2012)](#Bass2012) reported a case in which a software architect was asked by the management to add a database component to the software solution, not because of its suitability, but because the database department of the company was overstaffed and underworked and they needed something to do (page 59). [MacCormack et al. 2012](#MacCormack2012) explored the duality between product and organizational architectures, highlighting the impact of organizational design decisions on the technical structure of the artifacts that these organizations develop.

![Illustration of the Conway's Law by Martin Fowler, https://martinfowler.com/articles/microservices.html](images/conways-law.png)


### PATTERN 7: OUTCOME SIGNATURE

**Summary**: *A design technique is adapted to the design outcome, sometime to the point that a design technique reflects in many aspects the intended shape of the outcome.*

**Alternative names**: "Specialization", "*Inverse Conway's law*

The structure of design outcomes may influence the tools, methods, processes and whole organizations that are used to build such outcomes. The design tools often need to be adapted to create a particular design outcome. For example, many software design tools are configurable so that frequently used functions are more easily accessible (e.g. via shortcuts or toolbar buttons). In this way, the configured tool becomes optimized for particular tasks, making these tasks easier, and other more difficult.

Working on a particular types of design outcomes, also leads to improvements of designers’ skills and knowledge. Working with the same tool to create similar design outcomes (e.g. mobile applications, web applications), will lead designers to develop a specific set of skills, biased at efficiently creation of such design outcomes. Once such skills are developed, designers may much more effectively create new design outcomes. This, in turn, may lead to other positive consequences, such as more rapid prototyping and more iterations of iterative design that is a crucial component of achieving high-quality user interfaces ([Myers et al. 2000](#Myers2000); [Nielsen 1993](#Nielsen1993)).

The outcome signature pattern also happens at the process and organizational levels. [Bass et al. (2012)](#Bass2012), for instance, argued that software design often describes not only the structure of the design outcome, but that it can engrave the structure of the development project and sometimes the structure of the entire organization (page 33). They elaborated that a normal method for dividing up the labor is to assign to different groups different portions of the system to construct. Such work-breakdown structure in turn dictates units of planning, schedule and budget; inter-team communication channels; configuration control and file-system organization; test plans and procedures; and even minutiae such as how the project internet is organized and who sits with whom at the company picnic. Sam Newman similarly provides an example of an organizational structure that grew up around the product  architecture [(Newman 2005, page 201)](#Newman2015).

This pattern is connected to the *good carpenter* pattern. Having tools and skills optimized for creating a particular type of a design outcome, may stimulate designers to reuse their tools and skills in new design situations. But this optimization may also lead to the *cherry picking* pattern, and stimulate designers to choose only those situations where a specific type of design outcome is required.

![Hammer-heads optimized for different purposes. Photo from Wikimedia Commons](images/hammerheads.png)


### PATTERN 8: DESIGN-BY-BUZZWORD

**Summary**: *A designer is joining a growing trend in using some technology, often in an opportunist way. New opportunities of a particular technique are shaping the design outcome.*

**Alternative name**: *opportunistic design*

Design-by-buzzword is a relation between design outcomes and design techniques where designers are attempting to produce useful application for some novel, not widely explored opportunities of their design techniques (e.g. [Ncube et al. 2008](#Ncube2008)). Design-by-buzzword is consequence of both, designer’s creativity, as well as changed expectations of users who are constantly learning about technology advances. Introduction an iPhone, for instance, radically changed user’s expectations of mobile applications ([e.g. see "How iPhone Changed the World"](http://www.cultofmac.com/103229/how-iphone-changed-the-world/)).

New technology opportunities are one of the main reasons for constant change of designs. [Brooks (1995)](#Brooks1995) noted that new opportunities in technology are often driving the changes of software design: “*If not new computers, then at least new disks, new displays, new printers come along; and the software must be conformed to its new vehicles of opportunity*” (page 12). [Boehm and Bhuta (2008)](#Boehm2008) argued that software projects that do not capitalize on new opportunities will generally find their products unable to compete.

![The iPhone family. Introduction an iPhone radically changed user’s expectations of mobile applications.](images/iPhone-Family_US-EN-PRINT.png)

Design-by-buzzword may also lead to unnecessary complex and unsuccessful projects. [Roy Thomas Fielding (2000)](#Fielding2000) noted that software projects often begin with adoption of the latest "fad" in architectural design. Only later, if at all, it is discovered whether or not the system requirements call for such an architecture.

Closely related to design-by-buzzword is end-user development and meta-design ([Fischer et al. (2004)](#Fischer2004)). They elaborated that, rather than presenting users with closed systems, meta-design provides them with opportunities, tools, and social structures to adapt and extend the system to fit their needs.

This pattern is related to the *a solution looking for a problem* pattern as new opportunities embedded in a design outcome may lead to new usages.


## C. Interactions Between a Design Situation and a Design Technique

![](images/Model_Situation_Technique.png)

The design situation and the design technique can influence each other in a number of ways. A designer is often pictured as a craftsman, that is, as someone who picks and chooses tools freely based on the situation and grounded in a judgment of overall benefits from using a specific technique ([Stolterman 2008](#Stolterman2008b)). Many of these factors are influenced by the specifics of the design situation at hand, and the designer has limited influence on them. Budget limitations, for instance, can influence the selection of materials and consequently tools and processes to work with these materials. The deadline imposed by clients may restrict the number of design iterations and limit the amount of testing and evaluation. Size and criticality of a situation may ask for different software development approaches (e.g. [Cockburn 2000](#Cockburn2000)). In some situations, the customer may ask a designer and his company to use some technique, for example, the Scrum software development methodology.

The choice of design tool is never trivial and never a sole function of the situation requirements. The ‘benefits’ of using some tools also depend on the level of skill and mastery required, external pressure about standards, personal style of expression. The designer is also almost never in full control about which techniques will be used and how they will be adapted to a particular situation.

We discuss the following patterns of these relations between the design technique and situation:

* Technique Conformity,
* Good Carpenter, and
* Cherry Picking.


### PATTERN 9: TECHNIQUE CONFORMITY

**Definition:** *A technique is used in a design situation out conformity, because the tools is popular or has often been used in similar situations. This usage of a technique further contributes to popularity of a tool and its usage in similar design situations.*

The designer’s selection of tools is influenced by a number of external factors. Often, designers will select a tool out of conformity, because other designers use it. Popularity of some design tool or techniques is often the main reason for its usage. For instance, in the domain of graphic design, [Adobe](http://www.adobe.com) tools (e.g. Photoshop, Illustrator and InDesign) are the most popular tools, and are often described as *de facto* industry standard graphics editing.

Tool usage, also influences the future tool development. By using and buying a particular tool, designer’s increase the popularity of the tool and the profit of the producer, which can further stimulate the spread and use of the tool. Successful project are good references for tools used in them, and may be the main reason why others will select this tools for new projects.

The most popular design tools are often introduced at schools and universities, further contributing to the popularity and widespread use of the tools. Adobe, for example, offers [educational resources and discounts](http://www.adobe.com/education.edu.html) on their products for teachers and students. In software design schools, Java, one of the most popular programming languages, is often used as the first programming languages that students learn. Before that, popularity of C++ in industry has led to it being often used for teaching as well [Kölling (1999)](#Kolling1999).

Tools conformity has a number of advantages for designers. Well known tools normally have strong community and learning resources, enabling a designer to easier master the tool. Tool conformity also has advantages for design companies. It is easier to find new employees for popular tools.

Downside of technique conformity is the "tunnel vision" issue. Popular tools need to stay relevant for a number of users and may decide to focus on developing only the most common features. Another potentially negative issue is the “lock-in”, as artifacts created with some design tool may not be further developed by other tools.

![Three examples of buildings in the Amsterdam School style, a style of architecture that popular from 1910 through about 1930 in the Netherlands. Buildings of the Amsterdam School are characterized by brick construction with complicated masonry with a rounded or organic appearance, relatively traditional massing, and the integration of an elaborate scheme of building elements inside and out. Wikimedia Commons, Amsterdam Municipal Department for the Preservation and Restoration of Historic Buildings and Sites (bMA)](images/Amsterdamse school.png)


### PATTERN 10: GOOD CARPENTER, EATING ITS OWN DOGS FOOD, AND GOLDEN HAMMER

**Summary**: *In a new design situation, a designer uses proven and familiar tools. A failure to achieved desired results is seen as lack of skills and creativity, rather than as a limitation of tools.*

**Motto**: *“it is a poor carpenter that blames his tools”*

The good carpenter pattern can be summarized as follows: if some tool or approach has been successful in previous design activities, it makes sense to these tools again. Using familiar and proven tools in new design situations usually enables more efficient design and gives more predictability because designers know limits and possibilities of these tools. Commitment to a particular technique can enable development of mastery in using this technique. And if a whole company commits to using a particular technique, it may have a positive effect on their operations. Many people will share the same knowledge and skills, learn from each other, and in general easier communicate and collaborate.

A special case of the good carpenter pattern is the “*eating its own dog food*” pattern ([Harrison 2006](#Harrison2006)). To demonstrate confidence in its products, many design companies are forcing themselves to use their own products. A famous example is the memo sent in 1980 by the Apple Computer’s president Michael Scott asking employees to stop using typewriters and instead use Apple word processing software ([Ditlea 1981](#Ditlea1981)).

While it may be good to rely on a selected technique, an over-reliance on a familiar technique has its downsizes, famously expressed as *“if all you have is a hammer, everything looks like a nail”*. Each tool and process comes with different concepts and abstractions, giving designers “lenses” through they can view the design situation. If these “lenses” are too focused, designers may over-emphasize the parts of the situation that fit nicely in their process or to their tool, and under-emphasize the parts where there is a less obvious match. Or designer may create unnecessary complex solutions (e.g. see [Plauger 1992](#Plauger1992), and discussion on [the Second-System Effect](https://en.wikipedia.org/wiki/The_Mythical_Man-Month#The_second-system_effect) in [Brooks 1995](#Brooks1995)). In software design, there is a similar notion of a silver bullet or golden hammer, "*a familiar technology or concept applied obsessively to many software problems*" ([Brown et al. 1998: p 111](#Brown1998)). Unified Modeling Language (UML) and Extensible Markup Language (XML) are examples of technologies that have been used almost “obsessively” in software design, even though in some cases such tools were not effective or sufficient (see [Bell 2004](#Bell2004); [Wilde and Glushko 2008](#Wilde2008)).

In all of these three patterns there is the commitment to some technique. On a positive side, this commitment may enable development of the technique mastery and stimulate improvements of the technique itself. On the negative side, the over-commitment may lead to worse design outcomes and lost opportunities compared to the situation in which some other technique is used.

![Mike Scott Memo - No More Typewritters, archive.org](images/Apple_Memo_No_Typewriters.jpg)

### PATTERN 11: CHERRY PICKING

**Summary**: *Design situations are selected based on how easily they can be approached with a preferred technique. Other situations are avoided.*

In domains where designers can choose the situation to work on, they may select situations by how they match the methods and tools that they are familiar and comfortable with ([Stolterman and Pierce 2012](#Stolterman2012)). Many designers may decide to specialize, and avoid designing in unfamiliar situations where they may not be able to use tools that they are familiar with.

Cherry picking is not necessarily a negative phenomenon. [Ries and Ries (2002: p 8)](#Ries2002), for instance, claimed that companies are likely to be more successful if they focus their energies on one specific skill instead of trying to master a number of different ones.

In domains where a rigor in applying a technique is valued more than the practical value of a design outcome, such as in academic environments, this issue can be even more elaborate. [Greenberg and Buxton 2008](#Greenberg2008), for example, argued that the ACM CHI conference has a methodology bias, where certain kinds of methods are considered more ‘correct’ and thus acceptable than others, with the consequence that people now likely generate ‘research questions’ and ‘designs’ that are amenable to a chosen method, rather than the other way around: “*That is, they choose a method perceived as ‘favored’ by review committees, and then find or fit a problem to match it. … That is, researchers first choose the method (e.g., controlled study) and then concoct a problem that fits that method.*” In this case the domain and selection of situations that are of interest for that domain (in this example the interaction design domain) is more influenced and shaped by the tools and methods that we like than by the importance of the problems.


## D. Complex Patterns

Patterns may facilitate describing complex influences among elements of design activities as a combination of several higher-level arrangements of such influences. In this way, we can describe, compare, and contrast, diverse and complex design activities in similar terms and on a higher level of abstraction. We can, for instance, talk about some typical combination of patterns. When a new situation appears, designers’ attempt to change that situation may lead to the *co-evolution* pattern. A novel or better technique may be needed for this situation, which will lead to the emergence of the *outcome signature* pattern. Through *good carpenter* and *eating its own dog food* patterns the technique can further develop and gain popularity. Once stabile and popular the technique may become a de facto standard, and lead to the *technique conformity* pattern. The *technique conformity* may lead the *technique signature* pattern. The *technique signature* pattern, on the other hand may trigger a reaction of customers wanting something new and original, which may result in new design situations.

When describing design activity as a combination of relational patterns, it is important to note that the described patterns are not all of the same kind when it comes to temporality and duration, as well as location or scope. We may distinguish between, at least, two groups of patterns:

* Patterns of short-term relations, normally occurring within a particular project in a limited period of time, and
* Patterns of long-term relations, normally occurring over a longer period of time among multiple projects.

This difference in temporality and location of patterns suggest the need for techniques to estimate the long-term impact of design. [Penzenstadler et al. (2014)](#Penzenstadler2014), for instance, argued that software engineers could considerably improve civilization’s sustainability by taking into account not just the first-order impacts of software systems but also their second- and third-order impacts. Our framework, could support these types of reasoning. For example, the *co-evolution* pattern is normally intrinsic to the design activity and people involved in it, and the pattern exists during a concrete project. The *boomerang pattern*, on the other hand is primarily a consequence of indirect interaction though a number of elements outside the main design activity. Some patterns reflect both short-term and long-term relations. For example, the *eating its own dog food* pattern has immediate short-term effect on the project where it is being used, but it also promotes particular techniques, which, on the long-term, will influence many other design projects.

Lastly, the proposed framework may be useful to discuss different levels of difficulties of design. Similar to [Gero (1990)](#Gero1990), we may talk about routine design vs. innovative / creative design, later generally considered more difficult. In routine designs, we normally have better defined situations and we are using familiar and proven tools. There we may primarily expect to see the *good carpenter* pattern and possibly the *puzzle solving* pattern, with little of other patterns occurring. Routine design may also be the consequence of the *cherry picking* pattern. In innovative design, on the other hand we may expect to see the *co-evolution pattern*, with possibly the *design-by-buzzword* and *a solution looking for a problem* patterns. Innovative / creative design is also more likely to lead to the *boomerang* and *collateral damage* patterns, as we are dealing with more novel and unknown elements.

![The formation of complex symmetrical and fractal patterns in snowflakes exemplifies emergence in a physical system. In philosophy, systems theory, science, and art, emergence is a phenomenon whereby larger entities arise through interactions among smaller or simpler entities such that the larger entities exhibit properties the smaller/simpler entities do not exhibit. Wikipedia](images/SnowflakesWilsonBentley.jpg)