# 2000
{pagebreak}






![](images-high-quality/2000-1.jpg)




{pagebreak}

  
* * *

| "We can learn much from the **business community** about **effective technology transfer**. In particular, understanding the **interests** of **different types of adopters** can suggest to us the different kinds of **evidence** needed to **convince** someone to try an **innovative technology**. At the same time, the **legal community** offers us advice about what kinds of **evidence** are needed to **build convincing cases** that an innovation is an **improvement** over current practice." |


* * *

|*Shari Lawrence Pfleeger, Winifred Menezes, **Marketing Technology to Software Practitioners**, IEEE Software, January 2000.[^foo1]*|

[^foo1]: [DOI: 10.1109/52.819965 ](http://doi.ieeecomputersociety.org/10.1109/52.819965)
 
 
{pagebreak}


  
* * *

| "Rather than integrating methods from the social sciences into the systems design process as others have done, this **crosspollination** effort strives to **inform and improve** the development of software engineering itself through a **deeper understanding** of our communityâ€™s implicit **values and beliefs**." |


* * *

|*Helen Sharp, Hugh Robinson, Mark Woodman, **Software Engineering: Community and Culture**, IEEE Software, January 2000.[^foo2]*|

[^foo2]: [DOI: 10.1109/52.819967 ](http://doi.ieeecomputersociety.org/10.1109/52.819967)
 
 
{pagebreak}






![](images-high-quality/2000-2.jpg)




{pagebreak}

  
* * *

| "That philosophy of **extinction** has been replaced with one of **extension** and inclusion. **Cobol applications** are, by and large, **too critical** and **too valuable** to consider replacing en masse." |


* * *

|*Edmund C. Arranga, Wilson Price, **Guest Editors' Introduction: Fresh from Y2K, What's Next for Cobol?**, IEEE Software, March 2000.[^foo3]*|

[^foo3]: [DOI: 10.1109/MS.2000.841599 ](http://doi.ieeecomputersociety.org/10.1109/MS.2000.841599)
 
 
{pagebreak}


  
* * *

| "Although recent Internet, Java, and OO trends threaten **Cobol's dominance**, industry will continue to need the language and its programmers for development as well as maintenance--especially once OO Cobol becomes an official standard." |


* * *

|*Bill C. Hardgrave, E. Reed Doke, **Cobol in an Object-Oriented World: A Learning Perspective**, IEEE Software, March 2000.[^foo4]*|

[^foo4]: [DOI: 10.1109/52.841601 ](http://doi.ieeecomputersociety.org/10.1109/52.841601)
 
 
{pagebreak}


  
* * *

| "Contrary to persistent myths, a **committee** initially **created Cobol in 1959**, not one person. ... This material is based on documents from the 1959 committee work..." |


* * *

|*Jean E. Sammet, **The Real Creators of Cobol**, IEEE Software, March 2000.[^foo5]*|

[^foo5]: [DOI: 10.1109/52.841602 ](http://doi.ieeecomputersociety.org/10.1109/52.841602)
 
 
{pagebreak}


  
* * *

| "**Cobol 2002**, the **new Cobol standard**, is expected to be finalized in approximately 18 months. Cobol 2002 builds on Cobol's first-class data handling capabilities and introduces **object-oriented features**, environmental improvements, and many other modern constructs to the language." |


* * *

|*Don Schricker, **Cobol for the Next Millennium**, IEEE Software, March 2000.[^foo6]*|

[^foo6]: [DOI: 10.1109/52.841606 ](http://doi.ieeecomputersociety.org/10.1109/52.841606)
 
 
{pagebreak}






![](images-high-quality/2000-3.jpg)




{pagebreak}

  
* * *

| "The **Y2K issue** generated an enormous flood of activity for organizations worldwide. While we **survived Y2K** with **minor glitches**, the Y2K 'exercise' forced both developers and users of software to appreciate the need for software to function correctly in expected and unexpected situations. None of us is **immune to the problems** of the software industry." |


* * *

|*David M. Weiss, Betty H.C. Cheng, **Guest Editors' Introduction: Requirements Engineering-Integrating Technology**, IEEE Software, May 2000.[^foo7]*|

[^foo7]: [DOI: 10.1109/MS.2000.896245 ](http://doi.ieeecomputersociety.org/10.1109/MS.2000.896245)
 
 
{pagebreak}


  
* * *

| "There's something I **don't understand** about the **open-source movement**. Oh, I understand open source **intellectually**. ... What I **don't understand** is something more **sociological**. I don't understand who those folks are who want to do all that **code reading and reviewing** for **no recompense**. It goes against the grain of everything I know about the software field." |


* * *

|*Robert L. Glass, **The Sociology of Open Source: Of Cults and Cultures**, IEEE Software, May 2000.[^foo8]*|

[^foo8]: [DOI: 10.1109/MS.2000.10027 ](http://doi.ieeecomputersociety.org/10.1109/MS.2000.10027)
 
 
{pagebreak}






![](images-high-quality/2000-4.jpg)




{pagebreak}

  
* * *

| "A '**one size fits all**' approach **doesn't work** in software development. Processes work or are appropriate only under certain conditions." |


* * *

|*Ioana Rus, Mikael Lindvall, **Guest Editors' Introduction: Process Diversity in Software Development**, IEEE Software, July 2000.[^foo9]*|

[^foo9]: [DOI: 10.1109/MS.2000.854063 ](http://doi.ieeecomputersociety.org/10.1109/MS.2000.854063)
 
 
{pagebreak}


  
* * *

| "The software industry has practiced **pair programming**--two programmers working side by side at one computer on the same problem--for years. But people who haven't tried it often reject the idea as a waste of resources. ... pair programming yields **better software products** in **less time**--and **happier**, **more confident** programmers." |


* * *

|*Ward Cunningham, Laurie Williams, Robert R. Kessler, Ron Jeffries, **Strengthening the Case for Pair Programming**, IEEE Software, July 2000.[^foo10]*|

[^foo10]: [DOI: 10.1109/52.854064 ](http://doi.ieeecomputersociety.org/10.1109/52.854064)
 
 
{pagebreak}


  
* * *

| "**Scrum** is a process for **incrementally building** software in complex environments. Scrum provides **empirical controls** that allow the development to occur as close to the edge of chaos as the developing organization can tolerate. ... During the sprint, the team holds frequent (usually **daily**) Scrum **meetings**. These meetings address the observation made by **Brooks**: 'How does a project get to be a year late? One day at a time.' When the team comes together for a short, daily meeting, **any slip is immediately obvious** to everyone." |


* * *

|*Norman S. Janoff, Linda Rising, **The Scrum Software Development Process for Small Teams**, IEEE Software, July 2000.[^foo11]*|

[^foo11]: [DOI: 10.1109/52.854065 ](http://doi.ieeecomputersociety.org/10.1109/52.854065)
 
 
{pagebreak}


  
* * *

| "**Different methodologies** are inevitable, stemming directly from the questions of what constitutes a methodology and what are a methodology's underlying principles. Projects differ according to **size**, **composition**, **priorities**, and **criticality**." |


* * *

|*Alistair Cockburn, **Selecting a Project's Methodology**, IEEE Software, July 2000.[^foo12]*|

[^foo12]: [DOI: 10.1109/52.854070 ](http://doi.ieeecomputersociety.org/10.1109/52.854070)
 
 
{pagebreak}


  
* * *

| "Although the organizations included in this section **differ in continents and cultures**, several **common themes** emerge from these reports. All organizations had **quantifiable business targets** and managed their pursuit of these targets empirically." |


* * *

|*Bill Curtis, **Guest Editor's Introduction: The Global Pursuit of Process Maturity**, IEEE Software, July 2000.[^foo13]*|

[^foo13]: [DOI: 10.1109/MS.2000.854072 ](http://doi.ieeecomputersociety.org/10.1109/MS.2000.854072)
 
 
{pagebreak}


  
* * *

| "By '**ad hoc**,' most computing people have meant something that is **chaotic and undisciplined**; it became a sort of computing dirty word. But a closer look at the dictionary says that '**ad hoc**' really means '**tailored to the problem at hand**.' Ad hoc approaches might or might not be chaotic, the dictionary is telling us, but what they are really about is using **a best approach** determined not by some kind of project-independent thinking, but by some very **project-focused thinking**." |


* * *

|*Robert L. Glass, **Process Diversity and a Computing Old Wives'/Husbands' Tale**, IEEE Software, July 2000.[^foo14]*|

[^foo14]: [DOI: 10.1109/MS.2000.10036 ](http://doi.ieeecomputersociety.org/10.1109/MS.2000.10036)
 
 
{pagebreak}






![](images-high-quality/2000-5.jpg)




{pagebreak}

  
* * *

| "The Internet and public phone system (upon which the Internet sits) provide an **information highway** that also was **not designed to thwart** 'bad guys.' As a result, today we rely on an infrastructure that **enables** rogue **individuals and nations** to **remotely attack** information assets." |


* * *

|*Nancy Mead, Jeffrey Voas, **Guest Editor's Introduction: Malicious IT**, IEEE Software, September 2000.[^foo15]*|

[^foo15]: [DOI: 10.1109/MS.2000.10040 ](http://doi.ieeecomputersociety.org/10.1109/MS.2000.10040)
 
 
{pagebreak}


  
* * *

| "**Malicious code** is any code added, changed, or removed from a software system to **intentionally cause harm** or subvert the system's intended function." |


* * *

|*Gary McGraw, Greg Morrisett, **Attacking Malicious Code: A Report to the Infosec Research Council**, IEEE Software, September 2000.[^foo16]*|

[^foo16]: [DOI: 10.1109/52.877857 ](http://doi.ieeecomputersociety.org/10.1109/52.877857)
 
 
{pagebreak}


  
* * *

| "**Attacks** can involve numerous attackers targeting many **victims**. Defining what constitutes an attack is difficult because multiple perspectives are involved. The **attacker viewpoint** is typically characterized by **intent** and **risk of exposure**. From a **victim's perspective**, intrusions are characterized by their **manifestations**, which might or might not include **damage**. " |


* * *

|*Julia Allen, John McHugh, Alan Christie, **Defending Yourself: The Role of Intrusion Detection Systems**, IEEE Software, September 2000.[^foo17]*|

[^foo17]: [DOI: 10.1109/52.877859 ](http://doi.ieeecomputersociety.org/10.1109/52.877859)
 
 
{pagebreak}


  
* * *

| "**Jslint** ... statically **scans Java source code** looking for potentially **insecure coding practices**. Automated source code scanning tools can help programmers easily **prevent some types of bugs**." |


* * *

|*Gary McGraw, Edward W. Felten, John Viega, Tom Mutdosch, **Statically Scanning Java Code: Finding Security Vulnerabilities**, IEEE Software, September 2000.[^foo18]*|

[^foo18]: [DOI: 10.1109/52.877869 ](http://doi.ieeecomputersociety.org/10.1109/52.877869)
 
 
{pagebreak}


  
* * *

| "We now realize that **small-scale software engineering** is **not** just a **degenerate case of large-scale software engineering** but an important subfield in its own right. " |


* * *

|*Robert Ward, Mauri Laitinen, Mohamed Fayad, **Guest Editors' Introduction: Software Engineering in the Small**, IEEE Software, September 2000.[^foo19]*|

[^foo19]: [DOI: 10.1109/MS.2000.10047 ](http://doi.ieeecomputersociety.org/10.1109/MS.2000.10047)
 
 
{pagebreak}


  
* * *

| "**Computer science research** was where we would have expected **generalized solutions** to arise. But that is simply **not the case**. CS might have begun the domain generalization movement with its compiler-compiling work, but **the world of practice**, and especially the world of vendors, quickly took over that choreâ€”and that dramatic success." |


* * *

|*Robert L. Glass, **The Generalization of an Application Domain**, IEEE Software, September 2000.[^foo20]*|

[^foo20]: [DOI: 10.1109/MS.2000.10043 ](http://doi.ieeecomputersociety.org/10.1109/MS.2000.10043)
 
 
{pagebreak}






![](images-high-quality/2000-6.jpg)




{pagebreak}

  
* * *

| "**Estimates** have a number of uses, and you can often get both better and simpler estimates if you **keep the use** of your estimate **in mind**." |


* * *

|*Richard E. Fairley, Barry W. Boehm, **Guest Editors' Introduction: Software Estimation Perspectives**, IEEE Software, November 2000.[^foo21]*|

[^foo21]: [DOI: 10.1109/MS.2000.895164 ](http://doi.ieeecomputersociety.org/10.1109/MS.2000.895164)
 
 
{pagebreak}


  
* * *

| "Several **estimation techniques and tools** are available for **predicting the amount of time** and effort needed to develop software systems. Most of these techniques require a wide variety of **input factors**, including **historical data**, system **complexity measures**, the development team's **level of skill**, any project **constraints**, and an estimate of the **volume of code** (the project's size). " |


* * *

|*James Bielak, **Improving Size Estimates Using Historical Data**, IEEE Software, November 2000.[^foo22]*|

[^foo22]: [DOI: 10.1109/52.895165 ](http://doi.ieeecomputersociety.org/10.1109/52.895165)
 
 
{pagebreak}


  
* * *

| "**Product quality** directly relates to project **cost** and **schedule estimation**; for example, **undetected defects** in a key work productâ€”such as a requirements documentâ€”might lead to time-consuming adjustments. " |


* * *

|*Stefan Biffl, **Using Inspection Data for Defect Estimation**, IEEE Software, November 2000.[^foo23]*|

[^foo23]: [DOI: 10.1109/52.895166 ](http://doi.ieeecomputersociety.org/10.1109/52.895166)
 
 
{pagebreak}


  
* * *

| "One of the most important factors in **improving worker** performance is **prompt and explicit feedback**. " |


* * *

|*Watts S. Humphrey, **Guest Editor's Introduction: The Personal Software Process-Status and Trends**, IEEE Software, November 2000.[^foo24]*|

[^foo24]: [DOI: 10.1109/MS.2000.895171 ](http://doi.ieeecomputersociety.org/10.1109/MS.2000.895171)
 
 
{pagebreak}


  
* * *

| "'**How important is mathematics** to the software **practitioner**?' According to this research, at least, the answer is not only 'not very much,' it's '**not nearly as much** as we academics have thought.'" |


* * *

|*Robert L. Glass, **A New Answer to 'How Important is Mathematics to the Software Practitioner?'**, IEEE Software, November 2000.[^foo25]*|

[^foo25]: [DOI: 10.1109/MS.2000.10052 ](http://doi.ieeecomputersociety.org/10.1109/MS.2000.10052)
 
 
{pagebreak}


# 2001
{pagebreak}






![](images-high-quality/2001-1.jpg)




{pagebreak}

  
* * *

| "**Usability is not a luxury** but a basic ingredient in software systems: People's **productivity** and **comfort** relate directly to the usability of the software they use." |


* * *

|*Helmut Windl, Natalia Juristo, Larry Constantine, **Guest Editors' Introduction: Introducing Usability**, IEEE Software, January 2001.[^foo26]*|

[^foo26]: [DOI: 10.1109/MS.2001.903155 ](http://doi.ieeecomputersociety.org/10.1109/MS.2001.903155)
 
 
{pagebreak}


  
* * *

| "Contrary to what some might think, **usability** is not just the appearance of the user interface (UI). Usability relates to how the system interacts with the user, and it includes five basic attributes: **learnability**, **efficiency**, user **retention** over time, **error rate**, and **satisfaction**." |


* * *

|*Helmut Windl, Natalia Juristo, Xavier FerrÃ©, Larry Constantine, **Usability Basics for Software Developers**, IEEE Software, January 2001.[^foo27]*|

[^foo27]: [DOI: 10.1109/52.903160 ](http://doi.ieeecomputersociety.org/10.1109/52.903160)
 
 
{pagebreak}


  
* * *

| "**A cost-benefit analysis** might be a necessary first step in introducing usability into your organization or a particular project. In usability cost-benefit analyses, the goal is to estimate the **costs and benefits** of specific usability activitiesâ€”such as **prototyping**, usability **testing**, heuristic **evaluation**, and so onâ€”and contrast them with the likely **costs of not conducting** the activities." |


* * *

|*George M. Donahue, **Usability and the Bottom Line**, IEEE Software, January 2001.[^foo28]*|

[^foo28]: [DOI: 10.1109/52.903161 ](http://doi.ieeecomputersociety.org/10.1109/52.903161)
 
 
{pagebreak}


  
* * *

| "Over the last year, I've been struck by one of the underlying principles that leads to **better designs**: **remove duplication**. ... Often, the **hard part** of eliminating duplication is **spotting it** in the first place. " |


* * *

|*Martin Fowler, **Avoiding Repetition**, IEEE Software, January 2001.[^foo29]*|

[^foo29]: [DOI: 10.1109/52.903175 ](http://doi.ieeecomputersociety.org/10.1109/52.903175)
 
 
{pagebreak}






![](images-high-quality/2001-2.jpg)




{pagebreak}

  
* * *

| "**Global Software Development** requires close cooperation of individuals with different **cultural backgrounds**. Cultures differ on many critical dimensions, such as the need for **structure**, attitudes toward **hierarchy**, sense of **time**, and **communication** styles. " |


* * *

|*Deependra Moitra, James D. Herbsleb, **Guest Editors' Introduction: Global Software Development**, IEEE Software, March 2001.[^foo30]*|

[^foo30]: [DOI: 10.1109/52.914732 ](http://doi.ieeecomputersociety.org/10.1109/52.914732)
 
 
{pagebreak}


  
* * *

| "Despite the considerable power of today's **asynchronous technologies** for dispersed workâ€”email, voice mail, online discussion groups, project management tools, Software Configuration Management, and issue and defect-tracking databasesâ€”there are still **powerful reasons for synchronous**â€”if not **face-to-face**â€”communication. Synchronous communication includes telephone, audio conferencing, videoconferencing, application sharing, and sometimes synchronous online code walkthroughs." |


* * *

|*Ritu Agarwal, Erran Carmel, **Tactical Approaches for Alleviating Distance in Global Software Development**, IEEE Software, March 2001.[^foo31]*|

[^foo31]: [DOI: 10.1109/52.914734 ](http://doi.ieeecomputersociety.org/10.1109/52.914734)
 
 
{pagebreak}


  
* * *

| "**Synching** can be problematic because **distance still matters** in our supposedly borderless world. Distance particularly constrains the synching of **tacit knowledge**, **informal information**, and **cultural values**." |


* * *

|*Brian Nicholson, Richard Heeks, Sundeep Sahay, S. Krishna, **Synching or Sinking: Global Software Outsourcing Relationships**, IEEE Software, March 2001.[^foo32]*|

[^foo32]: [DOI: 10.1109/52.914744 ](http://doi.ieeecomputersociety.org/10.1109/52.914744)
 
 
{pagebreak}


  
* * *

| "I learned for myself a design principle that's served me well in software development: **Keep your user interface code separate from everything else**. It's a simple rule, embodied into more than one application framework, but it's often not followed, which causes quite a bit of trouble." |


* * *

|*Martin Fowler, **Separating User Interface Code**, IEEE Software, March 2001.[^foo33]*|

[^foo33]: [DOI: 10.1109/52.914754 ](http://doi.ieeecomputersociety.org/10.1109/52.914754)
 
 
{pagebreak}






![](images-high-quality/2001-3.jpg)




{pagebreak}

  
* * *

| " In the software and information technology industry, **organizational change** has been a way of life. It is quite telling to listen to individuals discussing change in their organizations. Their words frame their philosophies: some **plan and lead** change, others **manage** it, still others **accommodate** change, and many simply try to **cope** with it. " |


* * *

|*Ann Miller, **Guest Editor's Introduction: Organizational Change**, IEEE Software, May 2001.[^foo34]*|

[^foo34]: [DOI: 10.1109/MS.2001.922720 ](http://doi.ieeecomputersociety.org/10.1109/MS.2001.922720)
 
 
{pagebreak}


  
* * *

| "Software process improvement efforts will **fail** if we try to make development **processes completely uniform** across an organization." |


* * *

|*Michael Deck, **Managing Process Diversity While Improving Your Practices**, IEEE Software, May 2001.[^foo35]*|

[^foo35]: [DOI: 10.1109/52.922721 ](http://doi.ieeecomputersociety.org/10.1109/52.922721)
 
 
{pagebreak}


  
* * *

| "Traditional **software measurement**, like traditional software process improvement, is **misaligned** with two of the three **basic strategies**, **customer intimacy** and **product innovativeness**. Measurement initiatives can succeed if you understand your organization's strategic objectives and then tailor your measurement practices to fit." |


* * *

|*Stan Rifkin, **What Makes Measuring Software So Hard?**, IEEE Software, May 2001.[^foo36]*|

[^foo36]: [DOI: 10.1109/52.922724 ](http://doi.ieeecomputersociety.org/10.1109/52.922724)
 
 
{pagebreak}


  
* * *

| "Pressure to **achieve estimation targets** is common and tends to cause programmers to skip good software process. This constitutes an **absurd result** done for an **absurd reason**." |


* * *

|*Robert L. Glass, **Frequently Forgotten Fundamental Facts about Software Engineering**, IEEE Software, May 2001.[^foo37]*|

[^foo37]: [DOI: 10.1109/MS.2001.922739 ](http://doi.ieeecomputersociety.org/10.1109/MS.2001.922739)
 
 
{pagebreak}






![](images-high-quality/2001-4.jpg)




{pagebreak}

  
* * *

| "Between the late 1960s and early 1990s, the software engineering community strove to formalize schemes that would lead to **perfectly correct software**. Although a noble undertaking at first, it soon became apparent that correct software was, in general, unobtainable. And furthermore, the costs, even if achievable, would be overwhelming. Modern software systems, even **if correct**, can still exhibit **undesirable behaviors** as they execute. " |


* * *

|*Jeffrey Voas, **Guest Editor's Introduction: Software Fault Tolerance-Making Software Behave**, IEEE Software, July 2001.[^foo38]*|

[^foo38]: [DOI: 10.1109/MS.2001.936212 ](http://doi.ieeecomputersociety.org/10.1109/MS.2001.936212)
 
 
{pagebreak}


  
* * *

| "**Fault tolerance** is generally implemented by **error detection** and subsequent **system recovery**. Recovery consists of **error handling** (to eliminate errors from the system state) and **fault handling** (to prevent located faults from being activated again). **Fault handling** involves four steps: fault **diagnosis**, fault **isolation**, system **reconfiguration**, and system **reinitialization**." |


* * *

|*Jeffrey Voas, **Fault Tolerance**, IEEE Software, July 2001.[^foo39]*|

[^foo39]: [DOI: 10.1109/MS.2001.936218 ](http://doi.ieeecomputersociety.org/10.1109/MS.2001.936218)
 
 
{pagebreak}


  
* * *

| "There are several ways to describe **coupling**, but it boils down to this: **changing one module** in a program **requires changing another module** ... **Duplication** always **implies coupling**, because changing one piece of duplicate code implies changing the other." |


* * *

|*Martin Fowler, **Reducing Coupling**, IEEE Software, July 2001.[^foo40]*|

[^foo40]: [DOI: 10.1109/MS.2001.936226 ](http://doi.ieeecomputersociety.org/10.1109/MS.2001.936226)
 
 
{pagebreak}






![](images-high-quality/2001-5.jpg)




{pagebreak}

  
* * *

| "Margaret Boden ... identifies basic **types of creative processes**: **exploratory creativity** explores a possible solution space and discovers new ideas, **combinatorial creativity** combines two or more ideas that already exist to create new ideas, and **transformational creativity** changes the solution space to make impossible things possible. Most requirements engineering RE activities are exploratory. " |


* * *

|*Alexis Gizikis, Neil Maiden, **Where Do Requirements Come From?**, IEEE Software, September 2001.[^foo41]*|

[^foo41]: [DOI: 10.1109/52.951486 ](http://doi.ieeecomputersociety.org/10.1109/52.951486)
 
 
{pagebreak}


  
* * *

| "Focus on **building an environment** that will **keep your engineers** ... Give them **rewarding assignments**, build cohesive and **committed teams**, and know what each of them is doing. Then, every week if possible, show that you appreciate their efforts." |


* * *

|*Watts S. Humphrey, **Engineers Will Tolerate a Lot of Abuse**, IEEE Software, September 2001.[^foo42]*|

[^foo42]: [DOI: 10.1109/52.951487 ](http://doi.ieeecomputersociety.org/10.1109/52.951487)
 
 
{pagebreak}


  
* * *

| "Whether you are **benchmarking** an organization or simply a project, it all boils down to **one thingâ€”data**. Do you have the necessary data in your company, and is that data valid and comparable?" |


* * *

|*Katrina D. Maxwell, **Collecting Data for Comparability: Benchmarking Software Development Productivity**, IEEE Software, September 2001.[^foo43]*|

[^foo43]: [DOI: 10.1109/52.951490 ](http://doi.ieeecomputersociety.org/10.1109/52.951490)
 
 
{pagebreak}


  
* * *

| "In 1999, an organization contributed a large group of enhancement projects to the **International Software Benchmarking Standards Group's Data Repository**. The contributing organization received an individual benchmark report for each project, comparing it to the most relevant projects in the repository. ... The benchmarking exercise aimed to provide valuable information to the organization and to measure the benchmarking exercise's effectiveness given the **repository's anonymous nature**." |


* * *

|*Peter R. Hill, Michael Stringer, Chris Lokan, Terry Wright, **Organizational Benchmarking Using the ISBSG Data Repository**, IEEE Software, September 2001.[^foo44]*|

[^foo44]: [DOI: 10.1109/52.951491 ](http://doi.ieeecomputersociety.org/10.1109/52.951491)
 
 
{pagebreak}


  
* * *

| "Most commercial software producers **guard access to the source code** of their systems, making it difficult for anyone outside their organizations to apply a variety of measures that could potentially improve system security. But since an attacker could also examine public source code to find flaws, would source code access be a net gain or loss for security? ... having **source code available** should on balance work **in favor of system security**." |


* * *

|*Michael Caloyannides, Carl Landwehr, Brian Witten, **Does Open Source Improve System Security?**, IEEE Software, September 2001.[^foo45]*|

[^foo45]: [DOI: 10.1109/52.951496 ](http://doi.ieeecomputersociety.org/10.1109/52.951496)
 
 
{pagebreak}


  
* * *

| "There are two widely different views on the **nature of software work**: (1) It is easy, is automatable, and **can be done by anyone**. (2) It is **the most complex undertaking** humanity has ever tried." |


* * *

|*Robert L. Glass, **A Story about the Creativity Involved in Software Work**, IEEE Software, September 2001.[^foo46]*|

[^foo46]: [DOI: 10.1109/MS.2001.951506 ](http://doi.ieeecomputersociety.org/10.1109/MS.2001.951506)
 
 
{pagebreak}






![](images-high-quality/2001-6.jpg)




{pagebreak}

  
* * *

| "Where **design counts** is often not in how the software runs but in **how easy it is to change**. When how it runs is important, **ease of change** can be the biggest factor in ensuring good performance. This drive toward changeability is why it's so important for a design to **clearly show** what the program doesâ€”and how it does it. After all, it's hard to change something when you **can't see** what it does." |


* * *

|*Martin Fowler, **To Be Explicit**, IEEE Software, November 2001.[^foo47]*|

[^foo47]: [DOI: 10.1109/52.965796 ](http://doi.ieeecomputersociety.org/10.1109/52.965796)
 
 
{pagebreak}


  
* * *

| "**Extreme Programming** XP is not the ultimate silver bullet that offers an answer to all development problems. But it has **gained significant momentum** and an increasing number of software teams are ready to give it a try." |


* * *

|*Wolfgang Strigel, **Guest Editor's Introduction: Reports from the Field--Using Extreme Programming and Other Experiences**, IEEE Software, November 2001.[^foo48]*|

[^foo48]: [DOI: 10.1109/MS.2001.965797 ](http://doi.ieeecomputersociety.org/10.1109/MS.2001.965797)
 
 
{pagebreak}


  
* * *

| "The **SW-CMM** focuses on both the **management issues** ... **XP**, on the other hand, is a specific **set of practices**â€”a 'methodology'â€”that is effective in the context of small, colocated teams with rapidly changing requirements. **Taken together**, the two methods can create **synergy**, particularly in conjunction with other good engineering and management practices. " |


* * *

|*Mark C. Paulk, **Extreme Programming from a CMM Perspective**, IEEE Software, November 2001.[^foo49]*|

[^foo49]: [DOI: 10.1109/52.965798 ](http://doi.ieeecomputersociety.org/10.1109/52.965798)
 
 
{pagebreak}


  
* * *

| "All programmers **learn from experience**. A few are rather fast at it and learn to avoid repeating mistakes after once or twice. Others are slower and repeat mistakes hundreds of times. Most programmers' behavior falls somewhere in between: They reliably **learn from their mistakes**, but the process is **slow and tedious**. The probability of making a structurally similar mistake again decreases slightly during each of some dozen repetitions. Because of this a programmer often takes years to learn a certain ruleâ€”positive or negativeâ€”about his or her behavior. " |


* * *

|*Lutz Prechelt, **Accelerating Learning from Experience: Avoiding Defects Faster**, IEEE Software, November 2001.[^foo50]*|

[^foo50]: [DOI: 10.1109/52.965803 ](http://doi.ieeecomputersociety.org/10.1109/52.965803)
 
 
{pagebreak}


  
* * *

| "**Extreme Programming** is a **fascinating collection** of elements, some good and some bad." |


* * *

|*Robert L. Glass, **Extreme Programming: The Good, the Bad, and the Bottom Line**, IEEE Software, November 2001.[^foo51]*|

[^foo51]: [DOI: 10.1109/MS.2001.965816 ](http://doi.ieeecomputersociety.org/10.1109/MS.2001.965816)
 
 
{pagebreak}


# 2002
{pagebreak}






![](images-high-quality/2002-1.jpg)




{pagebreak}

  
* * *

| "Software designers in a **networked world** cannot pretend to work in isolation. **People** are a **critical part** of the full software security equation, and software that makes unrealistic or **unreasonable security-related demands** on users (for example, requiring them to memorize too many passwords that change too often) is software whose security will **inevitably be breached**." |


* * *

|*James A. Whittaker, Chuck Howell, Anup K. Ghosh, **Building Software Securely from the Ground Up**, IEEE Software, January 2002.[^foo52]*|

[^foo52]: [DOI: 10.1109/MS.2002.976936 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.976936)
 
 
{pagebreak}


  
* * *

| "**Buffer overflow vulnerabilities** are perhaps the single most important security problem of the past decade. " |


* * *

|*David Larochelle, David Evans, **Improving Security Using Extensible Lightweight Static Analysis**, IEEE Software, January 2002.[^foo53]*|

[^foo53]: [DOI: 10.1109/52.976940 ](http://doi.ieeecomputersociety.org/10.1109/52.976940)
 
 
{pagebreak}


  
* * *

| "Shout it from the rooftops! **Computing and software are maturing** into amazing, useful, and â€” hooray, hooray! â€” dependable disciplines." |


* * *

|*Robert L. Glass, **Failure Is Looking More like Success These Days**, IEEE Software, January 2002.[^foo54]*|

[^foo54]: [DOI: 10.1109/MS.2002.976953 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.976953)
 
 
{pagebreak}






![](images-high-quality/2002-2.jpg)




{pagebreak}

  
* * *

| "In **real archaeology**, you're investigating some situation, trying to understand what you're looking at and how it all fits together. To do this, you must be careful to **preserve the artifacts** you find and **respect and understand** the cultural forces that produced them. ... **Code** becomes legacy code just about as soon as it's written, and suddenly we have exactly the **same issues as the archaeologists**: What are we looking at? How does it fit in with the rest of the world? And what were they thinking?" |


* * *

|*Dave Thomas, Andy Hunt, **Software Archaeology**, IEEE Software, March 2002.[^foo55]*|

[^foo55]: [DOI: 10.1109/52.991327 ](http://doi.ieeecomputersociety.org/10.1109/52.991327)
 
 
{pagebreak}


  
* * *

| "The real departure for **Web-based enterprise applications** is the possibility of **wide-ranging accessibility**. A system that might be deployed in-house at a manufacturing company can now be deployed to all the dealers of that manufacturer's products. Indeed, it can be deployed to all the customers." |


* * *

|*Martin Fowler, Elizabeth Hendrickson, **The Software Engineering of Internet Software: Guest Editors' Introduction**, IEEE Software, March 2002.[^foo56]*|

[^foo56]: [DOI: 10.1109/MS.2002.991328 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.991328)
 
 
{pagebreak}


  
* * *

| "In **only four or five years**, the **world wide web** has changed from a **static collection** of HTML web pages to a **dynamic engine** that powers e-commerce, collaborative work, and distribution of information and entertainment. ... Web sites that depend on **unreliable software** will **lose customers**, and the businesses could lose much money. Companies that want to do business over the Web must spend resources to ensure high reliability. Indeed, they cannot afford not to." |


* * *

|*Jeff Offutt, **Quality Attributes of Web Software Applications**, IEEE Software, March 2002.[^foo57]*|

[^foo57]: [DOI: 10.1109/52.991329 ](http://doi.ieeecomputersociety.org/10.1109/52.991329)
 
 
{pagebreak}


  
* * *

| "Relatively **few design principles** are required to **design scalable systems** ... : **divide and conquer** (D&C), **asynchrony**, **encapsulation**, **concurrency**, **parsimony**." |


* * *

|*Colleen Roe, Sergio Gonik, **Server-Side Design Principles for Scalable Internet Systems**, IEEE Software, March 2002.[^foo58]*|

[^foo58]: [DOI: 10.1109/52.991330 ](http://doi.ieeecomputersociety.org/10.1109/52.991330)
 
 
{pagebreak}


  
* * *

| "Despite breathless declarations that the Web represents a new paradigm defined by new rules, professional developers are realizing that **lessons learned** in the **pre-Internet days** of software development **still apply**. Web pages are user interfaces, HTML programming is programming, and browser-deployed applications are software systems that can **benefit from basic software engineering principles**." |


* * *

|*Larry L. Constantine, Lucy A.D. Lockwood, **Usage-Centered Engineering for Web Applications**, IEEE Software, March 2002.[^foo59]*|

[^foo59]: [DOI: 10.1109/52.991331 ](http://doi.ieeecomputersociety.org/10.1109/52.991331)
 
 
{pagebreak}


  
* * *

| "Many current **Web technologies** lend themselves to **bad practices**, including **cut-and-paste** reuse, **ad-hoc scripts**, **direct-to-database code**, and **fragmented business logic**. Good design practices are increasingly important in Web development ... a **Model-View-Controller** ... framework lets developers focus on writing application code instead of dealing with servlets, requests, or session variables." |


* * *

|*Alan Knight, Naci Dai, **Objects and the Web**, IEEE Software, March 2002.[^foo60]*|

[^foo60]: [DOI: 10.1109/52.991332 ](http://doi.ieeecomputersociety.org/10.1109/52.991332)
 
 
{pagebreak}


  
* * *

| "How to **test output from the server** is another classic problem because of the nature of Web applications. How do you test HTML? Certainly we don't want tests that assert that the output is some **long string of HTML**. ... Testing the Web page look is not usually the goal; **testing the data in the output** is. Any **slight change** to the outputâ€”for example, a cosmetic change such as making a word appear in redâ€”**should not break an output test**." |


* * *

|*Robert Mee, Edward Hieatt, **Going Faster: Testing The Web Application**, IEEE Software, March 2002.[^foo61]*|

[^foo61]: [DOI: 10.1109/52.991333 ](http://doi.ieeecomputersociety.org/10.1109/52.991333)
 
 
{pagebreak}






![](images-high-quality/2002-3.jpg)




{pagebreak}

  
* * *

| "It is difficult to make **decisions about performance** from **just looking at the design**. Rather, you have to actually **run** the code and **measure performance**." |


* * *

|*Martin Fowler, **Yet Another Optimization Article**, IEEE Software, May 2002.[^foo62]*|

[^foo62]: [DOI: 10.1109/MS.2002.1003448 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1003448)
 
 
{pagebreak}


  
* * *

| "Using **mock objects**, you can **test code in splendid isolation**, simulating all those messy real-world things that would otherwise make automated testing impossible. And, as with many other testing practices, the discipline of using mock objects **can improve your code's structure**." |


* * *

|*Dave Thomas, Andy Hunte, **Mock Objects**, IEEE Software, May 2002.[^foo63]*|

[^foo63]: [DOI: 10.1109/MS.2002.1003449 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1003449)
 
 
{pagebreak}


  
* * *

| "Software organizations' main assets are not plants, buildings, or expensive machines. A software organization's main asset is its **intellectual capital**, as it is in sectors such as consulting, law, investment banking, and advertising. The major problem with intellectual capital is that **it has legs** and walks home every day. At the same rate experience walks out the door, inexperience walks in the door. Whether or not many software organizations admit it, they face the challenge of **sustaining the level of competence** needed to win contracts and fulfill undertakings." |


* * *

|*Ioana Rus, Mikael Lindvall, **Guest Editors' Introduction: Knowledge Management in Software Engineering**, IEEE Software, May 2002.[^foo64]*|

[^foo64]: [DOI: 10.1109/MS.2002.1003450 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1003450)
 
 
{pagebreak}


  
* * *

| "An emerging trend is to develop **knowledge management** and **knowledge sharing initiatives** within organizations. For example, **NASA** formed a Knowledge Management Team, comprised of NASA representatives. NASA Goddard Space Flight Center (GSFC) has several knowledge management initiatives underway on the expert and knowledge retention side." |


* * *

|*Jay Liebowitz, **A Look at NASA Goddard Space Flight Center's Knowledge Management Initiatives**, IEEE Software, May 2002.[^foo65]*|

[^foo65]: [DOI: 10.1109/MS.2002.1003451 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1003451)
 
 
{pagebreak}


  
* * *

| "**Postmortem analysis** is a practical method for initiating knowledge management by **capturing experience** and improvement suggestions from completed projects." |


* * *

|*Andreas Birk, Torgeir DingsÃ¸yr, Tor StÃ¥lhane, **Postmortem: Never Leave a Project without It**, IEEE Software, May 2002.[^foo66]*|

[^foo66]: [DOI: 10.1109/MS.2002.1003452 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1003452)
 
 
{pagebreak}


  
* * *

| "In an effort to improve software development and acquisition processes and explicitly reuse knowledge from previous software projects, **DaimlerChrysler** created a **Software Experience Center**." |


* * *

|*Kurt Schneider, Jan-Peter von Hunnius, Victor Basili, **Experience in Implementing a Learning Software Organization**, IEEE Software, May 2002.[^foo67]*|

[^foo67]: [DOI: 10.1109/MS.2002.1003453 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1003453)
 
 
{pagebreak}


  
* * *

| "The software field has been subjected, over the years, to **excessive claims of benefits** for almost every new technology. Fourth-generation languages were to lead to '**programming without programmers**,' CASE tools would bring about '**the automation of programming**,' and object orientation was to be a dramatic new methodological approach to systems development that would replace all the other, older, methodologies." |


* * *

|*Robert L. Glass, **The Naturalness of Object Orientation: Beating a Dead Horse?**, IEEE Software, May 2002.[^foo68]*|

[^foo68]: [DOI: 10.1109/MS.2002.1003467 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1003467)
 
 
{pagebreak}






![](images-high-quality/2002-4.jpg)




{pagebreak}

  
* * *

| "A **product line**'s scope is specified such that the products have a **high degree of commonality**. A product line organization realizes economically significant reuse..." |


* * *

|*John D. McGregor, Linda M. Northrop, Salah Jarrad, Klaus Pohl, **Guest Editors' Introduction: Initiating Software Product Lines**, IEEE Software, July 2002.[^foo69]*|

[^foo69]: [DOI: 10.1109/MS.2002.1020282 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1020282)
 
 
{pagebreak}


  
* * *

| "**Product line software engineering** is an emerging paradigm that guides organizations toward **developing products from core assets** instead of developing them one by one from scratch." |


* * *

|*Kyo C. Kang, Jaejoon Lee, Patrick Donohoe, **Feature-Oriented Product Line Engineering**, IEEE Software, July 2002.[^foo70]*|

[^foo70]: [DOI: 10.1109/MS.2002.1020288 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1020288)
 
 
{pagebreak}


  
* * *

| "Developers at **Nokia** recently initiated and used a product line to create and deliver **mobile browser products**. They learned that, **to succeed**, a software product line must be **product and application driven**, rather than reuse or platform driven. " |


* * *

|*Ari Jaaksi, **Developing Mobile Browsers in a Product Line**, IEEE Software, July 2002.[^foo71]*|

[^foo71]: [DOI: 10.1109/MS.2002.1020290 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1020290)
 
 
{pagebreak}


  
* * *

| "**The discipline of completeness** is a willingness and ability to search for and deal not just with every **conceivable mode** of failure but with as many **inconceivable mode**s as you can find through exploration and testing." |


* * *

|*Terry Bollinger, **Guest Editor's Introduction: Breaking Out of the Software Engineering Mind-Mold**, IEEE Software, July 2002.[^foo72]*|

[^foo72]: [DOI: 10.1109/MS.2002.1020294 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1020294)
 
 
{pagebreak}


  
* * *

| "Two dichotomies characterize software process improvement efforts and approaches: **disciplined** vs. **creative** work and **procurer risks** vs. **user satisfaction**. " |


* * *

|*Reidar Conradi, Alfonso Fuggetta, **Improving Software Process Improvement**, IEEE Software, July 2002.[^foo73]*|

[^foo73]: [DOI: 10.1109/MS.2002.1020295 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1020295)
 
 
{pagebreak}


  
* * *

| "**Books** on the subject **favor the 'light' side** of the discipline: **project management**, software **process improvement**, schedule and cost estimation, and so forth. The real **technology** necessary to build software is often **described abstractly**, given as obvious, **or ignored** altogether. But software **development is a fundamentally technical problem** for which management solutions can only be partially effective." |


* * *

|*James A. Whittaker, Steven Atkin, **Software Engineering is Not Enough**, IEEE Software, July 2002.[^foo74]*|

[^foo74]: [DOI: 10.1109/MS.2002.1020297 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1020297)
 
 
{pagebreak}


  
* * *

| "**Software measurement** has the potential to play an important role in risk management during product development. **Metrics** incorporated into **predictive models** can give **advanced warning** of potential risks." |


* * *

|*Norman Fenton, Paul Krause, Martin Neil, **Software Measurement: Uncertainty and Causal Modeling**, IEEE Software, July 2002.[^foo75]*|

[^foo75]: [DOI: 10.1109/MS.2002.1020298 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1020298)
 
 
{pagebreak}






![](images-high-quality/2002-5.jpg)




{pagebreak}

  
* * *

| "A **good article** says something **new** or says something **old in a new way.**" |


* * *

|*Steve McConnell, **From the Editor: How to Write a Good Technical Article**, IEEE Software, September 2002.[^foo76]*|

[^foo76]: [DOI: 10.1109/MS.2002.10006 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.10006)
 
 
{pagebreak}


  
* * *

| "The **steady decline in computer science and engineering enrollments** suggests that these more rigorous methods must be justified or student enrollments will continue to drop." |


* * *

|*Thomas B. Hilburn, Watts S. Humphrey, **The Impending Changes in Software Education**, IEEE Software, September 2002.[^foo77]*|

[^foo77]: [DOI: 10.1109/MS.2002.1032848 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1032848)
 
 
{pagebreak}


  
* * *

| "We must foster **stronger communication** between diverse groups, such as various **faculty groups**, and between **universities** and **industry**. Myths tend to develop when there is little communication or when the communication that exists reflects our **preconceived notions** rather than **objective assessment**." |


* * *

|*Donald J. Bagert, Hossein Saiedian, Nancy R. Mead, **Software Engineering Programs: Dispelling the Myths and Misconceptions**, IEEE Software, September 2002.[^foo78]*|

[^foo78]: [DOI: 10.1109/MS.2002.1032852 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1032852)
 
 
{pagebreak}


  
* * *

| "A **difficult thing** to achieve in a curriculum **is realism** â€” real products signifying tangible, relevant achievements and real people signifying collaborative effort." |


* * *

|*Andrew Macfarlane, Helen Hays, Ken Surendran, **Simulating a Software Engineering Apprenticeship**, IEEE Software, September 2002.[^foo79]*|

[^foo79]: [DOI: 10.1109/MS.2002.1032854 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1032854)
 
 
{pagebreak}


  
* * *

| "Common sense says that, from time to time, we in the software field ought to be **stepping on the brakes**, slowing down to **learn the lessons** we have just rushed through. And **project retrospectives** would be a good thing to do while that mad, headlong pace has been slowed." |


* * *

|*Robert L. Glass, **Project Retrospectives, and Why They Never Happen**, IEEE Software, September 2002.[^foo80]*|

[^foo80]: [DOI: 10.1109/MS.2002.1032872 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1032872)
 
 
{pagebreak}






![](images-high-quality/2002-6.jpg)




{pagebreak}

  
* * *

| "We can **use the metadata** in two ways: **reflective programming** and **code generation**. ... the obvious question is when to use each style. ... Many people find **reflection somewhat hard to use**, and it might **defeat some of your environment's tooling**, such as intelligent reference searches and automated refactorings.  .. You need **discipline** to ensure that developers don't **hand-edit the generated files**. " |


* * *

|*Martin Fowler, **Using Metadata**, IEEE Software, November 2002.[^foo81]*|

[^foo81]: [DOI: 10.1109/MS.2002.1049381 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1049381)
 
 
{pagebreak}


  
* * *

| "Not only is **software increasing** in size, complexity, and percentage of functionality, it is increasing in contribution to the **balance sheet** and **profit-and-loss statements**. " |


* * *

|*Ann Miller, Christof Ebert, **Guest Editors? Introduction: Software Engineering as a Business**, IEEE Software, November 2002.[^foo82]*|

[^foo82]: [DOI: 10.1109/MS.2002.1049382 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1049382)
 
 
{pagebreak}


  
* * *

| "Traditional performance metrics no longer suffice to measure results and guide organizations in today's fast-changing economies. Firms need to **link performance metrics** to **strategic objectives** that will promote positive future results and accurately capture past performance." |


* * *

|*Steven Mair, **A Balanced Scorecard for a Small Software Group**, IEEE Software, November 2002.[^foo83]*|

[^foo83]: [DOI: 10.1109/MS.2002.1049383 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1049383)
 
 
{pagebreak}


  
* * *

| "Most companies now find that **retiring an existing software product** is **nearly impossible**. To build a replacement, you need requirements that **match the product's current version**, and they probably don't exist! They're **not in the documentation**, because it wasn't kept up to date. You won't get them from the original customers, users, or developers, because **those folks are long gone** ..." |


* * *

|*Robert Glass, **Predicting Future Maintenance Cost, and How We?re Doing It Wrong**, IEEE Software, November 2002.[^foo84]*|

[^foo84]: [DOI: 10.1109/MS.2002.1049400 ](http://doi.ieeecomputersociety.org/10.1109/MS.2002.1049400)
 
 
{pagebreak}


# 2003
{pagebreak}






![](images-high-quality/2003-1.jpg)




{pagebreak}

  
* * *

| "When in doubt, **make a new type**." |


* * *

|*Martin Fowler, **When to Make a Type**, IEEE Software, January 2003.[^foo85]*|

[^foo85]: [DOI: 10.1109/MS.2003.1159023 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1159023)
 
 
{pagebreak}


  
* * *

| "Today, many organizations and companies have established **explicit roles for requirements engineers**. Adequate techniques and tools for **RE tasks** (such as **elicitation**, **validation**, **negotiation**, **specification**, and **documentation**) have emerged and continuously been improved based on industrial feedback." |


* * *

|*Eric Dubois, Klaus Pohl, **Guest Editors' Introduction: RE 02--A Major Step toward a Mature Requirements Engineering Community**, IEEE Software, January 2003.[^foo86]*|

[^foo86]: [DOI: 10.1109/MS.2003.1159024 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1159024)
 
 
{pagebreak}


  
* * *

| "9126-1 quality standard ... we selected for the following reasons: (1) Due to its generic nature, the standard **fixes some high-level quality concepts**, and therefore quality models can be **tailored to specific package domains**. This is a crucial point, because quality models can dramatically differ from one domain to another. (2) The standard lets us **create hierarchies** of quality features, which are essential for building **structured quality models**. (3) The standard is **widespread**." |


* * *

|*Juan Pablo Carvallo, Xavier Franch, **Using Quality Models in Software Package Selection**, IEEE Software, January 2003.[^foo87]*|

[^foo87]: [DOI: 10.1109/MS.2003.1159027 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1159027)
 
 
{pagebreak}


  
* * *

| "**A misuse case** is the **negative** form of **a use case**; it documents a **negative** scenario. Its actor is an agent with hostile intent toward the system under design. The relationships between use and misuse cases **document threats** and **their mitigations**." |


* * *

|*Ian Alexander, **Misuse Cases: Use Cases with Hostile Intent**, IEEE Software, January 2003.[^foo88]*|

[^foo88]: [DOI: 10.1109/MS.2003.1159030 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1159030)
 
 
{pagebreak}






![](images-high-quality/2003-2.jpg)




{pagebreak}

  
* * *

| "I consider **four models** for **software system ownership** â€” that is, models for assigning software systems to their human owners: 1. **Product specialist**: A single individual manages all code with occasional help from other individuals. 2. **Subsystem ownership**: Each subsystem has a specific owner, and each team member owns one or more subsystems. 3. **Chief architect**: A chief programmer (architect) has primary ownership of all code. The team takes supporting roles in fleshing out the team leader's vision. 4. **Collective ownership**: All code is collectively owned. Schedules and responsibilities are set such that every team member has a chance to contribute to every subsystem and is free to work across subsystems as needed." |


* * *

|*Martin E. Nordberg III, **Managing Code Ownership**, IEEE Software, March 2003.[^foo89]*|

[^foo89]: [DOI: 10.1109/MS.2003.1184163 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1184163)
 
 
{pagebreak}


  
* * *

| "The initial **modeling activity** is a **structural decomposition** that continues toward the existing **components' granularity level**. Iteration will occur through alternate decomposition and composition activities until the specifications of **abstract** modules **agree with existing** components." |


* * *

|*Ali H. Dogru, Murat M. Tanik, **A Process Model for Component-Oriented Software Engineering**, IEEE Software, March 2003.[^foo90]*|

[^foo90]: [DOI: 10.1109/MS.2003.1184164 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1184164)
 
 
{pagebreak}


  
* * *

| "**Tata Consultancy Services** blended **Six Sigma** concepts with the various **SW-CMM** Key Process Areas into a quality management system that has helped it to improve its **customer focus** and sustain the process improvement initiatives by explicitly **linking** them to **business goals**." |


* * *

|*Mala Murugappan, Gargi Keeni, **Blending CMM and Six Sigma to Meet Business Goals**, IEEE Software, March 2003.[^foo91]*|

[^foo91]: [DOI: 10.1109/MS.2003.1184165 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1184165)
 
 
{pagebreak}


  
* * *

| "In **manufacturing**, the **observed** and **actual number** of **defects** is not significantly different. In **software development**, these two numbers routinely **vary significantly**. " |


* * *

|*Nancy Eickelmann, Animesh Anant, **Statistical Process Control: What You Don?t Measure Can Hurt You!**, IEEE Software, March 2003.[^foo92]*|

[^foo92]: [DOI: 10.1109/MS.2003.1184166 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1184166)
 
 
{pagebreak}


  
* * *

| "**Patterns** are **not good or bad**â€”rather, they're either **appropriate or not** for some situations. I don't think it's wrong to experiment with using a pattern when you're unsure, but you should be **prepared to rip it out** if it doesn't contribute enough." |


* * *

|*Martin Fowler, **Patterns**, IEEE Software, March 2003.[^foo93]*|

[^foo93]: [DOI: 10.1109/MS.2003.1184168 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1184168)
 
 
{pagebreak}


  
* * *

| "Colleagues in my research group and in collaborating institutions typically model software designs using graphical tools such as **Rational Rose**, **Together**, and **Visio**. I often witness them toiling to adjust a graph's appearance with the mouse or laboriously visiting each class to change a single field's type. This need not be so. Design models should be **composed textually**, and graphs should be **automatically generated**. " |


* * *

|*Diomidis Spinellis, **On the Declarative Specification of Models**, IEEE Software, March 2003.[^foo94]*|

[^foo94]: [DOI: 10.1109/MS.2003.1184181 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1184181)
 
 
{pagebreak}






![](images-high-quality/2003-3.jpg)




{pagebreak}

  
* * *

| "The **Extreme Programming** methodology exudes this same advice: **Be communicative with everyone** on the teamâ€”including **customers**, end **users**, and **business** folks. Consistently and doggedly strive to understand and deliver what your **customers want** with the highest possible quality. **Frequently offer feedback**â€”a one-minute manager would never hold back until a formal appraisal cycle to give feedback to employees. " |


* * *

|*Laurie Williams, **Guest Editor's Introduction: The XP Programmer--The Few-Minutes Programmer**, IEEE Software, May 2003.[^foo95]*|

[^foo95]: [DOI: 10.1109/MS.2003.1196315 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1196315)
 
 
{pagebreak}


  
* * *

| "**ThoughtWorks** introduced **Extreme Programming** into an organization and successfully completed a bleeding-edge technology project **with client staff** that had no previous experience using an agiledevelopment approach. " |


* * *

|*Jonathan Rasmusson, **Introducing XP into Greenfield Projects: Lessons Learned**, IEEE Software, May 2003.[^foo96]*|

[^foo96]: [DOI: 10.1109/MS.2003.1196316 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1196316)
 
 
{pagebreak}


  
* * *

| "The **cultural** environment at a **government research center** differs from the **customer-centric** business view. Consequently, eight of XP's 12 practices are seemingly **incompatible** with the existing research **culture**.  ... Despite initial awkwardness ... **XP can function** in situations for which it appears to be ill suited." |


* * *

|*William L. Kleb, William A. Wood, **Exploring XP for Scientific Research**, IEEE Software, May 2003.[^foo97]*|

[^foo97]: [DOI: 10.1109/MS.2003.1196317 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1196317)
 
 
{pagebreak}


  
* * *

| "We can trace **SQA's roots** back to the **1960s**, when **IBM** used the term in the context of **final product testing**. SQA also has deep roots in the **US Department of Defense**, which created a family of military specification standards required of all software vendors seeking DoD contracts (the most famous of which is probably MIL-STD 2167A). However, **not all people** buy into the **belief** that **SQA is needed** or is scientific ..." |


* * *

|*Jeffrey Voas, **Guest Editor's Introduction: Assuring Software Quality Assurance**, IEEE Software, May 2003.[^foo98]*|

[^foo98]: [DOI: 10.1109/MS.2003.1196320 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1196320)
 
 
{pagebreak}


  
* * *

| "**Statistical process control** tools enable proactive software process management. One such tool, **the control chart**, can be used for managing, controlling, and improving the code review process." |


* * *

|*S.K. Pillai, Alice Leslie Jacob, **Statistical Process Control to Improve Coding and Code Review**, IEEE Software, May 2003.[^foo99]*|

[^foo99]: [DOI: 10.1109/MS.2003.1196321 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1196321)
 
 
{pagebreak}


  
* * *

| "One of the most important issues in analyzing safety-critical systems is **code verification** through an **inspection checklist**, whose items must be applied to **the source code**. The attention given to this list will help ensure obedience to **good coding rules** and represents an important factor in the design of safety-critical systems." |


* * *

|*Jorge Rady de Almeida Jr., S?rgio Miranda Paz, Jo?o Batista Camargo Jr., Bruno Abrantes Basseto, **Best Practices in Code Inspection for Safety-Critical Software**, IEEE Software, May 2003.[^foo100]*|

[^foo100]: [DOI: 10.1109/MS.2003.1196322 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1196322)
 
 
{pagebreak}


  
* * *

| ".. **Accelerate the testing** of scheduled functions by triggering them through **automated tests**, either by periodically **advancing the system clock** or through a **programmatic event interface**." |


* * *

|*Vaughn T. Rokosz, **Long-Term Testing in a Short-Term World**, IEEE Software, May 2003.[^foo101]*|

[^foo101]: [DOI: 10.1109/MS.2003.1196323 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1196323)
 
 
{pagebreak}


  
* * *

| "Although **rigorous measurement** has become a necessity in the software industry, many measurement programs **fail to deliver** any real **benefit to software managers**. The required data is often missing or invalid, or it just arrives too late." |


* * *

|*Jim Lawler, Barbara Kitchenham, **Measurement Modeling Technology**, IEEE Software, May 2003.[^foo102]*|

[^foo102]: [DOI: 10.1109/MS.2003.1196324 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1196324)
 
 
{pagebreak}


  
* * *

| "That we question the hype spewing from the hype purveyors, especially vendors. That we question the **advocacy** spewing **from all too many computer science researchers**, who seem to feel that research papers should '**conceive** of a concept, **advocate** the concept, and **scold** practitioners who refuse to use the concept.'" |


* * *

|*Robert L. Glass, **Questioning the Software Engineering Unquestionables**, IEEE Software, May 2003.[^foo103]*|

[^foo103]: [DOI: 10.1109/MS.2003.1196338 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1196338)
 
 
{pagebreak}






![](images-high-quality/2003-4.jpg)




{pagebreak}

  
* * *

| "Despite more than 30 years' effort to improve software quality, companies still release programs containing **numerous errors**. Many major products have **thousands of bugs**. It's not for lack of trying; all major software developers stress software quality assurance and try to remove bugs before release. The problem is the **code's complexity**. It's easy to review code but **fail to notice significant errors**." |


* * *

|*David L. Parnas, Mark Lawford, **Guest Editors' Introduction: Inspection's Role in Software Quality Assurance**, IEEE Software, July 2003.[^foo104]*|

[^foo104]: [DOI: 10.1109/MS.2003.1207449 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1207449)
 
 
{pagebreak}


  
* * *

| "**Reading techniques** must specifically address delocalization--the distribution of related functionality throughout an object-oriented system--and the fact that the **static (compile time)** and **dynamic (run time) views** of an object-oriented system are **largely distinct**." |


* * *

|*Marc Roper, Alastair Dunsmore, Murray Wood, **Practical Code Inspection Techniques for Object-Oriented Systems: An Experimental Comparison**, IEEE Software, July 2003.[^foo105]*|

[^foo105]: [DOI: 10.1109/MS.2003.1207450 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1207450)
 
 
{pagebreak}


  
* * *

| "Principles from **software inspection**, **use cases**, and operational profile testing are combined into the **usage-based reading** technique. The goal is to provide an efficient reading technique for software inspections, which takes the user viewpoint on the software and the faults it might contain. The user reads, for example, a design document guided by **prioritized use cases**. An experimental evaluation shows that the UBR method is **more effective** and efficient in finding **faults, critical to the user**, compared to checklist-based methods." |


* * *

|*Claes Wohlin, Thomas Thelin, Per Runeson, **Prioritized Use Cases as a Vehicle for Software Inspections**, IEEE Software, July 2003.[^foo106]*|

[^foo106]: [DOI: 10.1109/MS.2003.1207451 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1207451)
 
 
{pagebreak}


  
* * *

| "**Software inspection** reduces the number of defects early in the software life cycle. **Cost savings** are realized because errors are significantly more expensive to eliminate with each successive development phase. An important part of the inspection process is a detailed inspection of the source code .... Recent advances in research on **static program analysis** can be used to address this aspect of **software inspection**." |


* * *

|*Paul Anderson, Tim Teitelbaum, Thomas Reps, Mark Zarins, **Tool Support for Fine-Grained Software Inspection**, IEEE Software, July 2003.[^foo107]*|

[^foo107]: [DOI: 10.1109/MS.2003.1207453 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1207453)
 
 
{pagebreak}


  
* * *

| "We can divide software systems architecturally along two broad dimensions. The first is the **tarchitecture** or '**technical architecture**' and the second is the **marketecture** or '**marketing architecture**.' I refer to the traditional software architect or chief technologist as the **tarchitect** and the product-marketing manager, business manager, or program manager responsible for the system as the **marketect**." |


* * *

|*Luke Hohmann, **The Difference between Marketecture and Tarchitecture**, IEEE Software, July 2003.[^foo108]*|

[^foo108]: [DOI: 10.1109/MS.2003.1207454 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1207454)
 
 
{pagebreak}


  
* * *

| "Let's allow SE programs to **hire the best-qualified candidates** regardless of whether they've acquired a PhD." |


* * *

|*Robert L. Glass, **A Big Problem in Academic Software Engineering and a Potential Outside-the-Box Solution**, IEEE Software, July 2003.[^foo109]*|

[^foo109]: [DOI: 10.1109/MS.2003.1207486 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1207486)
 
 
{pagebreak}






![](images-high-quality/2003-5.jpg)




{pagebreak}

  
* * *

| "I think that one of an **architect's** most important **tasks** is to remove architecture by finding ways to **eliminate irreversibility** in software designs." |


* * *

|*Martin Fowler, **Who Needs an Architect?**, IEEE Software, September 2003.[^foo110]*|

[^foo110]: [DOI: 10.1109/MS.2003.1231144 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1231144)
 
 
{pagebreak}


  
* * *

| "**Model-driven development** is simply the notion that we can construct a **model of a system** that we can then **transform into the real thing**." |


* * *

|*Anthony N. Clark, Takao Futagami, Stephen J. Mellor, **Guest Editors' Introduction: Model-Driven Development**, IEEE Software, September 2003.[^foo111]*|

[^foo111]: [DOI: 10.1109/MS.2003.1231145 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1231145)
 
 
{pagebreak}


  
* * *

| "The potential benefits of **using models** are significantly greater in **software** than in **other engineering disciplines** because of the potential for a seamless link between models and the systems they represent. Unfortunately, models have **rarely produced anticipated benefits**. The key lies in **resolving pragmatic issues** related to the artifacts and culture of the previous generation of software technologies." |


* * *

|*Bran Selic, **The Pragmatics of Model-Driven Development**, IEEE Software, September 2003.[^foo112]*|

[^foo112]: [DOI: 10.1109/MS.2003.1231146 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1231146)
 
 
{pagebreak}


  
* * *

| "A **model** is a **set of statements** about some **system under study**. Here, **statement** means some expression about the SUS that can be considered **true or false** (although no truth value has to necessarily be assigned at any particular point in time). We can use a model **to describe** an SUS. In this case, we consider the model **correct** if all its statements are true for the SUS. ... Alternatively, we can use a **model as a specification** for an SUS or a class of SUS. In this case, we consider a specific SUS **valid** relative to this specification if no statement in the model is false for the SUS. " |


* * *

|*Ed Seidewitz, **What Models Mean**, IEEE Software, September 2003.[^foo113]*|

[^foo113]: [DOI: 10.1109/MS.2003.1231147 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1231147)
 
 
{pagebreak}


  
* * *

| "**UML** can be used in **many formats**, including presented as **text**, parsed into a **standardized repository**, and **compiled** to multiple programming languages." |


* * *

|*Conrad Bock, **UML without Pictures**, IEEE Software, September 2003.[^foo114]*|

[^foo114]: [DOI: 10.1109/MS.2003.1231148 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1231148)
 
 
{pagebreak}


  
* * *

| "It's helpful to identify two separate orthogonal dimensions of metamodeling, giving rise to two distinct forms of instantiation. One dimension is concerned with **language definition** and hence uses **linguistic instantiation**. The other dimension is concerned with **domain definition** and thus uses **ontological instantiation**. " |


* * *

|*Colin Atkinson, Thomas K?, **Model-Driven Development: A Metamodeling Foundation**, IEEE Software, September 2003.[^foo115]*|

[^foo115]: [DOI: 10.1109/MS.2003.1231149 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1231149)
 
 
{pagebreak}






![](images-high-quality/2003-6.jpg)




{pagebreak}

  
* * *

| "For most of software engineering's history, **authors** have eagerly **told practitioners** what they **ought to be doing**. But **rarely** have those 'oughts' been **predicated** on what practitioners **actually are doing**. ... Defining the **state of the art** (which I identify as theory + 'best' **practice**) is **easy**; conferences, journals, and books do that for us all the time. Yet defining the state of the **practice** is **difficult**. " |


* * *

|*Robert L. Glass, **Guest Editor's Introduction: The State of the Practice of Software Engineering**, IEEE Software, November 2003.[^foo116]*|

[^foo116]: [DOI: 10.1109/MS.2003.1241361 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1241361)
 
 
{pagebreak}


  
* * *

| "We **didn't find** that any specific design **method** or programming **language** guaranteed either a **successful** or **troubled** project outcome. ... **Good quality control** is the **best** overall **indicator** of a successful project." |


* * *

|*Capers Jones, **Variations in Software Development Practices**, IEEE Software, November 2003.[^foo117]*|

[^foo117]: [DOI: 10.1109/MS.2003.1241362 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1241362)
 
 
{pagebreak}


  
* * *

| "No **Indian** or **Japanese** company has yet to make any real global mark in widely recognized software innovation, long the province of **US** and a **few European** software firms." |


* * *

|*Michael Cusumano, Bill Crandall, Alan MacCormack, Chris F. Kemerer, **Software Development Worldwide: The State of the Practice**, IEEE Software, November 2003.[^foo118]*|

[^foo118]: [DOI: 10.1109/MS.2003.1241363 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1241363)
 
 
{pagebreak}


  
* * *

| "The studies confirm the widely held belief that most **software engineers** **don't update** most software **documentation** in a timely manner. The only notable exception is documentation **types** that are **highly structured** and easy to maintain, such as test cases and inline comments." |


* * *

|*Andrew Forward, Timothy C. Lethbridge, Janice Singer, **How Software Engineers Use Documentation: The State of the Practice**, IEEE Software, November 2003.[^foo119]*|

[^foo119]: [DOI: 10.1109/MS.2003.1241364 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1241364)
 
 
{pagebreak}


  
* * *

| "One of the most important things about **good design** is **modularity** â€” dividing a system into separate pieces so that you can **modify one module** without the **changes rippling** all over the system. Early on, David **Parnas** observed that modules should be arranged **around system secrets**, each module hiding its secret from the other modules. Then if the secret thing changes, you avoid a ripple effect. One of the **most common secrets** to hide these days is **data structures**. " |


* * *

|*Martin Fowler, **Data Access Routines**, IEEE Software, November 2003.[^foo120]*|

[^foo120]: [DOI: 10.1109/MS.2003.1241375 ](http://doi.ieeecomputersociety.org/10.1109/MS.2003.1241375)
 
 
{pagebreak}


# 2004
{pagebreak}






![](images-high-quality/2004-1.jpg)




{pagebreak}

  
* * *

| "In a **criminal trial** (at least in the US), the **failure to follow** an established **best practice** in an investigation could result in an **acquittal**. ... the **American Society for Quality's definition** probably comes closest to what we in software development mean when we use the term. The ASQ defines 'best practice' as a **superior method** or innovative practice that contributes to the improved performance of an organization, usually **recognized** as 'best' **by other peer** organizations." |


* * *

|*Warren Harrison, **From the Editor: Best Practices--Who Says?**, IEEE Software, January 2004.[^foo121]*|

[^foo121]: [DOI: 10.1109/MS.2004.1320864 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1320864)
 
 
{pagebreak}


  
* * *

| "'We resolve to **keep all** program design **documentation** complete, precise, and **up to date**'. - David Lorge Parnas" |


* * *

|*Nancy Leveson, Barry Boehm, Shari Lawrence Pfleeger, Nancy R. Mead, Elaine Weyuker, Al Davis, Watts S. Humphrey, David Lorge Parnas, Victor R. Basili, John D. Musa, **New Year's Resolutions for Software Quality**, IEEE Software, January 2004.[^foo122]*|

[^foo122]: [DOI: 10.1109/MS.2004.1259165 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1259165)
 
 
{pagebreak}


  
* * *

| "When you dig into the knowledge base of experience, you find the following **seven best practices** for **outsourcing** common to reported successes in the literature ... **Never** outsource a **core competency** ... Establish **win-win conditions** with your suppliers ... **Nurture your relationships** with your suppliers ... **Measure** performance as **quantitatively** as possible ... Make **exceptional performance** financially worthwhile ... Treat outsourcing as a **technology transfer** opportunity ..." |


* * *

|*Donald J. Reifer, **Seven Hot Outsourcing Practices**, IEEE Software, January 2004.[^foo123]*|

[^foo123]: [DOI: 10.1109/MS.2004.1259166 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1259166)
 
 
{pagebreak}


  
* * *

| "This month, the column looks at how to **ruin a software project** in just **three easy steps**. ... (1) **Don't bother to check** if the code is doing what you think it's doing (2) **Never let go** of code ... (3) Whether you are compiling, testing, creating a release, or doing end-user product installation, **do it differently every time**. ... Fortunately, three simple practices can **save a project** from these and other common mishaps: **version control**, **unit testing**, and **automation**." |


* * *

|*Dave Thomas, Andy Hunt, **Three Legs, No Wobble**, IEEE Software, January 2004.[^foo124]*|

[^foo124]: [DOI: 10.1109/MS.2004.1259177 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1259177)
 
 
{pagebreak}


  
* * *

| "The open source movement is affecting software development products and processes. ... Process integration and the **coevolution of multiple open source and proprietary projects** are still open problems." |


* * *

|*Clemens Szyperski, Diomidis Spinellis, **Guest Editors' Introduction: How Is Open Source Affecting Software Development?**, IEEE Software, January 2004.[^foo125]*|

[^foo125]: [DOI: 10.1109/MS.2004.1259204 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1259204)
 
 
{pagebreak}


  
* * *

| "**Many** software development methodologies **are called 'open source.'** However simply stating that a project is open source **doesn't precisely describe** the approach used to support the project." |


* * *

|*Budi Arief, Cristina Gacek, **The Many Meanings of Open Source**, IEEE Software, January 2004.[^foo126]*|

[^foo126]: [DOI: 10.1109/MS.2004.1259206 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1259206)
 
 
{pagebreak}


  
* * *

| "Mission operators at **NASA's Jet Propulsion Laboratory** use Science Activity Planners to analyze data acquired by rovers and direct their activities. In designing the SAP for the **Mars Exploration Rovers** project, developers **relied** heavily **on open source** components. They found that using open source software components not only helped keep the project within budget but also resulted in a **more robust and flexible** tool." |


* * *

|*Jeffrey S. Norris, Poul-Henning Kamp, **Mission-Critical Development with Open Source Software: Lessons Learned**, IEEE Software, January 2004.[^foo127]*|

[^foo127]: [DOI: 10.1109/MS.2004.1259211 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1259211)
 
 
{pagebreak}


  
* * *

| "The importance of changing the mindset in relation to the new support paradigm implied by **open-source software** (OSS) is also significant. By and large, reliance on a standard maintenance contract isn't an option, and bulletin boards might be the main source of support. Thus, it is hardly surprising that support from top management is critical. Also, even though OSS may be available at little or no cost, organizations should not expect maintenance and support to be available at a lesser cost than would apply for commercial software. Indeed, OSS represents a good opportunity for small software companies all around the world to treat it as **an infrastructure component**, like the highway or telecommunications lines, and then use it as a bootstrap to build a service and support business model on top." |


* * *

|*Tony Kenny, Brian Fitzgerald, **Developing an Information Systems Infrastructure with Open Source Software**, IEEE Software, January 2004.[^foo128]*|

[^foo128]: [DOI: 10.1109/MS.2004.1259216 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1259216)
 
 
{pagebreak}


  
* * *

| "Any company dealing with **OSS** needs a **few simple rules** for using it in product development: Control the introduction and use of OSS; it must be **explicitly authorized** on a per-version basis. Disseminate **technical**, **managerial**, and **legal** information widely in your company. Systematically qualify OSS components before integrating them." |


* * *

|*Christof Ebert, Michel Ruffin, **Using Open Source Software in Product Development: A Primer**, IEEE Software, January 2004.[^foo129]*|

[^foo129]: [DOI: 10.1109/MS.2004.1259227 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1259227)
 
 
{pagebreak}


  
* * *

| "**Outsourcing**, overseas development, and **foreign workers** **displacing American ones**: These are all interesting issues, but in a sense they're all **so 'last century.'** Or are they?" |


* * *

|*Robert L. Glass, **Sources for Software Development: A Mugwumpish View**, IEEE Software, January 2004.[^foo130]*|

[^foo130]: [DOI: 10.1109/MS.2004.1259286 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1259286)
 
 
{pagebreak}






![](images-high-quality/2004-3.jpg)




{pagebreak}

  
* * *

| "Ubiquitous and reckless **promotion by vendors**, consultants, and marketing gurus has **diluted** the expression **return on investment** into an **umbrella term** that can mean anything from profits to competitive advantage to simply 'something good.' Consequently, the software community looks upon ROI with **increasing suspicion** as a vague and slippery gimmick used chiefly to make the **sales pitch** (invariably unsubstantiated) for a particular product or initiative." |


* * *

|*John Favaro, Hakan Erdogmus, Wolfgang Strigel, **Guest Editors' Introduction: Return on Investment**, IEEE Software, May 2004.[^foo131]*|

[^foo131]: [DOI: 10.1109/MS.2004.1293068 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1293068)
 
 
{pagebreak}


  
* * *

| "You may have to **reorganize** so that your organizational structure is set up to best **produce the commonality** and to best take advantage of it. Your people will need some **training**. You'll need to set up **new processes** to make this all work, and those processes will **evolve** as you get better at them. You'll want to **collect data** so that you can see if this new approach is meeting your goal." |


* * *

|*Paul Clements, Klaus Schmid, G? B?ckle, Dirk Muthig, John D. McGregor, **Calculating ROI for Software Product Lines**, IEEE Software, May 2004.[^foo132]*|

[^foo132]: [DOI: 10.1109/MS.2004.1293069 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1293069)
 
 
{pagebreak}


  
* * *

| "Calculating **cost and benefits** is a prerequisite for **investment decision** making. This is just as true for SPI as for any other investment. " |


* * *

|*Rini van Solingen, **Measuring the ROI of Software Process Improvement**, IEEE Software, May 2004.[^foo133]*|

[^foo133]: [DOI: 10.1109/MS.2004.1293070 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1293070)
 
 
{pagebreak}


  
* * *

| "The last few years have seen intense scrutiny of the **flawed business premises** underlying the **dot-com bubble** of the late 1990s. The prevailing attitude then was that software investment could be repaid through the company's increased capital value in expectation of **future profits**. The current IT environment is greatly changed. Not only are organizations no longer willing to invest in software development without clear expectations for returns, but they also demand those **returns in much less time**." |


* * *

|*Jane Cleland-Huang, Mark Denne, **The Incremental Funding Method: Data-Driven Software Development**, IEEE Software, May 2004.[^foo134]*|

[^foo134]: [DOI: 10.1109/MS.2004.1293071 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1293071)
 
 
{pagebreak}


  
* * *

| "For commercial software sold in the **general marketplace**, many software-planning and design decisions are based not only on meeting user needs but also on various **marketplace issues**. Many of these issues fall into one of three standard ROI categories: **revenue**, **cost**, and **risk**. " |


* * *

|*David G. Messerschmitt, Clemens Szyperski, **Marketplace Issues in Software Planning and Design**, IEEE Software, May 2004.[^foo135]*|

[^foo135]: [DOI: 10.1109/MS.2004.1293074 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1293074)
 
 
{pagebreak}


  
* * *

| "The trait that I value in effective quality assurance analysts is the ability to question what others often too readily accept. This admirable characteristic manifests itself in three ways: **know what you know**, **ask when you don't**, and **ask when you do**." |


* * *

|*Jane Huffman Hayes, **On the Virtues of Not Knowing**, IEEE Software, May 2004.[^foo136]*|

[^foo136]: [DOI: 10.1109/MS.2004.1293076 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1293076)
 
 
{pagebreak}


  
* * *

| "Keep it **DRY**, keep it **shy**, and **tell** the other guy." |


* * *

|*Andy Hunt, Dave Thomas, **OO in One Sentence: Keep It DRY, Shy, and Tell the Other Guy**, IEEE Software, May 2004.[^foo137]*|

[^foo137]: [DOI: 10.1109/MS.2004.1293081 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1293081)
 
 
{pagebreak}


  
* * *

| "**Software maintenance** and software maintainers **deserve more respect**." |


* * *

|*Robert L. Glass, **Learning to Distinguish a Solution from a Problem**, IEEE Software, May 2004.[^foo138]*|

[^foo138]: [DOI: 10.1109/MS.2004.1293084 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1293084)
 
 
{pagebreak}






![](images-high-quality/2004-4.jpg)




{pagebreak}

  
* * *

| "Although using professional programmers doesn't guarantee **correctness**, **security**, or **maintainability**, the **lack of real understanding** about software development by **end-user programmers** poses a **danger** to stakeholders associated with mission-critical systems from the standpoints of both correctness and security." |


* * *

|*Warren Harrison, **From the Editor: The Dangers of End-User Programming**, IEEE Software, July 2004.[^foo139]*|

[^foo139]: [DOI: 10.1109/MS.2004.13 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.13)
 
 
{pagebreak}


  
* * *

| "Evaluating process maturity on the basis of results, or the improvement in cost structure in the four quality-cost categories: **prevention**, **appraisal**, **internal failures**, and **external failures**." |


* * *

|*Nancy Eickelmann, **Measuring Maturity Goes beyond Process**, IEEE Software, July 2004.[^foo140]*|

[^foo140]: [DOI: 10.1109/MS.2004.21 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.21)
 
 
{pagebreak}


  
* * *

| "The activity of '**design**' includes many things, but certainly one of the most important aspects is **interface specification**. ... Make interfaces **easy** to use **correctly** and **hard** to use **incorrectly**." |


* * *

|*Scott Meyers, **The Most Important Design Guideline?**, IEEE Software, July 2004.[^foo141]*|

[^foo141]: [DOI: 10.1109/MS.2004.29 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.29)
 
 
{pagebreak}


  
* * *

| "From **Chile** to **Sweden** to **Georgia** to **Hong Kong**, for very small teams to large organizations, for basic repeatability to complex technology, the question is the same: Why isn't process change easier? ... each part of an organization's staff must **share the values** of process change to succeed. Company leadership must have **a vision** of the benefit. Development teams must **see the value**. Process engineers must recognize that the change will be both **interactive** and **iterative**." |


* * *

|*Annie Combelles, David Dorenbos, **Introduction: Lessons Learned around the World: Key Success Factors to Enable Process Change**, IEEE Software, July 2004.[^foo142]*|

[^foo142]: [DOI: 10.1109/MS.2004.19 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.19)
 
 
{pagebreak}


  
* * *

| "Traditional approaches to measuring software process improvement are typically lengthy, data intensive, and cost prohibitive. A **simple indicator**, the extent to which **engineering practices change**, can provide enough information to guide initiatives toward success." |


* * *

|*Lars Mathiassen, Anna B?rjesson, **Successful Process Implementation**, IEEE Software, July 2004.[^foo143]*|

[^foo143]: [DOI: 10.1109/MS.2004.27 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.27)
 
 
{pagebreak}


  
* * *

| "**Failures**, **faults**, and **errors** are often collectively referred to as **defects**, and defect handling deals with **recording**, **tracking**, and **resolving** these defects. " |


* * *

|*GÃ¼nes Koru, Jeff Tian, **Defect Handling in Medium and Large Open Source Projects**, IEEE Software, July 2004.[^foo144]*|

[^foo144]: [DOI: 10.1109/MS.2004.12 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.12)
 
 
{pagebreak}


  
* * *

| "**Incremental change** activities include: change request, concept extraction, concept location, impact analysis, actualization, incorporation, change propagation, refactoring, and role splitting ..." |


* * *

|*Prashant Gosavi, V?clav Rajlich, **Incremental Change in Object-Oriented Programming**, IEEE Software, July 2004.[^foo145]*|

[^foo145]: [DOI: 10.1109/MS.2004.17 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.17)
 
 
{pagebreak}


  
* * *

| "We software engineers have engaged in a **rush to standardization**, a rush to getting everyone to use the same set of facts and principles." |


* * *

|*Robert L. Glass, **Some Heresy Regarding Software Engineering**, IEEE Software, July 2004.[^foo146]*|

[^foo146]: [DOI: 10.1109/MS.2004.26 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.26)
 
 
{pagebreak}






![](images-high-quality/2004-5.jpg)




{pagebreak}

  
* * *

| "There's a **simple technique** that will dramatically reduce the number of **these bugs** in your software. ... The technique is to build your software to '**fail fast**.'" |


* * *

|*Jim Shore, **Fail Fast**, IEEE Software, September 2004.[^foo147]*|

[^foo147]: [DOI: 10.1109/MS.2004.1331296 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1331296)
 
 
{pagebreak}


  
* * *

| "**Core business principles** refer to those practices that a company, institution, or government agency uses to enable the **organization's viability**. Whether Web services, supply chain, payroll, timesheets, or other application, there must be a **relationship** between your organization's **core business principles** and how **its software's functionality** is defined, developed, deployed, tested, and maintained." |


* * *

|*Jeffrey Voas, **Software Engineering's Role in Business**, IEEE Software, September 2004.[^foo148]*|

[^foo148]: [DOI: 10.1109/MS.2004.1331297 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1331297)
 
 
{pagebreak}


  
* * *

| "**Poor performers** cause much more **damage** than is apparent to management. " |


* * *

|*Shahrukh A. Irani, Ho Woo Lee, Peter Middleton, **Why Culling Software Colleagues Is Popular**, IEEE Software, September 2004.[^foo149]*|

[^foo149]: [DOI: 10.1109/MS.2004.1331298 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1331298)
 
 
{pagebreak}


  
* * *

| "**Software systems** are the only major organizational asset with no real support for managing them based on information technology.  ... **no one keeps** any **basic information** concerning a vastly expensive corporate asset." |


* * *

|*Garry S. Marliss, Mordechai Ben-Menachem, **Inventorying Information Technology Systems: Supporting the 'Paradigm of Change'**, IEEE Software, September 2004.[^foo150]*|

[^foo150]: [DOI: 10.1109/MS.2004.1331300 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1331300)
 
 
{pagebreak}


  
* * *

| "**Network effects** can lead to a '**social dilemma**,' in which the actions of consumers can result in serious **negative consequences** for the **same consumers** and the society as a whole in the long term. " |


* * *

|*Nirup M. Menon, Glenn J. Browne, **Network Effects and Social Dilemmas in Technology Industries**, IEEE Software, September 2004.[^foo151]*|

[^foo151]: [DOI: 10.1109/MS.2004.1331301 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1331301)
 
 
{pagebreak}


  
* * *

| "The well-known **black-box model** of software **development outsourcing** is typically effective. The approach assumes that the vendor can successfully solve a client organization's business problem without either organization having to deeply understand the other's domain. ... key finding is that the black-box approach usually works **well in routine projects** but **fails** in projects involving **novelty**." |


* * *

|*Amrit Tiwana, **Beyond the Black Box: Knowledge Overlaps in Software Outsourcing**, IEEE Software, September 2004.[^foo152]*|

[^foo152]: [DOI: 10.1109/MS.2004.1331302 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1331302)
 
 
{pagebreak}


  
* * *

| "The international standard **ISO/IEC 9126** defines a **quality model** for **software products**. The model categorizes software product attributes into six characteristics, which are further subdivided into 27 subcharacteristics." |


* * *

|*Ho-Won Jung, Seung-Gweon Kim, Chang-Shin Chung, **Measuring Software Product Quality: A Survey of ISO/IEC 9126**, IEEE Software, September 2004.[^foo153]*|

[^foo153]: [DOI: 10.1109/MS.2004.1331309 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1331309)
 
 
{pagebreak}


  
* * *

| "As an industry, we love to build the **grand frameworks** that can solve **all the world's problems** in one unified package. " |


* * *

|*Andy Hunt, Dave Thomas, **Imaginate**, IEEE Software, September 2004.[^foo154]*|

[^foo154]: [DOI: 10.1109/MS.2004.1331311 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1331311)
 
 
{pagebreak}


  
* * *

| "Phillips suggests that 'when we are **behind schedule** and **under pressure**, we **stop breathing**.' And that, in turn, leads to some pretty **bad outcomes** ..." |


* * *

|*Robert L. Glass, **Anarchy and the Effects of Schedule Pressure**, IEEE Software, September 2004.[^foo155]*|

[^foo155]: [DOI: 10.1109/MS.2004.1331316 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.1331316)
 
 
{pagebreak}






![](images-high-quality/2004-6.jpg)




{pagebreak}

  
* * *

| "**Software changes** are a lot **like rain**. While a **few drops** here and there usually **aren't** that much of a **problem**, a **steady downpour** can be **damaging**â€”and a deluge can wipe out everything you've carefully built. " |


* * *

|*Maarten Boasson, Terry Bollinger, Jeffrey Voas, **Persistent Software Attributes**, IEEE Software, November 2004.[^foo156]*|

[^foo156]: [DOI: 10.1109/MS.2004.46 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.46)
 
 
{pagebreak}


  
* * *

| "In contemporary societies, **individuals** and **organizations** increasingly **depend on** services delivered by sophisticated **software**-intensive systems. **Dependability** has become a key **systems property**, which needs to be engineered and guaranteed regardless of continuous, rapid, and unpredictable technological and context changes." |


* * *

|*Paolo Donzelli, Victor Basili, Sima Asgari, **A Unified Model of Dependability: Capturing Dependability in Context**, IEEE Software, November 2004.[^foo157]*|

[^foo157]: [DOI: 10.1109/MS.2004.30 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.30)
 
 
{pagebreak}


  
* * *

| "If you don't carefully and accurately **manage customizations** ... the result can be **skyrocketing development costs**, poor customer support, and an inability to respond quickly to new needs." |


* * *

|*Sonia Calzada, Ismael Ciordia, Fernando Alonso, Nicol? Serrano, **Automated Management of Multicustomer Code Bases**, IEEE Software, November 2004.[^foo158]*|

[^foo158]: [DOI: 10.1109/MS.2004.35 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.35)
 
 
{pagebreak}


  
* * *

| "If **developers** are willing to **work hard** and carefully **introduce an agile process** into their organization, their efforts should yield **positive results**." |


* * *

|*David Noftz, Rekha Raghu, Jerry Drobka, **Piloting XP on Four Mission-Critical Projects**, IEEE Software, November 2004.[^foo159]*|

[^foo159]: [DOI: 10.1109/MS.2004.47 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.47)
 
 
{pagebreak}


  
* * *

| "**Routine tasks** are the easiest ones for programmers to **avoid**. So, to develop a single programâ€”even a program with only one file â€” it's common to have a script that compiles it with the desired options and executes it with some arguments. When your project has hundreds or thousands of files and a large team of developers, the script isn't a utility, but a necessity; it becomes even more critical when the project's structures are complicated and the dependencies are hard to remember." |


* * *

|*Ismael Ciordia, Nicol? Serrano, **Ant: Automating the Process of Building Applications**, IEEE Software, November 2004.[^foo160]*|

[^foo160]: [DOI: 10.1109/MS.2004.33 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.33)
 
 
{pagebreak}


  
* * *

| "Many software projects involve **at least one stakeholder** **who secretly wants the project to fail**. Finding this stakeholder can be difficult but is important to ensuring the project's success." |


* * *

|*Johann Rost, **Political Reasons for Failed Software Projects**, IEEE Software, November 2004.[^foo161]*|

[^foo161]: [DOI: 10.1109/MS.2004.48 ](http://doi.ieeecomputersociety.org/10.1109/MS.2004.48)
 
 
{pagebreak}


# 2005
{pagebreak}






![](images-high-quality/2005-1.jpg)




{pagebreak}

  
* * *

| "In many domains, the **problem space** is too **large** to **explore** up front. **Expert designers** often **explore** the **problem and solution** spaces **in parallel**, using the emerging solution space to decide what information to elicit next about the problem space. They also often look for chinksâ€”that is, **omissions and inconsistencies**â€”in problems and requirement specifications that would enable them to discover more innovative solutions." |


* * *

|*Neil Maiden, Christof Ebert, Suzanne Robertson, **Guest Editors' Introduction: Shake, Rattle, and Requirements**, IEEE Software, January 2005.[^foo162]*|

[^foo162]: [DOI: 10.1109/MS.2005.8 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.8)
 
 
{pagebreak}


  
* * *

| "Some **activities** are fundamental to all **RE** requirements engineering processes: **Elicitation**. Identify sources of information ... **Analysis**. Understand the requirements ... **Validation**. Go back to the system stakeholders and check ... **Negotiation**. ... reconcile conflicting views .... **Documentation**. Write down the requirements ... **Management**. Control the requirements changes ... " |


* * *

|*Ian Sommerville, **Integrated Requirements Engineering: A Tutorial**, IEEE Software, January 2005.[^foo163]*|

[^foo163]: [DOI: 10.1109/MS.2005.13 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.13)
 
 
{pagebreak}


  
* * *

| "**Patterns** are an established and well-known **format** for **capturing engineering knowledge**. ... practitioners use patterns to describe **reference solutions** to engineering problems and as guidelines for engineering procedures" |


* * *

|*Lars Hagge, Kathrin Lappe, **Sharing Requirements Engineering Experience Using Patterns**, IEEE Software, January 2005.[^foo164]*|

[^foo164]: [DOI: 10.1109/MS.2005.17 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.17)
 
 
{pagebreak}


  
* * *

| "The development of large, complex software products aimed for a broad **market** involves a continuous, massive **inflow** of **customers' wishes** (collected from the **market**) and product **requirements** (generated **inside** the developing **organization**). " |


* * *

|*Johan Natt och Dag, Sjaak Brinkkemper, Bj? Regnell, Vincenzo Gervasi, **A Linguistic-Engineering Approach to Large-Scale Requirements Management**, IEEE Software, January 2005.[^foo165]*|

[^foo165]: [DOI: 10.1109/MS.2005.1 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.1)
 
 
{pagebreak}


  
* * *

| "Producing good systems relies on asking '**the right questions**' to discover users' real requirements. **Family therapy** provides **interview techniques** and different types of questions that can **generate new knowledge**." |


* * *

|*Susanne Kandrup, **On Systems Coaching**, IEEE Software, January 2005.[^foo166]*|

[^foo166]: [DOI: 10.1109/MS.2005.15 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.15)
 
 
{pagebreak}


  
* * *

| "The word '**all**' and the plural can be **misused** in ways that create **ambiguities** and other problems in computer-based system specification documents." |


* * *

|*Erik Kamsties, Daniel M. Berry, **The Syntactically Dangerous All and Plural in Specifications**, IEEE Software, January 2005.[^foo167]*|

[^foo167]: [DOI: 10.1109/MS.2005.22 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.22)
 
 
{pagebreak}


  
* * *

| "We like to think of **science** with certainty, where results are clear when rules are understood and followed. But **science** is **rife with uncertainty**, and we must acknowledge its role and the **resulting risks** we take, both when we **generate evidence** and when we use it to **build arguments**. **Lawyers** recognize the uncertainty associated with various types of evidence, so they look for pieces of evidence that in concert have more '**evidential force**' than when used separately. " |


* * *

|*Jason Remillard, **Source Code Review Systems**, IEEE Software, January 2005.[^foo168]*|

[^foo168]: [DOI: 10.1109/MS.2005.20 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.20)
 
 
{pagebreak}


  
* * *

| "So there you have it. I'm **mad as hell**, I don't want to take this anymore, and I suppose the truth of the matter is that I can't do anything about it!" |


* * *

|*Robert L. Glass, **Viruses Are Beginning to Get to Me!**, IEEE Software, January 2005.[^foo169]*|

[^foo169]: [DOI: 10.1109/MS.2005.24 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.24)
 
 
{pagebreak}






![](images-high-quality/2005-2.jpg)




{pagebreak}

  
* * *

| "**Bug-tracking systems** help us **identify** the error in our software, **resolve** it, and **learn** from it." |


* * *

|*Ismael Ciordia, Nicol? Serrano, **Bugzilla, ITracker, and Other Bug Trackers**, IEEE Software, March 2005.[^foo170]*|

[^foo170]: [DOI: 10.1109/MS.2005.32 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.32)
 
 
{pagebreak}


  
* * *

| "Any **bold advance** needs some **time to mature**â€”to 'cross the chasm,' as Geoffrey Moore eloquently described, to get a critical mass of practitioners across our industry beyond the eager **early-adopter** stage. Techniques, practices, and methods must be **taught in schools** and must be supported by **tools**. They must **prove their value** beyond any reasonable doubt and sometimes even be enshrined in some industry **standard**." |


* * *

|*Philippe Kruchten, **Editor's Introduction: Software Design in a Postmodern Era**, IEEE Software, March 2005.[^foo171]*|

[^foo171]: [DOI: 10.1109/MS.2005.38 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.38)
 
 
{pagebreak}


  
* * *

| "Explicitly **documenting** major architecture **decisions** makes the architecture development process more **structured** and **transparent**. Additionally, it clarifies the architects' **rationale** for stakeholders, designers, and other architects." |


* * *

|*Art Akerman, Jeff Tyree, **Architecture Decisions: Demystifying Architecture**, IEEE Software, March 2005.[^foo172]*|

[^foo172]: [DOI: 10.1109/MS.2005.27 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.27)
 
 
{pagebreak}


  
* * *

| "Elements such as **principles**, **heuristics**, **best practices**, '**bad smells**,' and **refactorings** are **not clearly defined**. Many of these elements are synonymous, and others are just vague concepts." |


* * *

|*Mario Piattini, Javier Garz?, **An Ontology for Microarchitectural Design Knowledge**, IEEE Software, March 2005.[^foo173]*|

[^foo173]: [DOI: 10.1109/MS.2005.26 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.26)
 
 
{pagebreak}


  
* * *

| "**Architecture reviews** ... **identify project** problems **before** they become **costly to fix** and provide timely information to upper management so that they can make **better-informed decisions**." |


* * *

|*David M. Weiss, Sandra A. Rozsypal, Joseph F. Maranzano, Gus H. Zimmerman, Guy W. Warnken, Patricia E. Wirth, **Architecture Reviews: Practice and Experience**, IEEE Software, March 2005.[^foo174]*|

[^foo174]: [DOI: 10.1109/MS.2005.28 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.28)
 
 
{pagebreak}


  
* * *

| "One of the key issues in **Model Driven Architecture** is **model mapping**--that is, the **transformation** of models from one formalism to another." |


* * *

|*Jean-Louis Sourrouille, Guy Caplat, **Model Mapping Using Formalism Extensions**, IEEE Software, March 2005.[^foo175]*|

[^foo175]: [DOI: 10.1109/MS.2005.45 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.45)
 
 
{pagebreak}


  
* * *

| "**Software engineers** use certain common terms, such as **design**, analysis, and documentation, in significantly **different ways** from other engineers. ... '**design**' in **software engineering** is **more limited** in scope than in other fields." |


* * *

|*Philippe Kruchten, **Casting Software Design in the Function-Behavior-Structure Framework**, IEEE Software, March 2005.[^foo176]*|

[^foo176]: [DOI: 10.1109/MS.2005.33 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.33)
 
 
{pagebreak}


  
* * *

| "You **know** you're a **geek** when **going to the coffee shop** gets you thinking about interaction patterns between loosely coupled systems. ... Interestingly, the **optimization for throughput** results in a **concurrent and asynchronous processing model**: when you place your order, the cashier marks a coffee cup with your order and places it into a queue. " |


* * *

|*Gregor Hohpe, **Your Coffee Shop Doesn't Use Two-Phase Commit**, IEEE Software, March 2005.[^foo177]*|

[^foo177]: [DOI: 10.1109/MS.2005.52 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.52)
 
 
{pagebreak}






![](images-high-quality/2005-3.jpg)




{pagebreak}

  
* * *

| "**Agile** programming is **design for change**, without refactoring and rebuilding." |


* * *

|*Dave Thomas, **Agile Programming: Design to Accommodate Change**, IEEE Software, May 2005.[^foo178]*|

[^foo178]: [DOI: 10.1109/MS.2005.54 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.54)
 
 
{pagebreak}


  
* * *

| "**Kent Beck** wrote **eXtreme Programming eXplained** ... but the book has also caused an extraordinary degree of vitriol. ... The reasons appear to include a **focus on** writing **programs** rather than analysis or design (also known as modeling); a **disdain for documentation** as such; and the **Communist** notion of working only **40 hours** a week." |


* * *

|*Stephen J. Mellor, **Editor's Introduction: Adapting Agile Approaches to Your Project Needs**, IEEE Software, May 2005.[^foo179]*|

[^foo179]: [DOI: 10.1109/MS.2005.61 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.61)
 
 
{pagebreak}


  
* * *

| "People have claimed that **plan-based** and **agile** companies use very different project **management** techniques. ... managers using **agile** methods **focus on people** and **process** more than other managers. ... adopting **agile methods** appears to offer a good solution for **improving** the **management** of the development **process** and **customer relationships**." |


* * *

|*Stefano De Panfilis, Alberto Sillitti, Martina Ceschi, Giancarlo Succi, **Project Management in Plan-Based and Agile Companies**, IEEE Software, May 2005.[^foo180]*|

[^foo180]: [DOI: 10.1109/MS.2005.75 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.75)
 
 
{pagebreak}


  
* * *

| "We categorize projects into **dogs** (simple projects with low uncertainty), **colts** (simple projects with high uncertainty), **cows** (complex projects with low uncertainty), or **bulls** (complex projects with high uncertainty). We adapt our agile process by adding practices according to a project's profile." |


* * *

|*Todd Little, **Context-Adaptive Agility: Managing Complexity and Uncertainty**, IEEE Software, May 2005.[^foo181]*|

[^foo181]: [DOI: 10.1109/MS.2005.60 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.60)
 
 
{pagebreak}


  
* * *

| "Requirements engineers must ... view **requirements** as a **sociotechnical discipline** and draw skills, techniques, and knowledge from other disciplines." |


* * *

|*Suzanne Robertson, **Learning from Other Disciplines**, IEEE Software, May 2005.[^foo182]*|

[^foo182]: [DOI: 10.1109/MS.2005.68 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.68)
 
 
{pagebreak}


  
* * *

| "One of the **most robust** **findings in forecasting**, human judgment, and software estimation studies is that '**combination works**.' Apparently it doesn't matter whether the combination involves a **simple average** of estimates from different methods or a sophisticated weighting algorithm. A **simple average** offers a robust combination method unless one estimation method or expert is obviously more reliable than another. ... An expert's **technical skill** level can be a **poor indicator** of accuracy, and it's rarely obvious, in advance, which expert will be the better estimator. This is one reason a **simple average** of outputs from different estimation experts and methods frequently offers the **most robust** and accurate combination method." |


* * *

|*Magne J&#248;rgensen, **Practical Guidelines for Expert-Judgment-Based Software Effort Estimation**, IEEE Software, May 2005.[^foo183]*|

[^foo183]: [DOI: 10.1109/MS.2005.73 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.73)
 
 
{pagebreak}


  
* * *

| "**Text mining** is a relatively new research area associated with the creation of novel information resources from electronic text repositories. An **expert-witness database** based on text from legal, medical, and news documents demonstrates the successful application of text-mining techniques." |


* * *

|*Christopher Dozier, Peter Jackson, **Mining Text for Expert Witnesses**, IEEE Software, May 2005.[^foo184]*|

[^foo184]: [DOI: 10.1109/MS.2005.70 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.70)
 
 
{pagebreak}


  
* * *

| "It's **difficult to have a problem** with anything **Martin Fowler** writes. He's obviously a skilled designer, he practices what he preaches, and he has a forceful command of the English language without being stuffy. " |


* * *

|*Stephen Mellor, Christof Ebert, Fernando Berzal, **UML Distilled: From Difficulties to Assets**, IEEE Software, May 2005.[^foo185]*|

[^foo185]: [DOI: 10.1109/MS.2005.81 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.81)
 
 
{pagebreak}


  
* * *

| "I want to question the unquestionable status of that **Standish report**. That's because, you see, my own observations lead me to believe that **something is** **terribly wrong** with those Standish findings." |


* * *

|*Robert L. Glass, **IT Failure Rates - 70% or 10-15%?**, IEEE Software, May 2005.[^foo186]*|

[^foo186]: [DOI: 10.1109/MS.2005.66 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.66)
 
 
{pagebreak}






![](images-high-quality/2005-4.jpg)




{pagebreak}

  
* * *

| "Writing **stand-alone** tools that you can **combine** efficiently with others to handle more demanding tasks appears to be becoming a **forgotten art**." |


* * *

|*Diomidis Spinellis, **Tool Writing: A Forgotten Art?**, IEEE Software, July 2005.[^foo187]*|

[^foo187]: [DOI: 10.1109/MS.2005.111 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.111)
 
 
{pagebreak}


  
* * *

| "**JUnit** is an open source Java library that purports to make **unit testing** so **much fun** that programmers will actually want to write tests for their code." |


* * *

|*Panagiotis Louridas, **JUnit: Unit Testing and Coding in Tandem**, IEEE Software, July 2005.[^foo188]*|

[^foo188]: [DOI: 10.1109/MS.2005.100 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.100)
 
 
{pagebreak}


  
* * *

| "One strategy that **originally** seemed **promising** was the notion of '**buy not build**.' Using **COTS** products is one way to implement this strategy, because software development then becomes the process of '**simply**' **integrating** COTS components. However, it turns out that dealing with COTS is a **high-risk** activity ..." |


* * *

|*Alexander Egyed, Dewayne E. Perry, Hausi A. Muller, **Guest Editors' Introduction: Integrating COTS into the Development Process**, IEEE Software, July 2005.[^foo189]*|

[^foo189]: [DOI: 10.1109/MS.2005.93 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.93)
 
 
{pagebreak}


  
* * *

| "The **availability** of the components **before the system** is built provides **early data** on their performance properties." |


* * *

|*Murray Woodside, Xiuping Wu, Erik Putrycz, **Performance Techniques for COTS Systems**, IEEE Software, July 2005.[^foo190]*|

[^foo190]: [DOI: 10.1109/MS.2005.102 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.102)
 
 
{pagebreak}


  
* * *

| "What's the **state of the practice** of software engineering? If you look at current software engineering **books**, **journals**, and **conferences**, you **won't find much** of an answer." |


* * *

|*Robert L. Glass, **A Sad SAC Story about the State of the Practice**, IEEE Software, July 2005.[^foo191]*|

[^foo191]: [DOI: 10.1109/MS.2005.82 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.82)
 
 
{pagebreak}






![](images-high-quality/2005-5.jpg)




{pagebreak}

  
* * *

| "Twenty years is a very long time in the computing field. Yet, SEPM (Software Engineering Projects Management)â€™s progress has been agonizingly slow in many ways, probably because it's driven more by human behavior than by technology. **People change their behavior much more slowly than technology advances**." |


* * *

|*Arthur B. Pyster, Richard H. Thayer, **Guest Editors' Introduction: Software Engineering Project Management 20 Years Later**, IEEE Software, September 2005.[^foo192]*|

[^foo192]: [DOI: https://doi.ieeecomputersociety.org/10.1109/MS.2005.137 ](https://doi.ieeecomputersociety.org/10.1109/MS.2005.137)
 
 
{pagebreak}


  
* * *

| "Because we must balance the enterprise architect's goals with the needs of the agile development organization and the users driving the application's development, it helps to have **enterprise architects join the development team**. This provides opportunities to address the needs of all stakeholders: architects, developers, and business users." |


* * *

|*Rebecca J. Parsons, **Enterprise Architects Join the Team**, IEEE Software, September 2005.[^foo193]*|

[^foo193]: [DOI: 10.1109/MS.2005.119 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.119)
 
 
{pagebreak}


  
* * *

| "**Twenty years** is a very long time in the computing field. Yet, **SEPM's** software engineering project management progress has been **agonizingly slow** in many ways, probably because it's driven more by **human behavior** than by technology. People change their behavior much more slowly than technology advances. " |


* * *

|*Arthur B. Pyster, Richard H. Thayer, **Guest Editors' Introduction:  Software Engineering Project Management 20 Years Later**, IEEE Software, September 2005.[^foo194]*|

[^foo194]: [DOI: 10.1109/MS.2005.137 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.137)
 
 
{pagebreak}


  
* * *

| "Our discussions with **traditional developers and managers** concerning **agile software development** practices nearly always contain two somewhat contradictory ideas. They find that on small, stand-alone projects, agile practices are less burdensome and more in tune with the software industry's increasing needs for rapid development and coping with continuous change. However, they're frustrated with **the difficulty of scaling up** and integrating them into traditional, top-down systems development organizations." |


* * *

|*Richard Turner, Barry Boehm, **Management Challenges to Implementing Agile Processes in Traditional Development Organizations**, IEEE Software, September 2005.[^foo195]*|

[^foo195]: [DOI: 10.1109/MS.2005.129 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.129)
 
 
{pagebreak}


  
* * *

| "Use a **steering leadership** style rather than the detailed **plan-and-track** leadership style encouraged by conventional wisdom." |


* * *

|*Walker Royce, **Successful Software Management Style: Steering and Balance**, IEEE Software, September 2005.[^foo196]*|

[^foo196]: [DOI: 10.1109/MS.2005.138 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.138)
 
 
{pagebreak}


  
* * *

| "An enormous **intellectual distance** exists between the fields of **computer science** and **information systems**, which needs to be fixed soon." |


* * *

|*Robert L. Glass, **Never the CS and IS Twain Shall Meet?**, IEEE Software, September 2005.[^foo197]*|

[^foo197]: [DOI: 10.1109/MS.2005.130 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.130)
 
 
{pagebreak}






![](images-high-quality/2005-6.jpg)




{pagebreak}

  
* * *

| "Software engineering is a **decision-intensive discipline**. It still struggles with basic questions regarding the **utility of models**. Can researchers help software practitioners by building models that make explicit the knowledge hidden in various software resources?" |


* * *

|*Bojan Cukic, **Guest Editor's Introduction: The Promise of Public Software Engineering Data Repositories**, IEEE Software, November 2005.[^foo198]*|

[^foo198]: [DOI: 10.1109/MS.2005.153 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.153)
 
 
{pagebreak}


  
* * *

| "The '**art of release planning**' refers to relying on human intuition, communication, and capabilities to negotiate between conflicting objectives and constraints. The '**science of release planning**' refers to formalizing the problem and applying computational algorithms to generate best solutions." |


* * *

|*G?nther Ruhe, Moshood Omolade Saliu, **The Art and Science of Software Release Planning**, IEEE Software, November 2005.[^foo199]*|

[^foo199]: [DOI: 10.1109/MS.2005.164 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.164)
 
 
{pagebreak}


  
* * *

| "The field of software engineering would greatly benefit from detailed research on **why some software builders perform better than others**, but this isn't happening." |


* * *

|*Robert L. Glass, **A Follow-the-Leader Story with a Strange Ending**, IEEE Software, November 2005.[^foo200]*|

[^foo200]: [DOI: 10.1109/MS.2005.144 ](http://doi.ieeecomputersociety.org/10.1109/MS.2005.144)
 
 
{pagebreak}


# 2006
{pagebreak}






![](images-high-quality/2006-1.jpg)




{pagebreak}

  
* * *

| "Although design is a highly creative activity, we can still **learn fundamental design skills** - and accomplish a lot with them." |


* * *

|*Rebecca J. Wirfs-Brock, **Looking for Powerful Abstractions**, IEEE Software, January 2006.[^foo201]*|

[^foo201]: [DOI: 10.1109/MS.2006.22 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.22)
 
 
{pagebreak}


  
* * *

| "**Basili's** contributions cover three broad areas: research in the 1970s and early 1980s on **software measurement** and the **Goal Question Metric (GQM) model**, research in the 1980s and 1990s on these measurement ideas' maturation into a software engineering model of empirical studies, including the development of the **Quality Improvement Paradigm (QIP)** and the influence of the NASA Goddard Space Flight Center Software Engineering Laboratory, and research since 1990 in the Experience Factory as a model for creating learning organizations for continuous software process improvement." |


* * *

|*Marvin Zelkowitz, Carolyn Seaman, Forrest Shull, **Victor R. Basili's Contributions to Software Quality**, IEEE Software, January 2006.[^foo202]*|

[^foo202]: [DOI: 10.1109/MS.2006.33 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.33)
 
 
{pagebreak}


  
* * *

| "**Aspect-oriented programming** technologies aim to improve system modularity by **modularizing crosscutting concerns**. Global properties and programming and design issues can lead to crosscutting concerns--for example, error handling or transaction code, interacting features, and reliability and security. " |


* * *

|*Christa Schwanninger, Gail Murphy, **Guest Editors' Introduction: Aspect-Oriented Programming**, IEEE Software, January 2006.[^foo203]*|

[^foo203]: [DOI: 10.1109/MS.2006.12 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.12)
 
 
{pagebreak}


  
* * *

| "**Service-oriented architectures** are designed to support loose coupling between interacting software applications. Using Web services technology, SOAs support the creation of distributed applications in a heterogeneous environment." |


* * *

|*Viviane Jonckers, Bart Verheecke, Wim Vanderperren, **Unraveling Crosscutting Concerns in Web Services Middleware**, IEEE Software, January 2006.[^foo204]*|

[^foo204]: [DOI: 10.1109/MS.2006.31 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.31)
 
 
{pagebreak}


  
* * *

| "Aspect-oriented programming languages such as AspectJ offer new mechanisms for decomposing systems into modules and composing modules into systems. Common ways of using these mechanisms **couple aspects** to complex, changeable **implementation details**, which can **compromise modularity**.	" |


* * *

|*Macneil Shonle, Yuanfang Cai, Hridesh Rajan, Nishit Tewari, William G. Griswold, Yuanyuan Song, Kevin Sullivan, **Modular Software Design with Crosscutting Interfaces**, IEEE Software, January 2006.[^foo205]*|

[^foo205]: [DOI: 10.1109/MS.2006.24 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.24)
 
 
{pagebreak}


  
* * *

| "**Aspects** are evident **earlier in the life cycle**, such as during requirements gathering and architecture development. Identifying these early aspects ensures that you can appropriately capture **aspects related to the problem domain** (as opposed to merely the implementation)." |


* * *

|*Awais Rashid, Joao Ara&#x00FA;jo, Paul C. Clements, Ana Moreira, Elisa Baniassad, Bedir Tekinerdogan, **Discovering Early Aspects**, IEEE Software, January 2006.[^foo206]*|

[^foo206]: [DOI: 10.1109/MS.2006.8 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.8)
 
 
{pagebreak}


  
* * *

| "There's a **subtle way to lose your integrity**: trying to do a task as someone else would have you do it, rather than as you believe it should be done." |


* * *

|*Robert L. Glass, **Of Health, Trust, Money ... and Integrity**, IEEE Software, January 2006.[^foo207]*|

[^foo207]: [DOI: 10.1109/MS.2006.25 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.25)
 
 
{pagebreak}






![](images-high-quality/2006-2.jpg)




{pagebreak}

  
* * *

| "The **service-oriented paradigm** is founded on an assumption of **well-specified** and well-understood **contracts** that **isn't realized in practice**." |


* * *

|*Brian A. Malloy, Jeffrey M. Voas, Jason O. Hallstrom, Nicholas A. Kraft, **Improving the Predictable Assembly of Service-Oriented Architectures**, IEEE Software, March 2006.[^foo208]*|

[^foo208]: [DOI: 10.1109/MS.2006.49 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.49)
 
 
{pagebreak}


  
* * *

| "By studying ... architectural **patterns** and thus exposing ... systems' **inner beauty**, I hope to **inspire developers** who want to build on the experience of other well-engineered systems." |


* * *

|*Grady Booch, **On Architecture**, IEEE Software, March 2006.[^foo209]*|

[^foo209]: [DOI: 10.1109/MS.2006.52 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.52)
 
 
{pagebreak}


  
* * *

| "Project teams can **improve requirements** just by making several easy steps, including defining **mission and scope**; identifying **stakeholders**, goals, and goal **conflicts**; describing **scenarios**, requirements, **justifications**, and **assumptions**; and agreeing on **priorities** and acceptance **criteria**." |


* * *

|*Ian Alexander, **10 Small Steps to Better Requirements**, IEEE Software, March 2006.[^foo210]*|

[^foo210]: [DOI: 10.1109/MS.2006.34 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.34)
 
 
{pagebreak}


  
* * *

| "It's been 10 years since **David Garlan** and **Mary Shaw** wrote their seminal book **Software Architecture Perspective on an Emerging Discipline**, since **Maarten Boasson** edited a special issue of **IEEE Software on software architecture**, and since the first International **Software Architecture Workshop** took place. What has happened over these 10 years? What have we learned? Where do we look for information? What's the community around this discipline? And where are we going from here?" |


* * *

|*Philippe Kruchten, Henk Obbink, Judith Stafford, **The Past, Present, and Future for Software Architecture**, IEEE Software, March 2006.[^foo211]*|

[^foo211]: [DOI: 10.1109/MS.2006.59 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.59)
 
 
{pagebreak}


  
* * *

| "In the near future, **software architecture** will attain the status of all truly successful technologies: It will be **taken for granted**." |


* * *

|*Paul Clements, Mary Shaw, **The Golden Age of Software Architecture**, IEEE Software, March 2006.[^foo212]*|

[^foo212]: [DOI: 10.1109/MS.2006.58 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.58)
 
 
{pagebreak}


  
* * *

| "**UML** has been around since 1997. ... UML is **used** rather **loosely** and that UML models are often **incomplete**. This leads to miscommunication and other implementation and maintenance problems." |


* * *

|*Michel Chaudron, Johan Muskens, Christian Lange, **In Practice: UML Software Architecture and Design Description**, IEEE Software, March 2006.[^foo213]*|

[^foo213]: [DOI: 10.1109/MS.2006.50 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.50)
 
 
{pagebreak}


  
* * *

| "Including **architecture-centric design** and analysis methods in the **Extreme Programming framework** can help software developers address quality attributes in an explicit, methodical, engineering-principled way." |


* * *

|*Robert L. Nord, James E. Tomayko, **Software Architecture-Centric Methods and Agile Development**, IEEE Software, March 2006.[^foo214]*|

[^foo214]: [DOI: 10.1109/MS.2006.54 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.54)
 
 
{pagebreak}


  
* * *

| "**Service-Oriented Architecture (SOA)** represents a paradigm consisting of a set of **architectural principles** for **building loosely coupled software systems**. Actually, the SOA paradigm applies not only to XML Web services but also to **other technologies** such as email clients and servers and message-oriented middleware." |


* * *

|*Michael Stal, **Using Architectural Patterns and Blueprints for Service-Oriented Architecture**, IEEE Software, March 2006.[^foo215]*|

[^foo215]: [DOI: 10.1109/MS.2006.60 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.60)
 
 
{pagebreak}


  
* * *

| "**Wikis** have become one of the most popular tool shells. You can find them just about everywhere that demands effective **collaboration** and **knowledge sharing** at a **low budget**. Wikipedia has certainly enhanced their popularity, but they also have a place in intranet-based applications such as **defect** tracking, **requirements** management, **test-case** management, and project portals." |


* * *

|*Panagiotis Louridas, **Using Wikis in Software Development**, IEEE Software, March 2006.[^foo216]*|

[^foo216]: [DOI: 10.1109/MS.2006.62 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.62)
 
 
{pagebreak}


  
* * *

| "One way to **deal with bugs** is to **avoid them entirely** through stringent quality control. To conserve our valuable resources, we can use tools to catch the bugs before they end-up in production code. We can use **type-safe** languages, pay attention to **compiler warnings**, adopt specialized **bug-finding tools**, or we can adjust our code to make it locate bugs during **testing**." |


* * *

|*Diomidis Spinellis, **Bug Busters**, IEEE Software, March 2006.[^foo217]*|

[^foo217]: [DOI: 10.1109/MS.2006.40 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.40)
 
 
{pagebreak}






![](images-high-quality/2006-3.jpg)




{pagebreak}

  
* * *

| "Every interesting software-intensive system has an **architecture**. While some of these architectures are intentional, most appear to be **accidental**. Philippe **Kruchten** has observed that 'the life of a software architect is a long and rapid **succession** of **suboptimal design** decisions taken partly **in the dark**.' " |


* * *

|*Grady Booch, **The Accidental Architecture**, IEEE Software, May 2006.[^foo218]*|

[^foo218]: [DOI: 10.1109/MS.2006.86 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.86)
 
 
{pagebreak}


  
* * *

| "The ramifications of **failing** to completely and correctly **address security** can **devastate an organization**, not only in compromised data and financial cost but also in the time and energy spent to recover." |


* * *

|*Jane Huffman Hayes, Nancy Eickelmann, E. Ashlee Holbrook, Frank Perry, **Security and Software Quality: An Interview with Frank Perry**, IEEE Software, May 2006.[^foo219]*|

[^foo219]: [DOI: 10.1109/MS.2006.83 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.83)
 
 
{pagebreak}


  
* * *

| "Organizations frequently commit to requirements and contracts to **boost short-term revenues** without properly aligning sales, product management, project management, and marketing. Such misalignment results in **insufficient capacity planning** or product-development resource allocation, thus delaying projects." |


* * *

|*Christof Ebert, **Understanding the Product Life Cycle: Four Key Requirements Engineering Techniques**, IEEE Software, May 2006.[^foo220]*|

[^foo220]: [DOI: 10.1109/MS.2006.88 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.88)
 
 
{pagebreak}


  
* * *

| "**Ethnographies** - using video to **observe users** in their own work environments--can support **requirements elicitation**." |


* * *

|*Paul Luff, Marina Jirotka, **Supporting Requirements with Video-Based Analysis**, IEEE Software, May 2006.[^foo221]*|

[^foo221]: [DOI: 10.1109/MS.2006.84 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.84)
 
 
{pagebreak}


  
* * *

| "In recent years, the software engineering community has focused on **organizing** its **existing knowledge** and finding opportunities to transform that knowledge into a university curriculum. ... they've also focused largely on SE's engineering aspects, at the **expense of its human and social dimensions**." |


* * *

|*Hans van Vliet, **Reflections on Software Engineering Education**, IEEE Software, May 2006.[^foo222]*|

[^foo222]: [DOI: 10.1109/MS.2006.80 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.80)
 
 
{pagebreak}


  
* * *

| "**Debuggers** are cheap and effective tools. Typically we use them in a bottom-up fashion starting from the problem going to its source, but when this strategy fails, we might have to resort to a more tedious top-down breadth-first search. To locate bugs, we can also use **hardware-assisted data** and code **breakpoints**. For bugs that are difficult to reproduce, attaching a debugger to a running process as well as **postmortem** and **remote debugging** are some alternatives. Finally, we can **permanently embed** debugging knowledge in a program's source code, through **logging statements**." |


* * *

|*Diomidis Spinellis, **Debuggers and Logging Frameworks**, IEEE Software, May 2006.[^foo223]*|

[^foo223]: [DOI: 10.1109/MS.2006.70 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.70)
 
 
{pagebreak}






![](images-high-quality/2006-4.jpg)




{pagebreak}

  
* * *

| "'Do you use **the same password** for multiple Web sites?' ... **41 percent** of the respondents said they always use **the same password**, **45 percent** said they have a **few different passwords**, and **14 percent** said they **never use the same password** on multiple Web sites. Those 14 percent probably either **don't have an Internet connection** or are '**security professionals**.' The problem is that where the 'security professional' sees prudent, responsible behavior, users **simply see overhead** that gets in the way of performing whatever task they're trying to do." |


* * *

|*Warren Harrison, **Passwords and Passion**, IEEE Software, July 2006.[^foo224]*|

[^foo224]: [DOI: 10.1109/MS.2006.110 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.110)
 
 
{pagebreak}


  
* * *

| "When **things go right**, software hums along like **well-oiled machinery**--receive an event, twiddle with inputs, send a flurry of messages, change the system state, interact with the environment or users, then wait for the next chunk of work. **Smooth**. Mechanical. Predictable. But what happens when **something goes wrong**? How should you design your software to **detect**, **react**, and **recover** from **exceptional conditions**?" |


* * *

|*Rebecca Wirfs-Brock, **Designing for Recovery**, IEEE Software, July 2006.[^foo225]*|

[^foo225]: [DOI: 10.1109/MS.2006.98 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.98)
 
 
{pagebreak}


  
* * *

| "Software **development** is ultimately an **engineering activity**, whose primary activity is to **deliver executable artifacts** in a manner that **balances the forces** on that system. The forces that swirl around a software-intensive system include not only its purely **functional** requirements but also a multitude of **nonfunctional** ones, such as reliability, portability, and scalability (often called a system's -ilities)." |


* * *

|*Grady Booch, **From Small to Gargantuan**, IEEE Software, July 2006.[^foo226]*|

[^foo226]: [DOI: 10.1109/MS.2006.102 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.102)
 
 
{pagebreak}


  
* * *

| "**Software testing** is still one of the more neglected practices within the software development life cycle." |


* * *

|*Natalia Juristo, Ana M. Moreno, Wolfgang Strigel, **Guest Editors' Introduction: Software Testing Practices in Industry**, IEEE Software, July 2006.[^foo227]*|

[^foo227]: [DOI: 10.1109/MS.2006.104 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.104)
 
 
{pagebreak}


  
* * *

| "Most companies and testing books use the **term unit testing**, but its **semantics varies** widely in different organizations. ... Unit testing means **testing the smallest separate module** in the system. Some people ... stress that it's the smallest specified module, but opinions differ about the need for specifications. Regardless, unit testing is **technically oriented**, with in/out parameters." |


* * *

|*Per Runeson, **A Survey of Unit Testing Practices**, IEEE Software, July 2006.[^foo228]*|

[^foo228]: [DOI: 10.1109/MS.2006.91 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.91)
 
 
{pagebreak}


  
* * *

| "There's no language suitable for all tasks, and there probably won't ever be one. When **choosing a programming language**, you have to balance programmer **productivity**, **maintainability**, efficiency, portability, **tool support**, and software and hardware interfaces. ... for some tasks, adopting an existing **domain-specific** language, building a new one, or using a **general-purpose** declarative language can be the right choice." |


* * *

|*Diomidis Spinellis, **Choosing a Programming Language**, IEEE Software, July 2006.[^foo229]*|

[^foo229]: [DOI: 10.1109/MS.2006.97 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.97)
 
 
{pagebreak}


  
* * *

| "**Evidence-based reasoning** is becoming common in many fields. It's widely enshrined in the practice and teaching of medicine, law, and management, for example. **Evidence-based approaches** demand that, among other things, practitioners **systematically track** down the **best evidence** relating to some practice; **critically appraise** that evidence for validity, impact, and applicability; and **carefully document** it." |


* * *

|*Tim Menzies, Jairus Hihn, **Evidence-Based Cost Estimation for Better-Quality Software**, IEEE Software, July 2006.[^foo230]*|

[^foo230]: [DOI: 10.1109/MS.2006.99 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.99)
 
 
{pagebreak}


  
* * *

| "Oddly enough, many software engineering issues and conflicts that were **relevant 20 years** ago are still **relevant today**." |


* * *

|*Robert L. Glass, **How Much of the Software Engineering Old Still Remains New?**, IEEE Software, July 2006.[^foo231]*|

[^foo231]: [DOI: 10.1109/MS.2006.106 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.106)
 
 
{pagebreak}






![](images-high-quality/2006-5.jpg)




{pagebreak}

  
* * *

| "Despite the challenges and **complexities** involved in organizing and managing **globally distributed software development**, this phenomenon's pace has been remarkable. Global software development seems to have become a **business necessity** for various reasons, including cost, scarcity of resources, and the need to locate development closer to the customers. In fact, it is fast becoming a **pervasive business phenomenon**." |


* * *

|*Deependra Moitra, Daniela Damian, **Guest Editors' Introduction:  Global Software Development: How Far Have We Come?**, IEEE Software, September 2006.[^foo232]*|

[^foo232]: [DOI: 10.1109/MS.2006.126 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.126)
 
 
{pagebreak}


  
* * *

| "Three closing comments are in order. ... practices that promote **local knowledge** movement (such as informal discussions with peers) make **global knowledge management difficult**. ... a common error we've encountered is having different, **unconnected KMSs** in place. ... trying to **unify different cultures** in global organizations (except under crisis-management circumstances) might **not be the right approach**." |


* * *

|*Peter Baloh, Kevin C. Desouza, Yukika Awazu, **Managing Knowledge in Global Software Development Efforts: Issues and Practices**, IEEE Software, September 2006.[^foo233]*|

[^foo233]: [DOI: 10.1109/MS.2006.135 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.135)
 
 
{pagebreak}


  
* * *

| "The availability of **testing infrastructure** is a major factor in product development project costs. Software **virtualization** is a powerful mechanism for **simulating a test setup** on a few desktops that would otherwise require 'real' equipment." |


* * *

|*Swaminathan Seetharaman, Krishna Murthy B.V.S., **Test Optimization Using Software Virtualization**, IEEE Software, September 2006.[^foo234]*|

[^foo234]: [DOI: 10.1109/MS.2006.143 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.143)
 
 
{pagebreak}


  
* * *

| "**Participation in open source projects** can **make us better programmers** by exposing us to maintenance, new technologies, and different application domains, and make us better system administrators by forcing us to tinker with complex system setups. " |


* * *

|*Diomidis Spinellis, **Open Source and Professional Advancement**, IEEE Software, September 2006.[^foo235]*|

[^foo235]: [DOI: 10.1109/MS.2006.136 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.136)
 
 
{pagebreak}


  
* * *

| "The following is a **familiar scenario**: management, feeling pressure from corporate headquarters and the marketplace, **dictates** that a product will be **released ahead of** the agreed-upon **schedule**. This is an all-too-common example of a company's political climate in which influential people base their desire for success more on **personal agendas** than on quality. This scenario illustrates two key issues: the **frustrations** involved in **producing quality products** and the **conflicts** between self and team. " |


* * *

|*Fran Boehme Mackin, Scott Stribrny, **When Politics Overshadow Software Quality**, IEEE Software, September 2006.[^foo236]*|

[^foo236]: [DOI: 10.1109/MS.2006.145 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.145)
 
 
{pagebreak}






![](images-high-quality/2006-6.jpg)




{pagebreak}

  
* * *

| "On behalf of the Computer History Museum and the ACM, **Grady Booch** recently interviewed **John Backus**, who led the IBM team that created Fortran in the 1950s. Backus went on to coinvent the **Backus-Naur Form** (which was first applied to the definition of ALGOL), then later pioneered important advances in **functional programming**." |


* * *

|*Grady Booch, **Goodness of Fit**, IEEE Software, November 2006.[^foo237]*|

[^foo237]: [DOI: 10.1109/MS.2006.162 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.162)
 
 
{pagebreak}


  
* * *

| "The first **software engineering programs** were at the graduate level, primarily as terminal master's degrees for those already developing commercial and industrial software. By the early 1990s, educators began to consider software engineering's role at the undergraduate level." |


* * *

|*Donald Bagert, Michael J. Lutz, **Guest Editors' Introduction: Software Engineering Curriculum Development**, IEEE Software, November 2006.[^foo238]*|

[^foo238]: [DOI: 10.1109/MS.2006.164 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.164)
 
 
{pagebreak}


  
* * *

| "The recommendations in **Software Engineering 2004**: Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering, form a volume of the larger Computing Curriculum project of the IEEE-CS and ACM. SE2004 evolved from an analysis of **desired student outcomes** for a software engineering graduate as compared to those for computer science and computer engineering graduates." |


* * *

|*Timothy C. Lethbridge, Thomas B. Hilburn, Jorge L. D?az-Herrera, Ann E. Kelley Sobel, Richard J. LeBlanc Jr, **SE2004: Recommendations for Undergraduate Software Engineering Curricula**, IEEE Software, November 2006.[^foo239]*|

[^foo239]: [DOI: 10.1109/MS.2006.171 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.171)
 
 
{pagebreak}


  
* * *

| "There are many challenges in delivering a **software engineering curriculum** by **distance learning**. ... Theses programs are characterized as part-time, open, large-scale **distance learning**, professionally accredited, and primarily aimed at practitioners in the IT industry." |


* * *

|*Pete Thomas, Michel Wermelinger, Juan Fern?ndez-Ramil, Brendan Quinn, Leonor Barroca, Lucia Rapanotti, Bashar Nuseibeh, **Learning Software Engineering at a Distance**, IEEE Software, November 2006.[^foo240]*|

[^foo240]: [DOI: 10.1109/MS.2006.169 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.169)
 
 
{pagebreak}


  
* * *

| "**Open source software** offers a unique opportunity for **improving learning** outcomes for software engineering and computer science education." |


* * *

|*Kal Toth, **Experiences with Open Source Software Engineering Tools**, IEEE Software, November 2006.[^foo241]*|

[^foo241]: [DOI: 10.1109/MS.2006.158 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.158)
 
 
{pagebreak}


  
* * *

| "In May 2000, the World Wide Web Consortium issued the specification for version 1.1 of the **Simple Object Access Protocol**. The name SOAP stuck; in version 1.2, the W3C ceased to consider **SOAP to be an acronym**. SOAP is just SOAP, a way applications can use XML to exchange structured and typed information. SOAP-based services are the foundation of the current push toward service-oriented Web architecture. Unfortunately, getting from the foundation to the complete edifice still involves a lot of work." |


* * *

|*Panagiotis Louridas, **SOAP and Web Services**, IEEE Software, November 2006.[^foo242]*|

[^foo242]: [DOI: 10.1109/MS.2006.172 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.172)
 
 
{pagebreak}


  
* * *

| "**Quantification** helps you better understand your **requirements**, improving them and sometimes even revealing new **requirements** or stakeholders." |


* * *

|*Neil Maiden, **Improve Your Requirements: Quantify Them**, IEEE Software, November 2006.[^foo243]*|

[^foo243]: [DOI: 10.1109/MS.2006.165 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.165)
 
 
{pagebreak}


  
* * *

| "The art of telling **a compelling design story** is understanding what your audience knows and what they need to know about your design, and then plotting your **storyline** accordingly." |


* * *

|*Rebecca J. Wirfs-Brock, **Explaining Your Design**, IEEE Software, November 2006.[^foo244]*|

[^foo244]: [DOI: 10.1109/MS.2006.159 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.159)
 
 
{pagebreak}


  
* * *

| "Software development currently seems to take a '**Roman**' approach; that is, it focuses on the contributions of a group of programmers at an organization. Instead, it should take a '**Greek**' approach, focusing on the contributions of individual, self-motivated programmers. But don't let any unorganized **Barbarian** programmers near!" |


* * *

|*Robert L. Glass, **Greece vs. Rome: Two Very Different Software Cultures**, IEEE Software, November 2006.[^foo245]*|

[^foo245]: [DOI: 10.1109/MS.2006.163 ](http://doi.ieeecomputersociety.org/10.1109/MS.2006.163)
 
 
{pagebreak}


# 2007
{pagebreak}






![](images-high-quality/2007-1.jpg)




{pagebreak}

  
* * *

| "Software systems usually have the **same basic architectural pattern** as their earlier incarnations, manifesting in decreasingly refined forms as we move back in time. Similarly, when a new problem confronts us, we try many different approaches, but over time, for the same kind of problem, **solutions tend to converge** to the same, more constrained, solution space." |


* * *

|*Grady Booch, **It Is What It Is Because It Was What It Was**, IEEE Software, January 2007.[^foo246]*|

[^foo246]: [DOI: 10.1109/MS.2007.19 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.19)
 
 
{pagebreak}


  
* * *

| "**Experienced programmers plan**, while **junior programmers jump** into their work. Some simpler **personal planning techniques** can help you eliminate waste when you work, write less code, design more simply, inject fewer defects, and generally **deliver sooner**.  ... The best way I know to **deliver sooner** is to **do less**." |


* * *

|*J.B. Rainsberger, **Personal Planning**, IEEE Software, January 2007.[^foo247]*|

[^foo247]: [DOI: 10.1109/MS.2007.23 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.23)
 
 
{pagebreak}


  
* * *

| "**Small software organizations**--independently financed and organized companies with **fewer than 50 employees**--are fundamental to many national economies' growth. In the US, Brazil, Canada, China, India, Finland, Ireland, Hungary, and many other countries, small companies represent up to 85 percent of all software organizations. However, to persist and grow, small software companies need **efficient, effective software** engineering solutions." |


* * *

|*Christiane Gresse von Wangenheim, Ita Richardson, **Guest Editors' Introduction: Why are Small Software Organizations Different?**, IEEE Software, January 2007.[^foo248]*|

[^foo248]: [DOI: 10.1109/MS.2007.12 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.12)
 
 
{pagebreak}


  
* * *

| "**Software process assessments** are typically the first step to commencing software process improvement. Small software companies find that many assessment methods are linked to **plan-driven improvement** models and can be **expensive** in terms of the resources required. " |


* * *

|*Fergal Mc Caffery, Philip S. Taylor, Gerry Coleman, **Adept: A Unified Assessment Method for Small Software Companies**, IEEE Software, January 2007.[^foo249]*|

[^foo249]: [DOI: 10.1109/MS.2007.3 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.3)
 
 
{pagebreak}


  
* * *

| "There is (or should be) **more fun** in software engineering than you might think." |


* * *

|*Robert L. Glass, **Is Software Engineering Fun?**, IEEE Software, January 2007.[^foo250]*|

[^foo250]: [DOI: 10.1109/MS.2007.18 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.18)
 
 
{pagebreak}






![](images-high-quality/2007-2.jpg)




{pagebreak}

  
* * *

| "Designing **incrementally**, keeping it **clean** as you go, can help you **avoid accidental complexity**. But doing this takes **discipline** and design **familiarity**." |


* * *

|*Rebecca J. Wirfs-Brock, **Toward Design Simplicity**, IEEE Software, March 2007.[^foo251]*|

[^foo251]: [DOI: 10.1109/MS.2007.57 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.57)
 
 
{pagebreak}


  
* * *

| "During an **architectural assessmen** ... it's important to be **truthful** as well as **gentle**. ... The development organization's unique task is to address all the essential concerns of all the important stakeholders and **avoid being blindsided** by unexpected problems and stakeholders." |


* * *

|*Grady Booch, **Speaking Truth to Power**, IEEE Software, March 2007.[^foo252]*|

[^foo252]: [DOI: 10.1109/MS.2007.53 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.53)
 
 
{pagebreak}


  
* * *

| "Accepting some of the testing team's responsibility by **writing your own tests** lets you trade the time you spend fixing defects for less time spent avoiding them in the first place." |


* * *

|*J.B. Rainsberger, **Avoiding Defects**, IEEE Software, March 2007.[^foo253]*|

[^foo253]: [DOI: 10.1109/MS.2007.34 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.34)
 
 
{pagebreak}


  
* * *

| "The growing attention being paid to **stakeholders' needs and desires** reflects the growing importance of requirements engineering (RE) in software and systems development. ... : identifying the stakeholders in a project, determining who and how important they are, prioritizing the **identified** stakeholder roles, and **selecting representative individuals** or groups from the identified and **prioritized** stakeholder roles with whom the development team can elicit and validate system requirements." |


* * *

|*Roel J. Wieringa, Martin Glinz, **Guest Editors' Introduction: Stakeholders in Requirements Engineering**, IEEE Software, March 2007.[^foo254]*|

[^foo254]: [DOI: 10.1109/MS.2007.42 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.42)
 
 
{pagebreak}


  
* * *

| "**Requirements engineering** must manage the risks arising from project stakeholders. The **Outcome-Based Stakeholder Risk Assessment Model** (Obsram) provides guidance in stakeholder identification, identification of **stakeholder impacts and perceptions**, identification of potentially negative responses that pose risks to the project, and assessment and prioritization of those risks." |


* * *

|*Richard W. Woolridge, Joanne E. Hale, Denise J. McManus, **Stakeholder Risk Assessment: An Outcome-Based Approach**, IEEE Software, March 2007.[^foo255]*|

[^foo255]: [DOI: 10.1109/MS.2007.54 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.54)
 
 
{pagebreak}


  
* * *

| "**Terminological interference** occurs in requirements engineering when stakeholders have **different interpretations** of the terms they use to describe their problem domain." |


* * *

|*Nan Niu, Steve Easterbrook, **So, You Think You Know Others' Goals? A Repertory Grid Study**, IEEE Software, March 2007.[^foo256]*|

[^foo256]: [DOI: 10.1109/MS.2007.52 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.52)
 
 
{pagebreak}


  
* * *

| "The recommendations for **analyzing productivity** in the appendix to the ISO/IEC 15939 standard are inappropriate. ... Problems with the ISO/IEC advice can be compounded if software engineers attempt to apply **statistical process-control** techniques to software productivity metrics." |


* * *

|*Colin Connaughton, David Ross Jeffery, Barbara Kitchenham, **Misleading Metrics and Unsound Analyses**, IEEE Software, March 2007.[^foo257]*|

[^foo257]: [DOI: 10.1109/MS.2007.49 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.49)
 
 
{pagebreak}


  
* * *

| "**Eclipse** is an **open source** software project dedicated to providing a robust, full-featured, **and commercial-quality platform** for developing and supporting highly **integrated** software engineering **tools**." |


* * *

|*Michael Jiang, Zhihui Yang, **Using Eclipse as a Tool-Integration Platform for Software Development**, IEEE Software, March 2007.[^foo258]*|

[^foo258]: [DOI: 10.1109/MS.2007.58 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.58)
 
 
{pagebreak}






![](images-high-quality/2007-3.jpg)




{pagebreak}

  
* * *

| "The **architecture** of a software-intensive system is largely **irrelevant to its end users**. Far more important to these  stakeholders is the **system's behavior**, exhibited by raw, working source code. As long as a system provides the right answers  at the right time with all the right other '-ilities' (maintainability, dependability, changeability, and so on), end users couldn't care less about what's behind the curtain making things work. To stakeholders other than end users, however, a system's architecture is intensely interesting. Moreover, software architecture has had a hand in **better project management**, greater use of **iterative development**, and leverage from the **Web's infrastructure**." |


* * *

|*Grady Booch, **The Irrelevance of Architecture**, IEEE Software, May 2007.[^foo259]*|

[^foo259]: [DOI: 10.1109/MS.2007.93 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.93)
 
 
{pagebreak}


  
* * *

| "Knowing what tactic to take when someone **criticizes your design** is important. Designers need to recognize, accept, and **seek out valid criticism**, while **deflecting false criticisms** and **defusing aesthetic arguments**." |


* * *

|*Rebecca J. Wirfs-Brock, **Handling Design Criticism**, IEEE Software, May 2007.[^foo260]*|

[^foo260]: [DOI: 10.1109/MS.2007.76 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.76)
 
 
{pagebreak}


  
* * *

| "**Test-driven development** is a discipline of design and programming where every line of new **code is written in response to a test** the programmer writes just before coding. ... The ways TDD is being used in nontrivial situations (database development, embedded software development, GUI development, performance tuning), signifying an adoption level for the practice beyond the visionary phase and into the early mainstream." |


* * *

|*Grigori Melnik, Ron Jeffries, **Guest Editors' Introduction: TDD--The Art of Fearless Programming**, IEEE Software, May 2007.[^foo261]*|

[^foo261]: [DOI: 10.1109/MS.2007.75 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.75)
 
 
{pagebreak}


  
* * *

| "A professional software developer ships **clean**, **flexible** code that **works**-**on time**. ... **Test-driven development** is a discipline that helps developers behave in a more professional manner." |


* * *

|*Robert C. Martin, **Professionalism and Test-Driven Development**, IEEE Software, May 2007.[^foo262]*|

[^foo262]: [DOI: 10.1109/MS.2007.85 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.85)
 
 
{pagebreak}


  
* * *

| "Developers can use a **test-driven development** with **database schema** just as they use it with application code. Implementing test-driven database development (TDDD) involves three relatively simple steps: database **refactoring**, database **regression testing**, and **continuous** database **integration**." |


* * *

|*Scott W. Ambler, **Test-Driven Development of Relational Databases**, IEEE Software, May 2007.[^foo263]*|

[^foo263]: [DOI: 10.1109/MS.2007.91 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.91)
 
 
{pagebreak}


  
* * *

| "An explanation of test-driven development often begins by describing the **red-green-refactor** cycle. This slogan is so catchy and the description so simple that practitioners and tool developers tend to focus only on this **localized cycle**. Experience has shown that a successful functional test-driven development strategy must **span the entire application life cycle** and must be supported by effective tools. " |


* * *

|*Jennitta Andrea, **Envisioning the Next Generation of Functional Testing Tools**, IEEE Software, May 2007.[^foo264]*|

[^foo264]: [DOI: 10.1109/MS.2007.73 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.73)
 
 
{pagebreak}






![](images-high-quality/2007-4.jpg)




{pagebreak}

  
* * *

| "Cognitive biases exist, and designers are remiss if we ignore them. By becoming aware of some common **cognitive biases in design discussions**, you can learn when it's worthwhile to tweak your message to increase the likelihood of it being accepted." |


* * *

|*Rebecca J. Wirfs-Brock, **Giving Design Advice**, IEEE Software, July 2007.[^foo265]*|

[^foo265]: [DOI: 10.1109/MS.2007.108 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.108)
 
 
{pagebreak}


  
* * *

| "**A domain-specific language** for building user interfaces offers a transparent way for programmers to specify interface elements. **Microsoft's Extensible Application Markup Language** is an XML dialect for this purpose. However, **XAML** isn't the only choice for programmers who wish to try a declarative approach, and some options are even open source." |


* * *

|*Panagiotis Louridas, **Declarative GUI Programming in Microsoft Windows**, IEEE Software, July 2007.[^foo266]*|

[^foo266]: [DOI: 10.1109/MS.2007.105 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.105)
 
 
{pagebreak}


  
* * *

| "Virtually all **well-structured music**, music that pleases the ear and moves the spirit, is **full of patterns**. By comparing musical and software patterns, the author helps clarify the purposes and forms of patterns. Architectural and design patterns make software-intensive systems easier to understand and adapt to because of their **regularity and simplicity**." |


* * *

|*Grady Booch, **The Well-Tempered Architecture**, IEEE Software, July 2007.[^foo267]*|

[^foo267]: [DOI: 10.1109/MS.2007.122 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.122)
 
 
{pagebreak}


  
* * *

| "**Patterns** have become part of the **software development mainstream**. They're available for all phases of the development process, including analysis, documentation, design, testing, and configuration management, to name a few." |


* * *

|*Michael Kircher, Markus V&#x00F6;lter, **Guest Editors' Introduction: Software Patterns**, IEEE Software, July 2007.[^foo268]*|

[^foo268]: [DOI: 10.1109/MS.2007.109 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.109)
 
 
{pagebreak}


  
* * *

| "For the past two decades, **software patterns** have significantly influenced how developers design and implement computing systems, well above and **beyond the most popular research** in the software field. " |


* * *

|*Douglas C. Schmidt, Kevlin Henney, Frank Buschmann, **Past, Present, and Future Trends in Software Patterns**, IEEE Software, July 2007.[^foo269]*|

[^foo269]: [DOI: 10.1109/MS.2007.115 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.115)
 
 
{pagebreak}


  
* * *

| "All of software design involves developers **making decisions** and reifying those decisions in code. ... However, architects often **fail to document** their decisions well. This leads to **architectural erosion**: decisions made during later development might conflict with the original architectural decisions and thus cause significant system disruptions. " |


* * *

|*Neil B. Harrison, Uwe Zdun, Paris Avgeriou, **Using Patterns to Capture Architectural Decisions**, IEEE Software, July 2007.[^foo270]*|

[^foo270]: [DOI: 10.1109/MS.2007.124 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.124)
 
 
{pagebreak}


  
* * *

| "**Microsoft's patterns & practices** group conducted a survey that indicates a **significant gap** between the patterns **expert community** and the **software practitioners** attempting to use and leverage patterns in their daily work." |


* * *

|*Jason Hogg, Dragos Manolescu, Wojtek Kozaczynski, Ade Miller, **The Growing Divide in the Patterns World**, IEEE Software, July 2007.[^foo271]*|

[^foo271]: [DOI: 10.1109/MS.2007.120 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.120)
 
 
{pagebreak}


  
* * *

| "**Researchers** have studied and created a wide range of techniques to **support software engineers** during development. ... there's a high demand and acceptance for **unobtrusive**, **quickly** executable, and reactive **assistance** in core software engineering phases to help solve the problems at hand." |


* * *

|*Eric Ras, J&#x00F6;rg Rech, Bj&#x00F6;rn Decker, **Intelligent Assistance in German Software Development: A Survey**, IEEE Software, July 2007.[^foo272]*|

[^foo272]: [DOI: 10.1109/MS.2007.110 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.110)
 
 
{pagebreak}


  
* * *

| "**Asimov's Laws of Robotics** constrain robots to serve their human masters. Minor rewording shows that similar principles are very **relevant to software too**. These **laws of software** encompass a host of desiderata and trade-offs that software developers need to keep in mind. They also demonstrate that issues that are typically treated in a fragmented manner are actually strongly intertwined." |


* * *

|*Dror G. Feitelson, **Asimov's Laws of Robotics Applied to Software**, IEEE Software, July 2007.[^foo273]*|

[^foo273]: [DOI: 10.1109/MS.2007.100 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.100)
 
 
{pagebreak}






![](images-high-quality/2007-5.jpg)




{pagebreak}

  
* * *

| "Building and acquiring software requires making **many decisions** and choosing between numerous solutions, yet the infrastructure to help people make decisions **based on good evidence** isn't well developed. The software engineering community needs better communication between researchers and practitioners to help make **useful bodies of evidence** available that can impact practice." |


* * *

|*Forrest Shull, **Who Needs Evidence, Anyway?**, IEEE Software, September 2007.[^foo274]*|

[^foo274]: [DOI: 10.1109/MS.2007.152 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.152)
 
 
{pagebreak}


  
* * *

| "Since 2005, developers have used **Ajax** to let users interact with Web applications much as they do with desktop applications. But the **Ajax** features represented in applications such as **Google Maps**, **Netvibes**, and Zimbra Collaboration Suite demand detailed coding. **Ajax frameworks** are utility sets that make it easier to develop and maintain these applications." |


* * *

|*Juan Pablo Aroztegi, Nicol&#x00E1;s Serrano, **Ajax Frameworks in Interactive Web Apps**, IEEE Software, September 2007.[^foo275]*|

[^foo275]: [DOI: 10.1109/MS.2007.132 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.132)
 
 
{pagebreak}


  
* * *

| "Building **clean abstractions** with **clearly defined extension points** is satisfying, but the best design choice isn't always obvious. How much access should you give a subclass to a class's inner workings? How much freedom should you give a subclass designer to 'bend' inherited behaviors to make a new abstraction fit in or to extend an existing one? These decisions involve nuanced reasoning. The contract between a class and its subclasses requires **thoughtful design**, **experimentation**, and **careful specification**." |


* * *

|*Rebecca J. Wirfs-Brock, **Designing Extensible Classes**, IEEE Software, September 2007.[^foo276]*|

[^foo276]: [DOI: 10.1109/MS.2007.137 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.137)
 
 
{pagebreak}


  
* * *

| "**The architect**, either as an individual, a role, or a team, lovingly crafts, grows, and governs that architecture as it emerges from the **thousands of individual design decisions** of which it's composed. In this sense, an **architecture-first approach** appears to be a reflection of sound development practices." |


* * *

|*Grady Booch, **The Economics of Architecture-First**, IEEE Software, September 2007.[^foo277]*|

[^foo277]: [DOI: 10.1109/MS.2007.146 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.146)
 
 
{pagebreak}


  
* * *

| "**Copy-pasting** code is a source of bugs. By employing in our programs **abstraction mechanisms** such as **functions**, **classes**, **types**, **decision tables**, **domain-specific languages**, and databases, we can abstract common elements into **parameterized reusable functionality**. However, **abstraction has its cost**. Its early gains are large, but eventually the benefits turn negative and the code becomes less comprehensible and maintainable. Deciding when abstracting is appropriate is what makes programming an art." |


* * *

|*Diomidis Spinellis, **Abstraction and Variation**, IEEE Software, September 2007.[^foo278]*|

[^foo278]: [DOI: 10.1109/MS.2007.127 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.127)
 
 
{pagebreak}


  
* * *

| "**The languages** discussed ... have a long history, which is perhaps why some have had **several different names** over the years. One such language is **Lisp**, the second-oldest programming language. For years, many somewhat dismissively described languages such as Lisp as '**scripting languages**.' Today, we more commonly refer to them as **dynamically typed languages**, typified by **Python** **and** Ruby, **and** their impact is arguably greater than ever." |


* * *

|*Roel Wuyts, Laurence Tratt, **Guest Editors' Introduction: Dynamically Typed Languages**, IEEE Software, September 2007.[^foo279]*|

[^foo279]: [DOI: 10.1109/MS.2007.140 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.140)
 
 
{pagebreak}


  
* * *

| "Five years ago, the team at Reflexis ran into **a little language from Brazil**. Lua (pronounced loo-ah) changed the way they work profoundly. It lets them create hybrid solutions that combine the strengths of **statically typed software** with the flexibility of a **dynamically typed environment**. In short, with Lua, they get the best of both worlds. Lua can help you become more productive by extending your **C/C++** creations with the expressive power and flexibility of a dynamically typed language." |


* * *

|*Ashwin Hirschi, **Traveling Light, the Lua Way**, IEEE Software, September 2007.[^foo280]*|

[^foo280]: [DOI: 10.1109/MS.2007.150 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.150)
 
 
{pagebreak}


  
* * *

| "**Python**, a dynamically typed language, can implement these software frameworks for major OR operational research methodologies (mathematical programming and simulation) in the same programming environment. By doing so, **Python**, in effect, **glues software environments** that have been independent, thus improving the software development cycle for sophisticated applications requiring different model types." |


* * *

|*Suleyman Karabuk, F. Hank Grant, **A Common Medium for Programming Operations-Research Models**, IEEE Software, September 2007.[^foo281]*|

[^foo281]: [DOI: 10.1109/MS.2007.125 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.125)
 
 
{pagebreak}


  
* * *

| "The emergence of the **model-driven development** paradigm has revitalized interest in **domain-specific languages**. **Embedding a DSL** in a dynamic language facilitates rapid development." |


* * *

|*Jes&#x00FA;s Garc&#x00ED;a Molina, Jes&#x00FA;s S&#x00E1;nchez Cuadrado, **Building Domain-Specific Languages for Model-Driven Development**, IEEE Software, September 2007.[^foo282]*|

[^foo282]: [DOI: 10.1109/MS.2007.135 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.135)
 
 
{pagebreak}


  
* * *

| "By harnessing **Smalltalk's dynamic nature** and reflective capabilities, Seaside is able to incorporate key features such as a component architecture that supports multiple, simultaneously active control flows; programmatical **XHTML** generation; and on-the-fly debugging, code editing, and recompilation." |


* * *

|*St&#x00E9;phane Ducasse, Lukas Renggli, Adrian Lienhard, **Seaside: A Flexible Environment for Building Dynamic Web Applications**, IEEE Software, September 2007.[^foo283]*|

[^foo283]: [DOI: 10.1109/MS.2007.144 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.144)
 
 
{pagebreak}


  
* * *

| "Although the **Semantic Web** is **data oriented** and the **World Wide Web** is **document oriented**, both are fundamentally **decentralized**, **heterogeneous**, and **open**. The Semantic Web isnâ€™t a global database, centralized in one location with one agreed-upon schema and one meaning. Instead, anyone can make any statement at any location, using any vocabulary or structure." |


* * *

|*Eyal Oren, Armin Haller, Manfred Hauswirth, Benjamin Heitmann, Stefan Decker, CÃ©dric Mesnage, **A Flexible Integration Framework for Semantic Web 2.0 Applications**, IEEE Software, September 2007.[^foo284]*|

[^foo284]: [DOI: 10.1109/MS.2007.126 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.126)
 
 
{pagebreak}






![](images-high-quality/2007-6.jpg)




{pagebreak}

  
* * *

| "Software development teams need to **make decisions** effectively **as a team**, but most groups spend more time in **meetings and discussions** than they need. Sometimes, to **evaluate an idea**, we have to **try it** for a while. If you see your team bogged down in meetings, it's time to **run an experiment** and replace **opinions** with **facts**." |


* * *

|*J.B. Rainsberger, **Just Try It**, IEEE Software, November 2007.[^foo285]*|

[^foo285]: [DOI: 10.1109/MS.2007.171 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.171)
 
 
{pagebreak}


  
* * *

| "**Yukijiro Matsumoto**, chief designer of the **Ruby** programming language, claims brevity is one of the most important contributors to **beautiful code**. Although brevity can contribute to code beauty, clarity of purpose, expressive use of the programming language, and design elegance also play a part. But is there more to **good design** than **beautiful code**?" |


* * *

|*Rebecca J. Wirfs-Brock, **Does Beautiful Code Imply Beautiful Design?**, IEEE Software, November 2007.[^foo286]*|

[^foo286]: [DOI: 10.1109/MS.2007.163 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.163)
 
 
{pagebreak}


  
* * *

| "**Paper as a tool** for **expressing our thoughts** offers superb usability and versatility, letting us mix various notations and multiple levels of abstraction. This makes it easier to pour out our thoughts on it. In contrast to software tools, paper doesn't provide feedback and **won't interrupt us** with various notifications. This gives us a **chance to meditate** on our design in a state of flow." |


* * *

|*Diomidis Spinellis, **On Paper**, IEEE Software, November 2007.[^foo287]*|

[^foo287]: [DOI: 10.1109/MS.2007.173 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.173)
 
 
{pagebreak}


  
* * *

| "A comparison of **building architecture** and **software architecture** reveals the differences, congruences, and commonalities between the two. There are differences in cost estimation, but there are similarities in divisions of labor or knowledge, degrees of formality, and the use of different viewpoints, use cases, an incremental design, and a particular style." |


* * *

|*Grady Booch, **Artifacts and Process**, IEEE Software, November 2007.[^foo288]*|

[^foo288]: [DOI: 10.1109/MS.2007.159 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.159)
 
 
{pagebreak}


  
* * *

| "**Service-centric software system** is a multidisciplinary paradigm concerned with software systems that are constructed as **compositions of autonomous services**. These systems extend the service-oriented architecture paradigm by focusing on the design, development, and maintenance of software built under SOAs." |


* * *

|*Olivier Nano, Andrea Zisman, **Guest Editors' Introduction: Realizing Service-Centric Software Systems**, IEEE Software, November 2007.[^foo289]*|

[^foo289]: [DOI: 10.1109/MS.2007.166 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.166)
 
 
{pagebreak}


  
* * *

| "**Composing software services** requires solving both **low-level technical problems** and **high-level semantic issues**." |


* * *

|*Philippe Lalanda, Cristina Marin, **A Domain-Configurable Development Environment for Service-Oriented Applications**, IEEE Software, November 2007.[^foo290]*|

[^foo290]: [DOI: 10.1109/MS.2007.154 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.154)
 
 
{pagebreak}


  
* * *

| "Development of today's information systems must take a **service-centric** approach. The drive is toward designing **service-centric** systems involving **well-defined**, **loosely coupled** services that are **reusable**, **discoverable**, and **composable**." |


* * *

|*Dieter Fensel, Maciej Zaremba, Michal Zaremba, Tomas Vitvar, Matthew Moran, **SESA: Emerging Technology for Service-Centric Environments**, IEEE Software, November 2007.[^foo291]*|

[^foo291]: [DOI: 10.1109/MS.2007.178 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.178)
 
 
{pagebreak}


  
* * *

| "Open source development is often regarded as a chaotic environment where new initiatives' success or failure just happens by chance. However, **successful open source communities** are applying **incubation processes** for **managing the risks** associated with creating new projects. ... e.g. **Apache** and **Eclipse** communities." |


* * *

|*Jos&#x00E9; L. Ruiz, Manuel Santill&#x00E1;n, Hugo A. Parada G., F&#x00E9;lix Cuadrado, Juan C. Due&#x00F1;as, **Apache and Eclipse: Comparing Open Source Project Incubators**, IEEE Software, November 2007.[^foo292]*|

[^foo292]: [DOI: 10.1109/MS.2007.157 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.157)
 
 
{pagebreak}


  
* * *

| "**Ruby on Rails** is a novel Web 2.0 application development framework that attempts to combine **PHP**'s simple immediacy with **Java**'s architecture, purity, and quality." |


* * *

|*Paul Kirchberg, Michael B&#x00E4;chle, **Ruby on Rails**, IEEE Software, November 2007.[^foo293]*|

[^foo293]: [DOI: 10.1109/MS.2007.176 ](http://doi.ieeecomputersociety.org/10.1109/MS.2007.176)
 
 
{pagebreak}


# 2008
{pagebreak}






![](images-high-quality/2008-2.jpg)




{pagebreak}

  
* * *

| "**Measuring** software development **productivity** is difficult, but it's not impossible. It's prone to misuse and misinterpretation, and highly portable, precise measures are elusive. But we can still implement meaningful measures, provided we understand why we're doing it and provided we're aware of their limitations." |


* * *

|*Hakan Erdogmus, **Measurement Acquiescence**, IEEE Software, March 2008.[^foo294]*|

[^foo294]: [DOI: 10.1109/MS.2008.40 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.40)
 
 
{pagebreak}


  
* * *

| "As the code written today becomes part of tomorrow's inexorably **growing legacy**, preserving these stories becomes increasingly important. It's costly to rely upon informal **storytelling** to **preserve** and **communicate important decisions**; it's incredibly costly to try to recreate those decisions and their rationale when the storytellers themselves are gone. Insofar as a software development organization can **preserve** its stories in a system's written architecture, it can make evolving that system materially easier." |


* * *

|*Grady Booch, **Tribal Memory**, IEEE Software, March 2008.[^foo295]*|

[^foo295]: [DOI: 10.1109/MS.2008.52 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.52)
 
 
{pagebreak}


  
* * *

| "When dealing with **quality requirements**, you often end up in difficult **trade-off analysis**. You must take into account aspects such as **release** targets, **end-user experience**, and **business opportunities**. At the same time, you must consider what is **feasible** with the evolving system architecture and the available development resources. Our experience from the mobile-phone domain shows that much can be gained if development team members **share** a common **framework of quality indicators** and have a **simple**, easy-to-use model for reasoning about quality targets." |


* * *

|*Richard Berntsson Svensson, Bj&#246;rn Regnell, Thomas Olsson, **Supporting Roadmapping of Quality Requirements**, IEEE Software, March 2008.[^foo296]*|

[^foo296]: [DOI: 10.1109/MS.2008.48 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.48)
 
 
{pagebreak}


  
* * *

| "**Test-driven development** (TDD) is first and foremost a design practice. The question is, 'How good are the resulting designs?' ... TDD programmers tend to write software modules that are **smaller**, **less complex**, and more **highly tested** than modules produced by their test-last counterparts. However, the results didn't support claims for lower coupling and increased cohesion with TDD." |


* * *

|*David Janzen, Hossein Saiedian, **Does Test-Driven Development Really Improve Software Design Quality?**, IEEE Software, March 2008.[^foo297]*|

[^foo297]: [DOI: 10.1109/MS.2008.34 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.34)
 
 
{pagebreak}


  
* * *

| "The **Business Process Execution Language** specifies Web services that work together to perform a business process. BPEL is an **orchestrating language**: it sets down exactly how the Web services will cooperate to carry out the overall business process. BPEL is an **XML-based programming language** - that is, you write BPEL programs in XML. Because XML wasn't designed with programmers in mind, the programming results aren't prime examples of elegance. Fortunately, you rarely need to write in BPEL by hand. Most BPEL programs are written using **special graphical editors** that let you describe the business process diagrammatically and then automatically generate the corresponding BPEL code." |


* * *

|*Panagiotis Louridas, **Orchestrating Web Services with BPEL**, IEEE Software, March 2008.[^foo298]*|

[^foo298]: [DOI: 10.1109/MS.2008.42 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.42)
 
 
{pagebreak}


  
* * *

| "**Google**'s position as a leading Web-based applications platform and its embrace of **rigorous incremental testing** might be the vanguard of a new definition of what software testing encompasses." |


* * *

|*Greg Goth, **'Googling' Test Practices? Web Giant's Culture Encourages Process Improvement**, IEEE Software, March 2008.[^foo299]*|

[^foo299]: [DOI: 10.1109/MS.2008.28 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.28)
 
 
{pagebreak}






![](images-high-quality/2008-3.jpg)




{pagebreak}

  
* * *

| "**Model-based testing (MBT)** approaches help automatically **generate test cases** using models extracted from software artifacts, ... certain **specialized domains** are applying MBT, but it does not yet seem to be a mainstream approach." |


* * *

|*Arilo Dias Neto, Rajesh Subramanyan, Forrest Shull, Guilherme Horta Travassos, Marlon Vieira, **Improving Evidence about Software Technologies: A Look at Model-Based Testing**, IEEE Software, May 2008.[^foo300]*|

[^foo300]: [DOI: 10.1109/MS.2008.64 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.64)
 
 
{pagebreak}


  
* * *

| "Designers need to sharpen their **focus** and apply **design energy** where it will have the most impact. So, identifying **what's core** to our system's success is one of the most critical things we must do." |


* * *

|*Rebecca J. Wirfs-Brock, **Design Strategy**, IEEE Software, May 2008.[^foo301]*|

[^foo301]: [DOI: 10.1109/MS.2008.58 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.58)
 
 
{pagebreak}


  
* * *

| "How to apply **user-centered design** methods to design interactive systems for the **elderly**. A case study (with its successes and weaknesses) showed that a need exists for more **creative and participatory** design approaches for this population." |


* * *

|*Ulrike Pfeil, Helena Sustar, Panayiotis Zaphiris, **Requirements Elicitation with and for Older Adults**, IEEE Software, May 2008.[^foo302]*|

[^foo302]: [DOI: 10.1109/MS.2008.69 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.69)
 
 
{pagebreak}


  
* * *

| "What is the **optimal design** for a given system, a design that reasonably **balances all the forces** that weigh in on the problem? In turn, what is the **optimal organizational structure** for developing, deploying, and evolving that system? The challenge for every organization is to find the sweet spot that provides the **right balance** of **innovation**, **predictability**, **repeatability**, and **risk confrontation** for that project at every given moment." |


* * *

|*Grady Booch, **Architectural Organizational Patterns**, IEEE Software, May 2008.[^foo303]*|

[^foo303]: [DOI: 10.1109/MS.2008.56 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.56)
 
 
{pagebreak}


  
* * *

| "**Salesforce.com** has used the RITE (**Rapid Iterative Testing and Evaluation**) method to quickly and iteratively improve its software design. RITE has helped the company retain high quality while increasing its rate of delivery using an agile development approach." |


* * *

|*Jeff Patton, **Getting Software RITE**, IEEE Software, May 2008.[^foo304]*|

[^foo304]: [DOI: 10.1109/MS.2008.62 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.62)
 
 
{pagebreak}


  
* * *

| "Software building's golden rule is that you should **automate all build tasks**. The most popular tool options for doing this are the facilities that your integrated development environment (IDE) provides, the various implementations of **Make**, and **Apache Ant** and **Maven**." |


* * *

|*Diomidis Spinellis, **Software Builders**, IEEE Software, May 2008.[^foo305]*|

[^foo305]: [DOI: 10.1109/MS.2008.74 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.74)
 
 
{pagebreak}


  
* * *

| "A successful project effectively manages four cornerstones - **schedule**, **cost**, **scope**, and **quality** - to achieve its goals. Every project activity influences these four cornerstones. **Stochastic optimization modeling** factors in the uncertainties associated with project activities and provides insight into the expected project outputs as probability distributions rather than as deterministic approximations." |


* * *

|*Uma Sudhakar Rao, Chinmay Pradhan, Srikanth Kestur, **Stochastic Optimization Modeling and Quantitative Project Management**, IEEE Software, May 2008.[^foo306]*|

[^foo306]: [DOI: 10.1109/MS.2008.77 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.77)
 
 
{pagebreak}


  
* * *

| "**Open source** refers to software that you may freely use, modify, or distribute provided you observe certain restrictions with respect to copyright and protection of its open source status. A major difference between free and open source software (FOSS) and freeware or public-domain software is that FOSS generally has a copyright. FOSS isn't free software and often **requires substantial investment** before you can deploy it in the marketplace. " |


* * *

|*Christof Ebert, **Open Source Software in Industry**, IEEE Software, May 2008.[^foo307]*|

[^foo307]: [DOI: 10.1109/MS.2008.67 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.67)
 
 
{pagebreak}


  
* * *

| "Software development **effort estimates** are reported to be highly **inaccurate** and systematically **overly optimistic**. Empirical evidence suggests that this problem is caused to some extent by the influence of **irrelevant and misleading information** - for example, information about the client's budget. The only effective way to eliminate this influence is to **avoid exposure** to such information." |


* * *

|*Stein Grimstad, Magne J?rgensen, **Avoiding Irrelevant and Misleading Information When Estimating Development Effort**, IEEE Software, May 2008.[^foo308]*|

[^foo308]: [DOI: 10.1109/MS.2008.57 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.57)
 
 
{pagebreak}


  
* * *

| "People might love to support **underdogs**, but they also **love to kick them** when they're down. And, at this point in time at least, software is the world's technological underdog!" |


* * *

|*Robert L. Glass, **Software: Hero or Zero?**, IEEE Software, May 2008.[^foo309]*|

[^foo309]: [DOI: 10.1109/MS.2008.75 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.75)
 
 
{pagebreak}






![](images-high-quality/2008-4.jpg)




{pagebreak}

  
* * *

| "**Process trends** can be placed inside a triangular map according to their emphasis on three aspects, represented by the vertices: **people**, **technology**, and **rigor**. **Plan-oriented**, engineering, and research-based approaches tend to view software as a rigid artifact, so they **stress** **technology** and **rigor** over **people**. **Evolutionary approaches** tend to view software development as an organic, skills-driven technical activity, so they **stress** **people** and **technology** over **rigor**. ... A more complete scheme requires dissection in terms of seven essential, mutually reinforcing characteristics: **human-centricity**, **technical orientation**, **discipline**, **pragmatism**, **empiricism**, **experimentation**, and **value orientation**." |


* * *

|*Hakan Erdogmus, **Essentials of Software Process**, IEEE Software, July 2008.[^foo310]*|

[^foo310]: [DOI: 10.1109/MS.2008.87 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.87)
 
 
{pagebreak}


  
* * *

| "There can be significant benefits in thinking through a design until you get it 'right enough' before launching into a major development effort. For such **up-front design** to be effective, you must develop **a design rhythm** that balances **thinking**, **learning**, **and** doing." |


* * *

|*Rebecca J. Wirfs-Brock, **Up-front Design**, IEEE Software, July 2008.[^foo311]*|

[^foo311]: [DOI: 10.1109/MS.2008.104 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.104)
 
 
{pagebreak}


  
* * *

| "**Without refactoring**, complex software-intensive **systems** become **increasingly irregular** and thus increasingly chaotic over time. We can **understand** complex software systems only when they're **nearly decomposable** and **hierarchic**. One measure ... is **lines of source code**: the greater the SLOC, the **more inertia** to change the system will have, the more people it will take to keep it fed, the more stakeholders who will be crawling all over it. ... the more complex measures ... are tuned to Philippe Kruchten's 4+1 view model of architecture." |


* * *

|*Grady Booch, **Measuring Architectural Complexity**, IEEE Software, July 2008.[^foo312]*|

[^foo312]: [DOI: 10.1109/MS.2008.91 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.91)
 
 
{pagebreak}


  
* * *

| "Not all **scientific computing** is high-performance computing - **the variety** of scientific software is huge. Such software might be complex **simulation** software developed and running on a **high-performance computer**, or software developed on a **PC** for embedding into **instruments**; for manipulating, analyzing or **visualizing** data or for orchestrating **workflows**." |


* * *

|*Judith Segal, Chris Morris, **Developing Scientific Software**, IEEE Software, July 2008.[^foo313]*|

[^foo313]: [DOI: 10.1109/MS.2008.85 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.85)
 
 
{pagebreak}


  
* * *

| "The development of **scientific software** involves **risk** in the **underlying theory**, its implementation, and its use. ... If the software's purpose **shifts away** from just **showing the theory's viability**, risk shifts to **the implementation**. At this point, testing must assess **the implementation**, not the theory. Most **scientists miss** this shift." |


* * *

|*Rebecca Sanders, Diane Kelly, **Dealing with Risk in Scientific Software Development**, IEEE Software, July 2008.[^foo314]*|

[^foo314]: [DOI: 10.1109/MS.2008.84 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.84)
 
 
{pagebreak}


  
* * *

| "Studies of computational **scientists** developing software for **high-performance computing systems** indicate that these scientists face **unique** software engineering **issues**. Previous failed attempts to transfer SE technologies to this domain haven't always taken these issues into account. To **support scientific-software development**, the SE community can disseminate appropriate practices and processes, develop educational materials specifically for computational scientists, and investigate the large-scale reuse of development frameworks." |


* * *

|*Jeffrey C. Carver, Lorin M. Hochstein, Daniela Cruzes, Victor R. Basili, Jeffrey K. Hollingsworth, Marvin V. Zelkowitz, Forrest Shull, **Understanding the High-Performance-Computing Community: A Software Engineer's Perspective**, IEEE Software, July 2008.[^foo315]*|

[^foo315]: [DOI: 10.1109/MS.2008.103 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.103)
 
 
{pagebreak}


  
* * *

| "**Scientific workflows** - models of computation that capture the **orchestration** of scientific codes to conduct in silico research - are gaining recognition as an attractive **alternative** to **script-based orchestration**. Even so, researchers developing scientific workflow technologies still face fundamental challenges, including developing the **underlying science of scientific workflows**. You can classify scientific-workflow environments according to three major phases of in silico research: **discovery**, **production**, and **distribution**." |


* * *

|*David Woollard, Nenad Medvidovic, Yolanda Gil, Chris A. Mattmann, **Scientific Software as Workflows: From Discovery to Distribution**, IEEE Software, July 2008.[^foo316]*|

[^foo316]: [DOI: 10.1109/MS.2008.92 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.92)
 
 
{pagebreak}


  
* * *

| "**Reactive systems** that service **multiple clients** or users are often **highly configurable** to provide **customized**, value-added services to individual users. A large **configuration space** is characteristic of such systems, resulting in a **large test state space**." |


* * *

|*Tony Savor, **Testing Feature-Rich Reactive Systems**, IEEE Software, July 2008.[^foo317]*|

[^foo317]: [DOI: 10.1109/MS.2008.99 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.99)
 
 
{pagebreak}


  
* * *

| "**Checklists** are an important part of **code** and **design inspections**. Ideally, they aim to increase the number of faults found per inspection hour by highlighting known areas of previous failure. ... The author subjects checklists' effectiveness to **formal statistical testing**, using data from **308 inspections** by industrial engineers over a three-year period. The results showed **no evidence** that checklists **significantly improved** these inspections." |


* * *

|*Les Hatton, **Testing the Value of Checklists in Code Inspections**, IEEE Software, July 2008.[^foo318]*|

[^foo318]: [DOI: 10.1109/MS.2008.100 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.100)
 
 
{pagebreak}


  
* * *

| "**Software engineers** will do **better work and stay with a company** if they are **motivated** - as a result the success of software projects is likely to improve. ... in-depth review of the **92 studies** published in the last **25 years** on software engineer motivation ... give an overview of what **managers need to know** to improve motivation among their employees." |


* * *

|*Nathan Baddoo, Tracy Hall, Sarah Beecham, Helen Sharp, Hugh Robinson, **What Do We Know about Developer Motivation?**, IEEE Software, July 2008.[^foo319]*|

[^foo319]: [DOI: 10.1109/MS.2008.105 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.105)
 
 
{pagebreak}


  
* * *

| "The software development process and the resulting product are so complex that no **error-detecting approach** will ever be able to produce **error-free software**." |


* * *

|*Robert L. Glass, **Two Mistakes and Error-Free Software: A Confession**, IEEE Software, July 2008.[^foo320]*|

[^foo320]: [DOI: 10.1109/MS.2008.102 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.102)
 
 
{pagebreak}






![](images-high-quality/2008-5.jpg)




{pagebreak}

  
* * *

| "A **not-so-subtle divide** separates **empirical** and **constructionist** **software research**. **Constructionists** maintain that software research should be about creating technologies, devising **new methods**. **Empiricists** are interested in studying and **understanding existing approaches**. The antagonism between the two camps does not serve our industry well - it needs both modes of research." |


* * *

|*Hakan Erdogmus, **Must Software Research Stand Divided?**, IEEE Software, September 2008.[^foo321]*|

[^foo321]: [DOI: 10.1109/MS.2008.120 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.120)
 
 
{pagebreak}


  
* * *

| "**Trust** is a **subjective**, **user-centric**, **context-dependent** concept, and is thus difficult to define universally. **On the Internet**, several factors make trust more difficult to build, explaining why some successful brick-and-mortar retail chains have been **unable** to **translate** their **reputation** to the **virtual platform** the Web offers." |


* * *

|*Patricia Beatty, Ejike Ofuonye, Scott Dick, James Miller, Ian Reay, **How Do We Build Trust into E-commerce Web Sites?**, IEEE Software, September 2008.[^foo322]*|

[^foo322]: [DOI: 10.1109/MS.2008.136 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.136)
 
 
{pagebreak}


  
* * *

| "Some **software engineering ideas** have a **half-life**. ... this **half-life** is **roughly five years**, ... the need for software engineers to thus stay abreast of **new technologies**." |


* * *

|*Philippe Kruchten, **The Biological Half-Life of Software Engineering Ideas**, IEEE Software, September 2008.[^foo323]*|

[^foo323]: [DOI: 10.1109/MS.2008.127 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.127)
 
 
{pagebreak}


  
* * *

| "A **software agent** is defined as an **encapsulated** software entity with one or more **specified goals**. To fulfill these goals, an agent shows **autonomous behavior** and **interacts** continuously with its environment and other agents." |


* * *

|*Hisham Mubarak, **Developing Flexible Software Using Agent-Oriented Software Engineering**, IEEE Software, September 2008.[^foo324]*|

[^foo324]: [DOI: 10.1109/MS.2008.135 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.135)
 
 
{pagebreak}


  
* * *

| "**Static analysis** examines code in the **absence of input data** and **without running the code**. It can detect potential **security violations** (SQL injection), **runtime errors** (dereferencing a null pointer) and **logical inconsistencies** (a conditional test that can't possibly be true). ... **FindBugs**, an open source static-analysis tool for Java ... evaluates what kinds of defects can be effectively detected with relatively simple techniques and helps developers understand how to incorporate such tools into software development." |


* * *

|*Nathaniel Ayewah, John Penix, J. David Morgenthaler, William Pugh, David Hovemeyer, **Using Static Analysis to Find Bugs**, IEEE Software, September 2008.[^foo325]*|

[^foo325]: [DOI: 10.1109/MS.2008.130 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.130)
 
 
{pagebreak}


  
* * *

| "**Refactoring tools** can **improve** the **speed and accuracy** with which developers create and maintain software - but only **if they are used**. In practice, tools are not used as much as they could be; this seems to be because sometimes they do not align with the refactoring tactic preferred by most programmers, a tactic the authors call 'floss refactoring.' They propose five principles that characterize successful floss-refactoring tools&#x2014;principles that can help programmers to choose the most appropriate refactoring tools and also help toolsmiths to design tools that fit the programmer's purpose." |


* * *

|*Emerson Murphy-Hill, Andrew P. Black, **Refactoring Tools: Fitness for Purpose**, IEEE Software, September 2008.[^foo326]*|

[^foo326]: [DOI: 10.1109/MS.2008.123 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.123)
 
 
{pagebreak}


  
* * *

| "**Over time**, software systems suffer gradual **quality decay** and therefore costs can rise if organizations fail to take **proactive countermeasures**. Quality control is the first step to avoiding this cost trap. **Continuous quality assessments** help users identify quality problems early, when their removal is still inexpensive; they also aid decision making by providing an integrated view of a software system's current status. As a **side effect**, continuous and timely feedback helps developers and maintenance personnel **improve** their **skills** and thereby decreases the likelihood of future quality defects. To make regular quality control **feasible**, it must be **highly automated**, and assessment results must be presented in an aggregated manner to **avoid overwhelming users** with data. " |


* * *

|*Florian Deissenboeck, Stefan Wagner, Markus Pizka, Benjamin Hummel, Elmar Juergens, Benedikt Mas y Parareda, **Tool Support for Continuous Quality Control**, IEEE Software, September 2008.[^foo327]*|

[^foo327]: [DOI: 10.1109/MS.2008.129 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.129)
 
 
{pagebreak}


  
* * *

| "Design teams rarely **consider multiple solution ideas** before committing to one. They often forget that an even better idea could be just around the corner, and consider alternative ideas only when they don't like the current one. Using **sketchboarding**, design studio, or a combination of these two techniques can let teams quickly ideate over many solutions. They then have a chance to arrive at a solution that no one individual had thought of." |


* * *

|*Jeff Patton, **Consider Multiple Solutions**, IEEE Software, September 2008.[^foo328]*|

[^foo328]: [DOI: 10.1109/MS.2008.134 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.134)
 
 
{pagebreak}


  
* * *

| "**Software resource estimation** methods and models have had a major impact on successful software engineering practice. They provide milestone budgets and schedules that help projects determine when they are making **satisfactory progress** and when they need **corrective action**. They help decision makers analyze **software cost-schedule-value trade-offs** and make decisions regarding investments, outsourcing, COTS products, and legacy software phaseouts. They help organizations **prioritize investments** in improving software productivity, quality, and time to market. " |


* * *

|*Ricardo Valerdi, Barry W. Boehm, **Achievements and Challenges in Cocomo-Based Software Resource Estimation**, IEEE Software, September 2008.[^foo329]*|

[^foo329]: [DOI: 10.1109/MS.2008.133 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.133)
 
 
{pagebreak}


  
* * *

| "Despite various industry reports about the **failure rates** of software projects, there's still **uncertainty** about the **actual figures**. Researchers performed a global Web survey of IT departments in 2005 and 2007. The results suggest that the software **crisis is perhaps exaggerated** and that most software projects deliver. However, the overall project failure rate, including cancelled and completed but poorly performing projects, remains arguably high for an applied discipline." |


* * *

|*Khaled El Emam, A. G&#x00FC;nes Koru, **A Replicated Survey of IT Software Project Failures**, IEEE Software, September 2008.[^foo330]*|

[^foo330]: [DOI: 10.1109/MS.2008.107 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.107)
 
 
{pagebreak}


  
* * *

| "Software developers often need to understand a large body of **unfamiliar code** with little or **no documentation**, **no experts** to consult, and **little time** to do it. ... The most common suggestions were to use a **code navigation tool**, use a **design recovery** tool, use a **debugger** to step through the code, create a **runtime trace**, use problem-based learning, ask people for help, study the code from top down, and **print out all** the code." |


* * *

|*Sukanya Ratanotayanon, Susan Elliott Sim, **Inventive Tool Use to Comprehend Big Code**, IEEE Software, September 2008.[^foo331]*|

[^foo331]: [DOI: 10.1109/MS.2008.118 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.118)
 
 
{pagebreak}


  
* * *

| "Every new line of code quickly becomes **legacy**. When that **legacy** mounts, it forms a significantly massive pile of software, which cannot be ignored. ... what we can do intentionally with such piles, from **abandonment** to **evolution** and many **things in between**." |


* * *

|*Grady Booch, **Nine Things You Can Do with Old Software**, IEEE Software, September 2008.[^foo332]*|

[^foo332]: [DOI: 10.1109/MS.2008.139 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.139)
 
 
{pagebreak}


  
* * *

| "**One member** of a work team can **decrease** the whole **team's productivity**." |


* * *

|*Robert L. Glass, **Negative Productivity and What to Do about It**, IEEE Software, September 2008.[^foo333]*|

[^foo333]: [DOI: 10.1109/MS.2008.121 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.121)
 
 
{pagebreak}






![](images-high-quality/2008-6.jpg)




{pagebreak}

  
* * *

| "In the world of **user-centered design** thinking, **Alan Cooper** is responsible for many of the tenets used in **interaction design practice** today. Most notably, he introduced the use of **personas** to distill and make relevant information about a system's users, information we subsequently use to drive interaction design." |


* * *

|*Jeff Patton, **A Conversation with Alan Cooper: The Origin of Interaction Design**, IEEE Software, November 2008.[^foo334]*|

[^foo334]: [DOI: 10.1109/MS.2008.142 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.142)
 
 
{pagebreak}


  
* * *

| "Over the **past 25 years**, we've made **great advances** in tooling, technologies, and techniques that make software **design** more concrete. But **design** still **requires careful thought**." |


* * *

|*Grady Booch, **Back to the Future**, IEEE Software, November 2008.[^foo335]*|

[^foo335]: [DOI: 10.1109/MS.2008.144 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.144)
 
 
{pagebreak}


  
* * *

| "Many major **technology breakthroughs** happened **before 1984**: Milestones such as the **IBM OS/360** and **the microprocessor**, and even many still-relevant software engineering practices, had been developed much earlier. So what makes the recent 25 years unique? First, software **moved** from a few company desks to the lives of practically **everyone on the planet**. The **PC**, the **Internet**, and **mobile phones** showcase this tremendous evolution. Second, empirical evaluations overcame opinions. Mary Shaw described the eighties by stating, 'Software engineering is not yet a true discipline, but it has the potential to become one.' In those early days, a lot of technologies were just assembled and delivered, but from the '80s onward, engineers evaluated and empirically assessed new technologies to **judge their impact**." |


* * *

|*Christof Ebert, **A Brief History of Software Technology**, IEEE Software, November 2008.[^foo336]*|

[^foo336]: [DOI: 10.1109/MS.2008.141 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.141)
 
 
{pagebreak}


  
* * *

| "Today's **power tools** enable us to **cut code** and **test** our **design ideas** much more quickly. This is a significant improvement. Yet the **more code** we create, the more opportunity we have for it to **grow** unwieldy, inconsistent, and **unmaintainable**. " |


* * *

|*Rebecca J. Wirfs-Brock, **Designing Then and Now**, IEEE Software, November 2008.[^foo337]*|

[^foo337]: [DOI: 10.1109/MS.2008.146 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.146)
 
 
{pagebreak}


  
* * *

| "The increasing sophistication and use of **software measurement** over the past 25 years ... highlights **four obstacles** to more effective use of measurement: dealing with **uncertainty**, anticipating **change**, measuring '**soft**' characteristics, and developing **heuristics**." |


* * *

|*Shari Lawrence Pfleeger, **Software Metrics: Progress after 25 Years?**, IEEE Software, November 2008.[^foo338]*|

[^foo338]: [DOI: 10.1109/MS.2008.160 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.160)
 
 
{pagebreak}


  
* * *

| "**Opportunistic software systems development** (OSSD) is an approach in which developers **meld together** software pieces that they have found. Most often they find unrelated software **components** and systems that **weren't designed to work together** but that provide functionality they want to include in a new system. Typically, in opportunistic development, developers spend less effort developing software functionality to meet particular requirements and more time developing '**glue code**' and using other techniques for integrating the various software pieces." |


* * *

|*Anatol W. Kark, Cornelius Ncube, Patricia Oberndorf, **Opportunistic Software Systems Development: Making Systems from What's Available**, IEEE Software, November 2008.[^foo339]*|

[^foo339]: [DOI: 10.1109/MS.2008.153 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.153)
 
 
{pagebreak}


  
* * *

| "Developing products and services pragmatically places requirements on the **relationship** between the software **developer** and the **third-party functionality** provider." |


* * *

|*Sjaak Brinkkemper, Slinger Jansen, Cetin Demir, Ivo Hunink, **Pragmatic and Opportunistic Reuse in Innovative Start-up Companies**, IEEE Software, November 2008.[^foo340]*|

[^foo340]: [DOI: 10.1109/MS.2008.155 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.155)
 
 
{pagebreak}


  
* * *

| "**Situated software**, a type of opportunistic software, is created by a small subset of users to fulfill a specific purpose. For example, business users have been creating situated software through mashups, which combine data from multiple sources on internal systems or the Internet." |


* * *

|*Grace A. Lewis, Soumya Simanta, Dennis B. Smith, Sriram Balasubramaniam, **Situated Software: Concepts, Motivation, Technology, and the Future**, IEEE Software, November 2008.[^foo341]*|

[^foo341]: [DOI: 10.1109/MS.2008.159 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.159)
 
 
{pagebreak}


  
* * *

| "Using **opportunistic software development principles** in **computer engineering education** encourages students to be creative and to develop solutions that cross the boundaries of diverse technologies." |


* * *

|*Dragan Ga&#x0161;evic, &#x017D;eljko Obrenovic, Anton Eli&#x00EB;ns, **Stimulating Creativity through Opportunistic Software Development**, IEEE Software, November 2008.[^foo342]*|

[^foo342]: [DOI: 10.1109/MS.2008.162 ](http://doi.ieeecomputersociety.org/10.1109/MS.2008.162)
 
 
{pagebreak}


# 2009
{pagebreak}






![](images-high-quality/2009-1.jpg)




{pagebreak}

  
* * *

| "Few software practices are as important as testing, and **testing techniques** are amenable to measurement and reasoning about their effectiveness. Because they're aimed at **removing faults**, measuring the number and type of such removed faults seems like a natural part of applying these techniques." |


* * *

|*Ana Moreno, Sira Vegas, Natalia Juristo, Forrest Shull, **A Look at 25 Years of Data**, IEEE Software, January 2009.[^foo343]*|

[^foo343]: [DOI: 10.1109/MS.2009.2 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.2)
 
 
{pagebreak}


  
* * *

| "Becoming a **better designer** means getting better at what we do now while not getting lulled into accepting the status quo. To stay effective as designers, we need to **continue** to **learn**, **adapt**, keep an **open mind**, and work to **perfect our craft**." |


* * *

|*Rebecca J. Wirfs-Brock, **Designing in the Future**, IEEE Software, January 2009.[^foo344]*|

[^foo344]: [DOI: 10.1109/MS.2009.7 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.7)
 
 
{pagebreak}


  
* * *

| "Today, many software projects are **geographically distributed**, so software managers must know how to manage **distributed teams**. For example, they need to know how to build teams across sites, how to break down and distribute tasks, how to share knowledge across time, space, and cultural differences, and how to coordinate work to produce coherent outcomes." |


* * *

|*Lars Mathiassen, John Stouby Persson, **A Process for Managing Risks in Distributed Teams**, IEEE Software, January 2009.[^foo345]*|

[^foo345]: [DOI: 10.1109/MS.2009.157 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.157)
 
 
{pagebreak}


  
* * *

| "Modern programming environments automatically collect lots of data on software development, notably changes and defects. The field of **mining software archives** is concerned with the **automated extraction**, **collection**, and **abstraction** of information from this data." |


* * *

|*Andreas Zeller, Nachiappan Nagappan, Thomas Zimmermann, **Guest Editors' Introduction: Mining Software Archives**, IEEE Software, January 2009.[^foo346]*|

[^foo346]: [DOI: 10.1109/MS.2009.14 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.14)
 
 
{pagebreak}


  
* * *

| "**Software archives** such as source code **version-control systems** and **issue-tracking systems** (for bugs and change requests) are rich sources to examine what changes have what impact on the software." |


* * *

|*Harald C. Gall, Martin Pinzger, Beat Fluri, **Change Analysis with Evolizer and ChangeDistiller**, IEEE Software, January 2009.[^foo347]*|

[^foo347]: [DOI: 10.1109/MS.2009.6 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.6)
 
 
{pagebreak}


  
* * *

| "In 1994, **Standish** published **the Chaos report** that showed a shocking 16 percent project success. This and renewed figures by Standish are often used to indicate that project management of application software development is in trouble. However, **Standish's definitions** have four **major problems**. First, they're **misleading** because they're based solely on estimation accuracy of cost, time, and functionality. Second, their estimation accuracy measure is **one-sided**, leading to unrealistic success rates. Third, **steering** on their definitions **perverts good estimation** practice. Fourth, the resulting figures are **meaningless** because they **average** numbers with an **unknown bias**, numbers that are introduced by **different underlying estimation** processes." |


* * *

|*Chris Verhoef, J. Laurenz Eveleens, **The Rise and Fall of the Chaos Report Figures**, IEEE Software, January 2009.[^foo348]*|

[^foo348]: [DOI: 10.1109/MS.2009.154 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.154)
 
 
{pagebreak}


  
* * *

| "As **software's impact** and influence grows, so do the **possibilities for innovation** and increasing the competitive advantage through software." |


* * *

|*Steven Kunsman, Samuel Fricker, Kenneth Palm, Tony Gorschek, **A Lightweight Innovation Process for Software-Intensive Product Development**, IEEE Software, January 2009.[^foo349]*|

[^foo349]: [DOI: 10.1109/MS.2009.164 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.164)
 
 
{pagebreak}


  
* * *

| "Mining software repositories using **analytics-driven dashboards** provides a **unifying mechanism** for **understanding**, **evaluating**, and **predicting** the development, management, and economics of large-scale systems and processes. Dashboards enable **measurement** and **interactive graphical displays** of complex information and support flexible analytic capabilities for user customizability and extensibility." |


* * *

|*Richard W. Selby, **Analytics-Driven Dashboards Enable Leading Indicators for Requirements and Designs of Large-Scale Systems**, IEEE Software, January 2009.[^foo350]*|

[^foo350]: [DOI: 10.1109/MS.2009.4 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.4)
 
 
{pagebreak}


  
* * *

| "Developers should **factor rework into sizing** and productivity calculations when estimating software effort. **Reworked code** is software created during development that **doesn't exist** in the **final build**. Using lines of code as a sizing metric is helpful when estimating projects with similar domains, platforms, processes, development teams, and coding constraints." |


* * *

|*Edmund Morozoff, **Using a Line-of-Code Metric to Understand Software Rework**, IEEE Software, January 2009.[^foo351]*|

[^foo351]: [DOI: 10.1109/MS.2009.160 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.160)
 
 
{pagebreak}


  
* * *

| "**Software-intensive systems**, like bridges and societies, are subject to **collapse**. Collapse isn't necessarily inevitable, however, but avoiding it requires active, vigorous, and intentional intervention by the system's architects." |


* * *

|*Grady Booch, **Not with a Bang**, IEEE Software, January 2009.[^foo352]*|

[^foo352]: [DOI: 10.1109/MS.2009.18 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.18)
 
 
{pagebreak}


  
* * *

| "**Usability** is a growing issue for developers of **scientific software**. Scientists seeking software to support scientific discovery and funding bodies seeking better **return on investment** increase the pressure to produce scientific software that has an impact beyond a limited set of users (that is, scientists in a single lab)." |


* * *

|*Jason R. Swedlow, David Sloan, Peter Gregor, Xinyi Jiang, Catriona Macaulay, Paula Forbes, Scott Loynton, **Usability and User-Centered Design in Scientific Software Development**, IEEE Software, January 2009.[^foo353]*|

[^foo353]: [DOI: 10.1109/MS.2009.27 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.27)
 
 
{pagebreak}






![](images-high-quality/2009-2.jpg)




{pagebreak}

  
* * *

| "At the core of **cloud computing** is a simple concept: **software as a service**, or SaaS. Whether the underlying software is an **application**, application **component**, **platform**, **framework**, **environment**, or some other soft infrastructure for composing applications to be delivered as a service on the Web, it's all software in the end. But the **simplicity ends** there. Just a step away from that core, a **complex concoction** of paradigms, concepts, and technologies envelop cloud computing." |


* * *

|*Hakan Erdogmus, **Cloud Computing: Does Nirvana Hide behind the Nebula?**, IEEE Software, March 2009.[^foo354]*|

[^foo354]: [DOI: 10.1109/MS.2009.31 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.31)
 
 
{pagebreak}


  
* * *

| "Given that useful knowledge in software engineering has a half-life of about five years, **reading** remains **an excellent way** to replenish this vanishing resource for the diligent software engineer." |


* * *

|*Philippe Kruchten, **You Are What You Read**, IEEE Software, March 2009.[^foo355]*|

[^foo355]: [DOI: 10.1109/MS.2009.55 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.55)
 
 
{pagebreak}


  
* * *

| "**Successful** software-intensive systems are generally quite **innovative**, as evidenced by their success. Although their architectures will, over time, converge to a stable point, this does not mean that innovation stops. Rather, for any such system to remain vibrant and relevant, **innovation must proceed** simultaneously at many levels." |


* * *

|*Grady Booch, **The Resting Place of Innovation**, IEEE Software, March 2009.[^foo356]*|

[^foo356]: [DOI: 10.1109/MS.2009.53 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.53)
 
 
{pagebreak}


  
* * *

| "**Capturing** software **design knowledge** is important because it tends to evaporate as software systems evolve. This has severe consequences for many software projects. To counteract this phenomenon, effective, systematic **documentation** of design knowledge is important." |


* * *

|*Uwe Zdun, **Guest Editor's Introduction: Capturing Design Knowledge**, IEEE Software, March 2009.[^foo357]*|

[^foo357]: [DOI: 10.1109/MS.2009.37 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.37)
 
 
{pagebreak}


  
* * *

| "**Large software systems**, developed over several years, are the backbone of industries such as banking, retail, transportation, and telecommunications. With multiple bug fixes and feature enhancements, these systems gradually deviate from the intended architecture and deteriorate into **unmanageable monoliths**." |


* * *

|*Madhu K. Iyengar, Saravanan Sivagnanam, K. Rangarajan, Shubha Ramachandran, G. Sathish Kumar, Santonu Sarkar, **Modularization of a Large-Scale Business Application: A Case Study**, IEEE Software, March 2009.[^foo358]*|

[^foo358]: [DOI: 10.1109/MS.2009.42 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.42)
 
 
{pagebreak}


  
* * *

| "**A decision view** provides a useful complement to the traditional sets of architectural views and viewpoints. It gives an explanatory perspective that illuminates the **reasoning process** itself and not solely its results. The decision view documents **aspects** of the architecture that are **hard to reverse-engineer** from the software itself and that are often left tacit." |


* * *

|*Philippe Kruchten, Juan Carlos Due&#x00F1;as, Rafael Capilla, **The Decision View's Role in Software Architecture Practice**, IEEE Software, March 2009.[^foo359]*|

[^foo359]: [DOI: 10.1109/MS.2009.52 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.52)
 
 
{pagebreak}


  
* * *

| "We rarely see the **traditional way** of software development in which one company handles design, production, sales, delivery, and service. Business models, engineering life cycles, distribution channels, and services have changed dramatically. A key driver in these new value networks is **open source software** (OSS). Worldwide companies in various industries have invested in open source. Market leaders such as Google, IBM, Microsoft, SAP, and Siemens as well as many small companies turn to OSS for multiple reasons." |


* * *

|*Christof Ebert, **Guest Editor's Introduction: How Open Source Tools Can Benefit Industry**, IEEE Software, March 2009.[^foo360]*|

[^foo360]: [DOI: 10.1109/MS.2009.38 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.38)
 
 
{pagebreak}


  
* * *

| "A **software forge** is a tool platform for **collaborative software development**, similar to integrated CASE environments. Unlike CASE tools, however, software forges have been designed for the software development practices of the **open source community**." |


* * *

|*Dirk Riehle, Tamir Menahem, Barak Naveh, John Ellenberger, Boris Mikhailovski, Yuri Natchetoi, Thomas Odenwald, **Open Collaboration within Corporations Using Software Forges**, IEEE Software, March 2009.[^foo361]*|

[^foo361]: [DOI: 10.1109/MS.2009.44 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.44)
 
 
{pagebreak}


  
* * *

| "Developing **complex software** can be difficult no matter how good designers get at architecture, tooling, or technology. Although agile techniques and practices vary, successful agile designers I know are **passionate about** producing **high-quality** incremental design solutions. " |


* * *

|*Rebecca J. Wirfs-Brock, **Designing with an Agile Attitude**, IEEE Software, March 2009.[^foo362]*|

[^foo362]: [DOI: 10.1109/MS.2009.32 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.32)
 
 
{pagebreak}


  
* * *

| "One way to combine **rigor** and **relevance** in research might be to perform applicability checks, in which focus groups provide feedback on research projects." |


* * *

|*Robert L. Glass, **Making Research More Relevant While Not Diminishing Its Rigor**, IEEE Software, March 2009.[^foo363]*|

[^foo363]: [DOI: 10.1109/MS.2009.40 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.40)
 
 
{pagebreak}






![](images-high-quality/2009-4.jpg)




{pagebreak}

  
* * *

| "**Superprofessionalism** is a mode of conduct characterized by seven central traits: focus on **individual responsibility**, acute **awareness**, commitment to **facts**, **resilience** under pressure, sense of **fairness**, attention to detail in **perspective**, and **pragmatism** first." |


* * *

|*Hakan Erdogmus, **The Seven Traits of Superprofessionals**, IEEE Software, July 2009.[^foo364]*|

[^foo364]: [DOI: 10.1109/MS.2009.107 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.107)
 
 
{pagebreak}


  
* * *

| "**Simple architectures** have **conceptual integrity** and are better than more complex ones. Continuous architectural refactoring helps to converge a system to its practical and optimal simplicity." |


* * *

|*Grady Booch, **The Defenestration of Superfluous Architectural Accoutrements**, IEEE Software, July 2009.[^foo365]*|

[^foo365]: [DOI: 10.1109/MS.2009.105 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.105)
 
 
{pagebreak}


  
* * *

| "Compliance to a professional society's **code of ethics** carries obligations beyond minimum standards of behavior. Members of software engineering professional societies should also serve the **public interest** and promote the common good." |


* * *

|*Duncan Hall, **The Ethical Software Engineer**, IEEE Software, July 2009.[^foo366]*|

[^foo366]: [DOI: 10.1109/MS.2009.106 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.106)
 
 
{pagebreak}


  
* * *

| "A **framework** for **thinking about** domain-specific languages (**DSLs**) divides them into **internal DSLs**, **external DSLs**, and **language workbenches**. In all cases, it's important to have an explicit semantic model so that they form a veneer over an underlying library. DSLs are valuable for increasing programmer **productivity** and improving **communication** with domain experts." |


* * *

|*Martin Fowler, **A Pedagogical Framework for Domain-Specific Languages**, IEEE Software, July 2009.[^foo367]*|

[^foo367]: [DOI: 10.1109/MS.2009.85 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.85)
 
 
{pagebreak}


  
* * *

| "**Domain-specific techniques** provide a high-level specification for software systems. The technology's foundations have been developed over the last few years. However, domain-specific techniques **aren't a panacea**, and deciding whether investment in them is merited is an important step in understanding their benefits." |


* * *

|*Jonathan Sprinkle, Diomidis Spinellis, Juha-Pekka Tolvanen, Marjan Mernik, **Guest Editors' Introduction: What Kinds of Nails Need a Domain-Specific Hammer?**, IEEE Software, July 2009.[^foo368]*|

[^foo368]: [DOI: 10.1109/MS.2009.92 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.92)
 
 
{pagebreak}


  
* * *

| "Maintenance in software-intensive systems is critical because software often continuously evolves not only during development but also after delivery, to meet users' ever-changing needs. So, maintenance performance significantly impacts software development productivity." |


* * *

|*Lan Cao, Matti Rossi, Balasubramaniam Ramesh, **Are Domain-Specific Models Easier to Maintain Than UML Models?**, IEEE Software, July 2009.[^foo369]*|

[^foo369]: [DOI: 10.1109/MS.2009.87 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.87)
 
 
{pagebreak}


  
* * *

| "The single largest factor that led to a **language not being** used was when organizations gave the language design task to someone with **insufficient experience** in the **problem domain**." |


* * *

|*Steven Kelly, Risto Pohjonen, **Worst Practices for Domain-Specific Modeling**, IEEE Software, July 2009.[^foo370]*|

[^foo370]: [DOI: 10.1109/MS.2009.109 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.109)
 
 
{pagebreak}


  
* * *

| "**Reusing DSLs** is **hard**, however, because they're often designed to precisely describe a single domain or concern. A new approach uses techniques from **software product lines** (SPLs) to improve the reusability of a DSL, DSL composition, or supporting tool by providing traceability of language concepts to DSL design." |


* * *

|*Sumant Tambe, Jules White, Jeff Gray, James H. Hill, Aniruddha S. Gokhale, Douglas C. Schmidt, **Improving Domain-Specific Language Reuse with Software Product Line Techniques**, IEEE Software, July 2009.[^foo371]*|

[^foo371]: [DOI: 10.1109/MS.2009.95 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.95)
 
 
{pagebreak}


  
* * *

| "Although **lessons-learned activities** aid software process improvement, **few** IT industry **organizations** regularly and adequately **conduct them**." |


* * *

|*Anders Baaz, Anna Sandberg, Agneta Nilsson, Lena Holmberg, Helena Olsson, **Appreciating Lessons Learned**, IEEE Software, July 2009.[^foo372]*|

[^foo372]: [DOI: 10.1109/MS.2009.198 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.198)
 
 
{pagebreak}


  
* * *

| "For the past 40 years... we've **tortured ourselves** over our **inability** to finish a software project **on time** and **on budget**. But ... this **never** should have been the **supreme goal**. The **more important** goal is transformation, creating **software that changes the world** or that transforms a company or how it does business. We've been rather **successful at transformation**, often while operating outside our control envelope. Software development is and always will be somewhat **experimental**. The actual software construction isn't necessarily experimental, but its **conception is**. And this is where our focus ought to be. It's where our focus always ought to have been." |


* * *

|*Tom DeMarco, **Software Engineering: An Idea Whose Time Has Come and Gone?**, IEEE Software, July 2009.[^foo373]*|

[^foo373]: [DOI: 10.1109/MS.2009.101 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.101)
 
 
{pagebreak}






![](images-high-quality/2009-5.jpg)




{pagebreak}

  
* * *

| "The review results suggest that despite some limitations, **agile development** can improve **job satisfaction**, project **productivity**, and **customer satisfaction**." |


* * *

|*Tore Dyb&#x00E2;, Torgeir Dings&#x00F8;yr, **What Do We Know about Agile Software Development?**, IEEE Software, September 2009.[^foo374]*|

[^foo374]: [DOI: 10.1109/MS.2009.145 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.145)
 
 
{pagebreak}


  
* * *

| "**Millions of people** program to support their work but don't call themselves programmers. The field of **end-user software engineering** is concerned with helping these people create reliable, dependable, and reusable programs, without distracting them from their primary tasks. " |


* * *

|*Brad A. Myers, Robin Abraham, Andrew J. Ko, Margaret M. Burnett, **Guest Editors' Introduction: End-User Software Engineering**, IEEE Software, September 2009.[^foo375]*|

[^foo375]: [DOI: 10.1109/MS.2009.129 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.129)
 
 
{pagebreak}


  
* * *

| "People often **write code** to **prototype**, **ideate**, and **discover**. To do this, they **work opportunistically**, emphasizing speed and ease of development over code robustness and maintainability. Quickly hacking a program together can provide both practical and **learning benefits** for novices and experts: professional programmers and designers prototype to **explore and communicate** ideas, scientists program laboratory instruments, and entrepreneurs assemble complex spreadsheets to **better understand** their business." |


* * *

|*Joel Brandt, Philip J. Guo, Joel Lewenstein, and Scott R. Klemmer, Mira Dontcheva, **Writing Code to Prototype, Ideate, and Discover**, IEEE Software, September 2009.[^foo376]*|

[^foo376]: [DOI: 10.1109/MS.2009.147 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.147)
 
 
{pagebreak}


  
* * *

| "**Spreadsheets** are popular end-user programming tools. Many people use spreadsheet-computed values to make **critical decisions**, so spreadsheets must be correct. Proven software engineering principles can assist the construction and maintenance of dependable spreadsheets." |


* * *

|*Martin Erwig, **Software Engineering for Spreadsheets**, IEEE Software, September 2009.[^foo377]*|

[^foo377]: [DOI: 10.1109/MS.2009.140 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.140)
 
 
{pagebreak}


  
* * *

| "**Spreadsheet technology** is central to the functioning of the **financial sector**, but professionally created spreadsheets have a **high level of error**, which highlights the need for innovative supporting processes and tools. The current global financial crisis will likely accelerate this need because anticipated regulation will require novel, innovative risk management methods and technologies that cover development, risk assessment, review, and other spreadsheet activities. " |


* * *

|*Alan Rust, Kevin McDaid, **Test-Driven Development for Spreadsheet Risk Management**, IEEE Software, September 2009.[^foo378]*|

[^foo378]: [DOI: 10.1109/MS.2009.143 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.143)
 
 
{pagebreak}


  
* * *

| "Using **Selenium**, Web **acceptance-test designers** have a tool that programmatically reflects **business structure** much better than **protocol-level tools would**, while avoiding the pitfalls of capture-and-replay tools." |


* * *

|*Andreas Bruns, Dennis Wichmann, Andreas Kornst&#x00E4;dt, **Web Application Tests with Selenium**, IEEE Software, September 2009.[^foo379]*|

[^foo379]: [DOI: 10.1109/MS.2009.144 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.144)
 
 
{pagebreak}






![](images-high-quality/2009-6.jpg)




{pagebreak}

  
* * *

| "Software developers are notorious for **skimping** on **design documentation**, often eschewing it altogether. This trend has led to claims that it is merely an **impediment** in the **fast-paced** and highly pliable world of software development - a useless vestige of **old-style engineering** that should be eliminated altogether. ... because of the **complexity** of modern software systems and the **cryptic nature** of current programming **languages**, **good design documentation** is not only useful but vital. However, we must seek ways of adapting it to suit the **medium** as well as the **exceptionally dynamic development** process." |


* * *

|*Bran Selic, **Agile Documentation, Anyone?**, IEEE Software, November 2009.[^foo380]*|

[^foo380]: [DOI: 10.1109/MS.2009.167 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.167)
 
 
{pagebreak}


  
* * *

| "Software is developed by people, used by people, and supports interaction among people. As such, **human characteristics** and **cooperation** are central to modern practical software construction." |


* * *

|*Janice Singer, Cleidson R. B. de Souza, Helen Sharp, Gina Venolia, Li-Te Cheng, **Guest Editors' Introduction: Cooperative and Human Aspects of Software Engineering**, IEEE Software, November 2009.[^foo381]*|

[^foo381]: [DOI: 10.1109/MS.2009.176 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.176)
 
 
{pagebreak}


  
* * *

| "In the transformation from **traditional command-and-control** management to **collaborative self-managing** teams, the main challenges were the absence of **redundancy and conflict** between team- and individual-level autonomy." |


* * *

|*Tore Dyb&#x00E2;, Torgeir Dings&#x00F8;yr, Nils Brede Moe, **Overcoming Barriers to Self-Management in Software Teams**, IEEE Software, November 2009.[^foo382]*|

[^foo382]: [DOI: 10.1109/MS.2009.182 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.182)
 
 
{pagebreak}


  
* * *

| "Data showed that **learning resources** for **APIs** are critically important and shed light on three issues: the need to **discover** the **design** and **rationale** of the API when needed, the challenge of finding **credible** usage API **examples** at the right level of complexity, and the challenge of understanding **inexplicable** API **behavior**." |


* * *

|*Martin P. Robillard, **What Makes APIs Hard to Learn? Answers from Developers**, IEEE Software, November 2009.[^foo383]*|

[^foo383]: [DOI: 10.1109/MS.2009.193 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.193)
 
 
{pagebreak}


  
* * *

| "**Small to medium enterprises** (SMEs) increasingly participate in **offshore software development**. Key competitive SME abilities include **detecting market niches** and deploying highly flexible software development approaches. Therefore, learning how offshoring affects such capabilities, which are closely related to organizational learning, is crucial." |


* * *

|*Volker Wulf, Alexander Boden, Bernhard Nett, **Operational and Strategic Learning in Global Software Development**, IEEE Software, November 2009.[^foo384]*|

[^foo384]: [DOI: 10.1109/MS.2009.113 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.113)
 
 
{pagebreak}


  
* * *

| "Our aspirations grow faster than our capabilities, so **I don't expect software development to â€˜get solved.â€™**" |


* * *

|*Mary Shaw, **Continuing Prospects for an Engineering Discipline of Software**, IEEE Software, November 2009.[^foo385]*|

[^foo385]: [DOI: https://doi.ieeecomputersociety.org/10.1109/MS.2009.172 ](https://doi.ieeecomputersociety.org/10.1109/MS.2009.172)
 
 
{pagebreak}


  
* * *

| "Advice on **courteousness** and **politeness** in **technical communication** is in short supply, yet this is needed when developers communicate with other people. When discussing technical problems, aim to encourage rather than complain, focusing on technology issues rather than the people behind them. Every **email** should tackle **one topic** and that topic should be **the subject line**." |


* * *

|*Diomidis Spinellis, **Basic Etiquette of Technical Communication**, IEEE Software, November 2009.[^foo386]*|

[^foo386]: [DOI: 10.1109/MS.2009.170 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.170)
 
 
{pagebreak}


  
* * *

| "**Process metrics** can ignite **strong opinions** because they represent an area where **technical considerations** bump up against **human aspects** of software development. " |


* * *

|*Forrest Shull, Medha Umarji, **Measuring Developers: Aligning Perspectives and Other Best Practices**, IEEE Software, November 2009.[^foo387]*|

[^foo387]: [DOI: 10.1109/MS.2009.180 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.180)
 
 
{pagebreak}


  
* * *

| "In his final **Loyal Opposition** column for IEEE Software, **Robert Glass** points out the continued need for **testing academic theories** in practice and for practitioners to **discuss lessons learned**. He also states that **software estimation** is a **deeply flawed** activity and that software practitioners should always remain open-minded." |


* * *

|*Robert L. Glass, **Goodbye!**, IEEE Software, November 2009.[^foo388]*|

[^foo388]: [DOI: 10.1109/MS.2009.175 ](http://doi.ieeecomputersociety.org/10.1109/MS.2009.175)
 
 
{pagebreak}


