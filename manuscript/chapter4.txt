# Part IV: Discussion and Conclusions

We believe that influences among elements of design activities are main sources of complexity characteristic for design activities. While design situations, outcomes and techniques are themselves complex structures, what makes a design activity additionally and characteristically complex are interactions among these structures. As illustrated with our patters on influences, these interactions challenge designers' ability to deal with complexity as any of these structure is subject to change, in a difficult to predict ways.

One of the main assumptions in this book is that design complexity, as a consequence of instability of design activities, *should not be seen as a problem*. We are not alone to make the argument that design complexity should not be understood as a problem, but as an essential aspect of design. Fred Brooks, for instance, claimed that descriptions of a (software) design that abstract away its complexity often abstracts away its essence ([Brooks 1987](#Brooks1987)). Consequently, we view the instability and unpredictability of a design process as *a defining characteristic of any design activity*. In many ways, this instability is exactly what designers want and need. A fast-changing world, while being complex to understand and work with, is a rich source of design opportunities. In such a rich reality, it is possible for designers to see opportunities that can lead to increased interconnectivity, to connecting people to each other and to products and services. Designers are expected to create new, surprising and creative outcomes in domains where “conventional” more structured approaches may not work. They are expected to dive into new domains, to push the limits, rather than operate in standardized and well understood domains. This, by necessity, leads to an unstable process, in the sense that it is not possible to fully prescribe or control it. Moreover, a lack of stability is a requirement of any process that we call design. If a process is more predicable and stable, we would normally not call it design (or, at best, we would call it a routine design).

The key question, therfore, is not how to make design activities more stable and predictable, but how to deal with the resulting complexity. In general, we can deal with complexity in two fundamental ways: develop tools to reduce it when we can, or learn to tolerate it when we cannot ([Rubinstein 1986](#Rubinstein1986)). Both of these ways are relevant for designers. While the design research community has been working on developing tools to deal with different forms of design complexity (e.g. [Stolterman 2008](#Stolterman2008a), [Montagne 2010](#Montagne2010)), less attention has been given to acceptance and tolerance of design complexity itself.  [Robert Glass (2006)](#Glass2006), referring to the work of [Suedfeld, Tetlock & Streufert (1992)](#Suedfeld1992), claimed that it is unusual to find any kind of tolerance for complexity when it comes to managers, entrepreneurs, and maybe more surprisingly among academics (page 104). The majority seems to be looking for simple and elegant solutions. Glass however argued, as we do, that we should accept complexity and ambiguity in design, rather than trying to wish them away.

Accepting design complexity does not mean ignoring it. On the contrary. Accepting complexity has to be combined with more awareness about it. There is a strong need to be more considerate about design complexity and its sources, and invest more time in understanding and coping with it. With this book, we wanted to increase awareness about this form of complexity and its sources in design, and to stimulate designers and design researchers to approach the issues of design complexity more thoughtfully.

In addition to increasing the awareness about design complexity, our analytic framework can give some insights about why particular design approaches are more (or less) successful in dealing with design complexity. For example, most designers are well aware that due to the highly-interdepended nature of sources of design complexity it is not possible to work on one part of design in isolation. For instance, two of the most recognized design scholars [Lawson (2005)](#Lawson2005), [Schön (1990)](# Schön1990) argue, in their own way, that design problems are rarely simple problems with only one or two features, but that a whole host of criteria must be satisfied and a multitude of constraints respected. Lawson concludes that *“[t]he only way to keep them all in mind at once, as it were, is to oscillate very quickly between them like a juggler.”* (page 151). Lawson also cites Michael Wilford who compares architects to jugglers: *“'[a juggler] who's got six balls in the air . . . and an architect is similarly operating on at least six fronts simultaneously and if you take your eye off one of them and drop it, you're in trouble'.“* (page 151)

![Joggling (combined juggling and jogging). Designers are often compared to jugglers operating at several fronts simultaneously, Wikimedia Commons](images/Joggle.jpeg)

Many experienced designers already understand that many of the "conventional" ways of dealing with complexity cannot always be applied in design. For instance, one of the most common approaches to deal with complexity is separation of concerns often called a divide-and-conquer approach. In this approach, complex objects are divided into smaller more manageable pieces. Each of the resulting less complex pieces can then be handled more or independently of other pieces. Hierarchical organizations of systems in general follow this approach. In design, however, it is not normally possible to easily decompose problems in smaller chunks that can be solved in isolation. Advanced designers are aware that it is normally no possible to be reductionists and solve complexity by reducing the problem to something that can more easily be dealt with. Frosh nicely illustrates this issue with his view on systems engineering and systems analysis ([Frosh 1969](#Frosh1969)):

*“One of the key misassumptions in modern systems engineering and systems analysis is that the total problem can, and frequently is, decomposed into sub-problems; the sub-problems can be solved more or less independently, and the total solution can be synthesized by combination of the sub-solutions, treating the interactions of the parts as 'interfaces.' The real world is, however, highly nonlinear, and unless real attention is paid to this fact, the linear decomposition treatment will fail catastrophically, because the interaction terms may be as large as the sub-problems and not reducible to simple interfaces. The result may well remain decomposed.”*

Similarly, Rick Nason, in his discussion on complexity in business, noted that complex problems involve too many unknowns and too many interrelated factors to reduce to rules and processes [Nason 2017](#Nason2017).

Design complexity, thus, needs to be addressed with other approaches than decomposition and reductionism (e.g. [Sommerville et al. 2012](#Sommerville2012); [Stolterman 2008](#Stolterman2008a)).

It is also the case that experienced designers are aware that a designer never has enough information to reliably predict any aspect of a design, and that it is therefore not always a good idea to spend much time analyzing and theorizing about solutions and potential consequences. Instead, attempting a solution, making mistakes and learning from them is one of the most important strategies that designers use (e.g. [Ball et al. 2010](#Ball2010); [Gaver et al., 2009](#Gaver2009); [Buxton 2007](#Buxton2007); [Lamer 1989](#Lamers1989)'  [Linden 2010](#Linden2010)). Henry Petroski, for instance, argues that the old dictum “form follows function” is false, and that the basic rule of design evolution is “*form follows failure*" ([Petroski 1994: p 22](#Petroski1994)). He argued that changes in the design, even for commonplace things as forks and paper clips, are more motivated by the things early designs do poorly than those things they do well. Such flaws guide design decisions, as each new design attempt is an attempt to correct flaws. In domain of software design, empirical studies similarly showed that good software designers use a trial-and-error process with the purpose to create mental models of a design solution, while poor designers tend to seize on a solution with fewer trials and errors ([Curtis 1987](#Curtis1987); [Adelson 1986](#Adelson1986)). Or, as noted by Sir Francis Bacon almost 400 years ago "*truth will sooner come out of error than from confusion*" ([Bacon 1620](#Bacon1620)).

Probably the model that most famously describes the challenges that designers face in dealing with complexity is the [Simon’s (1996)](#Simon1996) model of “bounded rationality”. It is the concept that decision makers (irrespective of their level of intelligence) have to work under three unavoidable constraints: (1) only limited, often unreliable, information is available regarding possible alternatives and their consequences, (2) human mind has only limited capacity to evaluate and process the information that is available, and (3) only a limited amount of time is available to make a decision. Even individuals who intend to make rational choices are bound to make satisficing (rather than maximizing or optimizing) choices in complex situations. Decision-makers in this view are satisfices, because they seek a satisfactory solution rather than an optimal one.

The bounded rationality model reflects very well the designers' work. Designers are constantly making complex design decision, in fast changing environments. The world is changing fast, and designers need to make decisions before they fully understand design situations in order to avoid creating obsolete outcomes. And increased interconnectivity makes such changes quickly propagate in many parts of the world. The growing number of interconnections makes it very difficult to reason about all consequences of particular design decisions, especially on a longer term. Lately there has been some advancements based on Simon’s ideas that even more argues for the complexity of designing and also extends Simon’s model. One of the more interesting suggestions is found in [Hatchuel 2001](#Hatchuel2001). Hatchuel’s model emphasizes even more the need to handle complexity as a designer and that there is no way to deal with it by being comprehensive, instead he argues for an explorative and judgment based approach.

We are also seeing a strong movement from prediction based design management toward management that adapts to change. Initiatives, such as rapid prototyping and agile software development all emphasize importance of constant adaptation to change. [Ries (2011)](#Ries2011) noted that old management methods, such as long-term planning and forecasting, are not appropriate in dynamic context. As suggested by [Hales (1985)](#Hales1985) designers need to be like chameleons, constantly adapting to dynamic environments.

Complexity in design means different things for someone who is a researcher and someone who is a practicing designer. When we look at the research in the field, and compare it with our patterns of interactions, most researchers focus on one or a few of the patterns and their relationships. However, to a practicing designer does not have such a choice. When engaging in a real design activity, a designer cannot decide to only pay attention to particular patterns or relationships. A designer has to deal with the full complexity manifested in a concrete design situation. The recognition that most design research only pay attention to some particular aspects of the complexity of design practice was one of the motivations for creating a framework that would make it possible to examine and discuss design complexity without losing the overall view.

We believe that it is crucial to educate designers to be more tolerant and thoughtful about design complexity. This can be done in many ways. For instance, we can learn from successful designers who have developed a range of approaches suitable for dealing with design complexity. This can be seen as a form of learning that builds on the master-apprentice model with its proven record of transferring knowledge, insights and skills by personal connections, stories, and exemplars.

