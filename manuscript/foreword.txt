# Foreword[^ref_foo10]

[^ref_foo10]: This foreword is based on [Insights from the Past: The IEEE Software History Experiment](https://doi.org/10.1109/MS.2017.101), IEEE Software 34, 4 (July-August, 2017), 71-78.


This books is a result of work on creating the [IEEE Software history website](obren.info/ieeesw). This site is a curated site complementing the official [IEEE Software website](www.computer.org/software). It offers a look at IEEE Software's history at a glance. Here, I discuss its genesis' how it illustrates the practical value of historical data, and how it offers a glimpse into the magazine's future.


#### The Website's Genesis

The website has developed organically. There never was an official project to develop an elaborate overview of the magazine's history. Rather, the website evolved somewhat out of curiosity and as a volunteer initiative, partly in reaction to positive feedback about its developing content.

The idea for the website arose during the 2016 IEEE Software editorial-board meeting at the Software Improvement Group (SIG) in Amsterdam. As an organizer of the meeting, I was looking for ways to create an IEEE Software atmosphere. I decided to print the magazine covers and put them up as wallpaper (see Figure 1).

The board members, who were from both academia and industry, liked such an overview of topics and trends that were once considered important. For many, it brought back memories or created awareness of missed topics. In addition, the covers are attractive. SIG kept them on the wall for several months after the meeting.

After receiving requests to share digital versions of the covers, I created a simple website to display them. Thus, the original idea of the history website was only to create that display.

![Figure 1. IEEE Software front covers displayed at the 2016 editorial-board meeting.](images/sw_history_1.jpg)

#### The Website's Content

While collecting the covers, I discovered that the July/August 2017 issue would be the 200th issue. So, I decided to use the history website to celebrate this anniversary. I extended the website with several types of content, including these:

* *More than 1,000 quotes.* This was the most rewarding part of creating the site. These curated quotes make the website much more than a simple metadata index. The quotes have also been important in creating interesting content to promote the history of IEEE Software on social media such as Twitter because they're short but informative.
* *Indexes of all 3,000+ articles and 4,000+ authors.* These indexes enable quick exploration of articles and authors in a historical context. I also added a historical timeline for search results.
* *A citation index* (based on Google Scholar searches) correlated with the publication year. This helps show IEEE Software articles' broader impact. It also aids identifying the most cited articles, authors, or themes.


{pagebreak}

### Historical Data's Practical Value

I classify historical data's practical value into the following categories.

#### Seeing Trends

Historical data enables us to see trends in software engineering research and practice. In many aspects, this is the history website's main value, compared to digital libraries such as the IEEE Computer Society Digital Library (CSDL; www.computer.org/csdl) and IEEE Xplore (ieeexplore.ieee.org).

To illustrate the possibilities of seeing trends, Figure 2 shows word clouds created from terms in IEEE Software article titles, for four decades. Although IEEE Software covers diverse topics, each decade has had a few topics that were more popular.


In the 1980s, topics related to different programming paradigms were popular. For instance, parallel and distributed programming were important topics. Six theme issues and cover articles discussed programming:

 * 1984, no. 2. Programming: Sorcery or Science?
 * 1986, no. 4. Firmware Engineering.
 * 1988, no. 1. Parallel Programming: Issues and Questions.
 * 1988, no. 3. What Is Object-Oriented Programming?
 * 1989, no. 4. Parallel Programming.
 * 1989, no. 5. Multiparadigm Programming.

In the 1990s, the focus shifted toward process-related topics. Measurements, metrics, and quality assurance also received significant attention. Ten theme issues covered process management and metrics (and their combination):

 * 1990, no. 2. Using Metrics to Quantify Development.
 * 1991, no. 4. Process Assessment.
 * 1992, no. 4. Reliability Measurement.
 * 1993, no. 4. The Move to Mature Process.
 * 1994, no. 4. Measurement-Based Process Improvement.
 * 1996, no. 4. Managing Large Software Projects.
 * 1997, no. 2. Assessing Measurement.
 * 1997, no. 3. Managing Risk.
 * 1998, no. 4. Managing Legacy Systems.
 * 1999, no. 2. Metrics for Small Projects.

The 2000s were clearly the age of requirements engineering. Overall, IEEE Software has published 163 articles with “Requirements” in the title. Of those articles, 91 (56 percent) were published in the 2000s. Seven theme issues covered requirements engineering:

 * 2000, no. 3. Requirements Engineering: Getting the Details Right.
 * 2003, no. 1. RE 02: A Mature Requirements Engineering Community.
 * 2004, no. 2. Practical Requirements Engineering Solutions.
 * 2005, no. 1. Innovation in Requirements Engineering.
 * 2006, no. 3. RE 05: Engineering Successful Products.
 * 2007, no. 2. Stakeholders in Requirements Engineering.
 * 2008, no. 2. Quality Requirements.

In the 2010s, the focus shifted toward architecture:

 * 2010, no. 2. Agility and Architecture.
 * 2013, no. 2. Twin Peaks of Requirements and Architecture.
 * 2013, no. 6. Architecture Sustainability.
 * 2015, no. 5. Software Architecture.
 * 2016, no. 6. The Role of the Software Architect.

Overall, IEEE Software has published 167 articles with “Architecture” or “Architect” in the title. Of those articles, 97 (58 percent) have been published since 2010.


![Figure 2. Word clouds with terms in the titles of IEEE Software articles. 1980s. 1990s. 2000s. 2010s.](images/sw_history_2.jpg)



#### Preventing Knowledge Inflation

|*There’s a lot of forgetting, and a lot of “never knew that” in our field today*. —Robert Glass|

|*Those who cannot remember the past are condemned to repeat it." —George Santayana*|

Knowing history can help us avoid repeating errors and building on each other’s work. As Robert Glass noted, we keep forgetting early contributions and often reinvent the wheel. In my experience, much current software engineering work, especially practitioner’s books and posts, aren’t well connected to previous work. Similarly, Martin Fowler talked about semantic diffusion[^fooSemanticDiffusion], which occurs when a definition gets spread through the wider community in a way that weakens it [1]. Often this weakening is a consequence of lack of awareness of the original work related to the definition.

[^fooSemanticDiffusion]: [martinfowler.com/bliki/SemanticDiffusion.html](https://martinfowler.com/bliki/SemanticDiffusion.html).

I call this problem the inflation of software engineering terms and knowledge (see Figure 3). The difficulty of finding previous work often leads to reinvention of concepts and solutions. The reinvented solutions get documented and published, leading to the invention of new terms and creation of isolated content (unconnected to previous work). These new terms and content increase the already significant number of articles and posts, which makes finding previous work even more difficult. New cycles of such reinventions are inevitable.


![Figure 3. The vicious cycle of inflation of software engineering terms and knowledge. New cycles of such reinventions are inevitable.](images/sw_history_3.jpg)


Unfortunately, IEEE Software is partly to blame for this cycle. Just by looking at the covers, you can see that many themes repeat. For instance, there have been four “business of software” issues:

 * 2002, no. 6. The Business of Software Engineering.
 * 2004, no. 5. The Business of Software Engineering.
 * 2011, no. 4. Software as a Business.
 * 2016, no. 5. The Business of Software.

Looking at the introductions of the later theme issues, you can see that none of them connects to any of the previous ones. Nor do they relate to the brilliant but largely forgotten 1984 issue (no. 3) on Capital-Intensive Software Technology.

IEEE Software provides content that can help root new contributions in previous solid peer-reviewed research and practices. Many IEEE Software authors have been the originators of nowadays mainstream concepts and ideas. For examples, 10 of the 17 authors of the “Manifesto for Agile Software Development” have written for IEEE Software: Kent Beck, Alistair Cockburn, Ward Cunningham, Martin Fowler, James Grenning, Andrew Hunt, Ron Jeffries, Robert Martin, Steve Mellor, and Dave Thomas.

Detailed, easily accessible historical data can help slow down the inflation of knowledge by making it easier to find and connect to previous work and ideas.


#### Being a Source of Inspiration

Another value of easily accessible historical information is in its relevant and inspirational content. I was surprised to discover that many articles from the 1980s and 1990s are still relevant.

I’ve come across quite a few such insightful pieces. For my daily work, I’ve found early work on software architecture, quality, and maintenance still insightful and inspiring.

I particularly like the clarity of definitions and research questions in the early articles, which often have defined a new field. Knowing such early work also helps you have authority in the field.

In my practical work as a consultant, I’ve discovered the value of historical content as an antidote to hype. Nothing cools down a heated sales pitch about a “revolutionary” new technology more than showing the presenter a 30-year-old article describing the same or a similar concept, sometimes with empirical studies, and asking how the “new” solution differs.

I also came across many inspirational but less known and unexpected pieces, such as great articles from Alan Kay and Christopher Alexander.

Another piece of inspiration is what I call “the art of IEEE Software.” The covers, as well as the article illustrations, depict key software engineering concepts in an original and artistically pleasing way.


#### Having Intrinsic Historical Value

History has value in itself. People care about it. For example, Alison Gopnik[^fooGopnik] explained that acknowledging the truth about the past, good or bad, individually or collectively, is deeply important to us as humans, even when it has no immediate effect on the present. I think the same concept applies to the history of software engineering. Many of us software engineering professionals find it important to acknowledge the truth about the past for its own sake, even when it has no immediate effect on what we do now.

[^fooGopnik]: A Gopnik, The Philosophical Baby, Farrar, Straus and Giroux, 2009.

Gopnik also noted that many parents spend much energy trying to determine their children’s future. However, parents can’t give their children a good future, but they can give them a good past. That also applies to us. Can we as potential authors determine software engineering’s future? Who knows? We can try. But it’s not completely in our hands. And history teaches us that we have, on quite a few occasions, been wrong. But can we give software engineering a good history? This is definitely much more under our control. This book is intended to help achieve this goal.

